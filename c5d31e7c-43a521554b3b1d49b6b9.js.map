{"version":3,"sources":["webpack:///./src/constants/waves/nerdamer/core.js"],"names":["bigInt","nerdamer","imports","_","Parser","bigDec","require","default","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","roots","i","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","name","message","this","undefined","error","stack","prototype","Object","create","isReserved","value","indexOf","allSame","arr","last","l","length","equals","warn","push","SHOW_WARNINGS","console","validateName","typ","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","parts","String","toLowerCase","split","e","pop","coeff_array","slice","zero","Array","join","dec","isPrime","n","q","floor","sqrt","isNumber","isFraction","isSymbol","multiplier","toDecimal","obj","Symbol","isExpression","Expression","variables","poly","vars","c","add","isNaN","group","prevgroup","previousGroup","power","x","symbols","firstObject","args","sort","isVector","Vector","isMatrix","Matrix","isSet","Set","isNumericSymbol","symbol","isArray","isInt","toString","isNegative","lessThan","stringify","o","inBrackets","str","format","call","arguments","shift","new_str","replace","match","index","arg","keys","key","both","setFunction","params_array","body","parse","functions","mapped_function","params","arrayMin","min","apply","decompose_fn","fn","wrt","as_obj","ax","a","b","t","expand","clone","stripVar","subtract","divide","nround","s","Number","MAX_VALUE","round","each","hasOwnProperty","even","evenFraction","arrayUnique","item","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","splice","block","setting","f","opt","current_setting","retval","arguments2Array","evaluate","generatePrimes","upto","allNumbers","allConstants","isPi","isE","isConstant","DivisionByZero","ParseError","UndefinedError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","exceptions","Big","cos","sin","Math2","csc","sec","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","median","values","half","fromContinued","contd","fractions","whole","continuedFraction","w","absn","ni","done","EPSILON","idx","bigpow","p","Frac","isInteger","den","nthroot","gamma","z","C","g","bigfactorial","times","bigLog","quick","k","r","invert","multiply","factorial","is_int","NaN","dfactorial","GCD","map","QGCD","gcd","negate","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","prime","lt","safety","rho","xf","cz","mod","minus","sm","boxfactor","max","d","fib","y","integer_part","simpson","step","get_value","side","v","dx","xi","num_integrate","tol","maxdepth","state","maxDepthCount","nanEncountered","fa","fm","fb","adsimp","V0","depth","f1","f2","sl","sr","s2","m","V1","V2","integrate","Ci","sum","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","dk","dk0","d0","xk","powb","dk_dec","gte","xn","ld","same_delta","delta","decimal","text","option","useGroup","decp","asHash","wrapCondition","asDecimal","valueOf","frac","exec","negative","quotient","digits","passed","numer","denom","divmod","remainder","operator","Scientific","om","collectSymbols","txt","pg","pwg","fname","isComposite","charAt","cv","parens","elements","startsWith","substr","isScientific","fromScientific","convert","simple","Fraction","isInfinity","imaginary","bin","preprocessors","names","actions","Slice","upper","lower","start","end","Collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","append","getItems","pretty_print","collection","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","prec","re","im","sinh","removeDen","sq","fromArray","tanh","sech","csch","coth","acosh","asinh","atanh","asech","acsch","acoth","realpart","imagpart","hyp","atan2","symfunction","greaterThan","trig","isImaginary","getQuadrant","isLinear","trigh","infinity","units","action","prefix","postfix","operation","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","SYMBOLIC_MIN_MAX","symMinMax","_symbol","cf","sigfigs","scientific","pfactor","identity","cbrt","mat","determinant","cols","rows","transpose","vec1","vec2","dot","cross","vector","tolerance","matrix","M","col_index","col","rationalize","l2","conjugate","theta","toPolarFormArray","original","getDenom","getNum","getval","aval","bval","set1","set2","union","contains","intersection","difference","intersects","is_subset","ostr","override","which","with_what","restore","what","extend","force_call","fn_name","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","USE_BIG","fmodules","fmodule","findFunction","bigConvert","operator_filter_regex","filter","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","Node","token","left","right","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","trim","regex","L","lpos","tokens","scopes","target","open_brackets","has_space","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","substring","chunkify","operator_str","_operators","ch","add_token","at","add_function","set_last_position","position","last_token_is_numeric","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","ret","getter","il","element","subbed","isUnit","toHTML","indent","tab","repeat","html","tree","location","group1","group2","first","before","g1","g2","prepare_expression","toObject","expression_string","objectify","isConversion","chunkAtCommas","chunks","rem_brackets","ms","distributeMultiplier","toUnitMultiplier","V","symbol1","symbol2","retnum","retden","is_negative","img","setPower","qa","tw","nn","unwrapPARENS","toLinear","rem","isOne","sym","asbig","numVal","base","log_sym","log_base","img_part","sIsConstant","toExponential","isFinite","pn","hascomposites","sp","sub","composites","non_composites","isDenom","prod","finalResult","testSQRT","absEquals","testPow","fct","primeFactors","toTeX","expression_or_obj","TeX","cdot","nobj","LaTeX","braces","expr","argSplit","latex","clean","new_num","new_den","getFunction","addPreprocessor","order","shift_cells","getPreprocessors","removePreprocessor","subs","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","h1","h2","powEQ","v1","v2","aIsComposite","bIsComposite","PN","PNEQ","valEQ","attach","insert","shell","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","ONN","u","gt","distributeExponent","combine","bm","p1","p2","isSymbolP1","isSymbolP2","toEX","logV","n1","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","aIsZero","bIsZero","nre","nim","bIsConstant","aIsConstant","bIsInt","multiplyPower","sgn","aa","_a","_b","a1","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","_result","isEX","pt","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","eq","lte","log10","LOG10E","trunc","ceil","getExpression","expression_number","asType","expression","text_","first_arg","buildFunction","Build","build","isPolynomial","isPoly","for_symbol","otype","callback","numerator","denominator","hasFunction","containsFunction","variable","coeff","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","copy","rounded","next_two","ed","SCIENTIFIC_IGNORE_INTS","wholes","is_neg","isFrac","m_dc","simplify","neg","narr","unshift","qcompare","isnegative","lcm","div","unwrapSQRT","all","isSimple","powSimp","powers","mfactors","out_","in_","xt","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","retainSign","isSymbolic","isInverse","properties","keepSign","deep","power_only","is_one","cp","isImgSymbol","keyForGroup","existing","hash","contents","is_parens","sort_fn","expand_symbol","collected","concat","isCombination","opts","qc","quickConversion","fullConversion","parseInt","d1","d2","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","epsilon","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","phi","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","deg","lg","ln","Pr","sup","arctan","det","hom","lim","LN","dim","liminf","inverted","t_varray","input","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","square","brace","angle","filterTokens","filtered","raw_tokens","parse_next","get","items","lw","rl","el","arrayPrefill","val","custom","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","F","zeroMatrix","raw_values","raw","nc","isSquare","toRightTriangular","isSingular","augment","np","els","divisor","new_element","ki","imatrix","kp","inverse_elements","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","continued_fraction","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","f_array","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","alias","Function","LOG_FNS","Utils","allNumeric","arrayAddSlices","slices","arrayClone","new_array","arrayMax","arraySum","clearU","indx","comboSort","combined","na","nb","compare","sym1","sym2","comparison","scope","random","convertToVector","customType","fillHoles","getCoeffs","coeffs","term","getU","importFunctions","isVariableSymbol","nroots","_roots","root","range","sameSign","separate","stringReplace","from","to","with_str","groups","PARSER","libExports","fndec","multi_options","convertToLaTeX","convertFromLaTeX","version","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","register","core","parent_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","api","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractSmall","multiplyLong","a_i","multiplySmall","shiftLeft","multiplySmallAndArray","divModSmall","divModAny","self","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","reverse","divMod2","qSign","mSign","isBasicPrime","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","modPow","plus","subtractAny","small","l1","multiplyKaratsuba","ac","bd","abcd","_multiplyBySmall","over","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","greaterOrEquals","geq","lesserOrEquals","leq","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","roughLOB","shiftRight","remQuo","and","or","xor","integerLogarithm","tmp","absBase","charCodeAt","charCode","parseBaseFromArray","digit","toBase","out","toBaseString","parseStringValue","decimalPlace","parseNumberValue","toJSON","minusOne","isInstance","low","restricted","module","exports"],"mappings":"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","file":"c5d31e7c-43a521554b3b1d49b6b9.js","sourcesContent":["/*\n * Author : Martin Donk\n * Website : http://www.nerdamer.com\n * Email : martin.r.donk@gmail.com\n * Source : https://github.com/jiggzson/nerdamer\n */\n\n /* eslint-disable */\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\n//externals ====================================================================\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\n\nvar nerdamer = (function (imports) {\n    \"use strict\";\n\n//version ======================================================================\n    var version = '1.1.5';\n\n//inits ========================================================================\n    var _ = new Parser(); //nerdamer's parser\n\n    //import bigInt\n    var bigInt = imports.bigInt;\n    var bigDec = require('decimal.js');\n    if (typeof bigDec === 'object') {\n        bigDec = bigDec.default;\n    }\n    //set the precision to js precision\n    bigDec.set({\n        precision: 250\n    });\n\n    var Groups = {};\n\n    //container of pregenerated primes\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\n\n//Settings =====================================================================\n    var CUSTOM_OPERATORS = {};\n\n    var Settings = {\n\t\t//Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\n\t\tcallPeekers: false,\n\n\n        //the max number up to which to cache primes. Making this too high causes performance issues\n        init_primes: 1000,\n\n        exclude: [],\n        //If you don't care about division by zero for example then this can be set to true.\n        //Has some nasty side effects so choose carefully.\n        suppress_errors: false,\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\n        PARSE2NUMBER: false,\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\n        SAFE: false,\n        //the symbol to use for imaginary symbols\n        IMAGINARY: 'i',\n        //the modules used to link numeric function holders\n        FUNCTION_MODULES: [Math],\n        //Allow certain characters\n        ALLOW_CHARS: ['π'],\n        //Allow nerdamer to convert multi-character variables\n        USE_MULTICHARACTER_VARS: true,\n        //Allow changing of power operator\n        POWER_OPERATOR: '^',\n        //The variable validation regex\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\n        //Aliases\n        ALIASES: {\n            'π': 'pi',\n            '∞': 'Infinity'\n        },\n        POSITIVE_MULTIPLIERS: false,\n        //Cached items\n        CACHE: {},\n        //Print out warnings or not\n        SILENCE_WARNINGS: false,\n        //Precision\n        PRECISION: 80,\n        //function mappings\n        VECTOR: 'vector',\n        PARENTHESIS: 'parens',\n        SQRT: 'sqrt',\n        ABS: 'abs',\n        FACTORIAL: 'factorial',\n        DOUBLEFACTORIAL: 'dfactorial',\n        //reference pi and e\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\n        PI: Math.PI,\n        E: Math.E,\n        LOG: 'log',\n        LOG10: 'log10',\n        LOG10_LATEX: 'log_{10}',\n        MAX_EXP: 200000,\n        //The number of scientific place to round to\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\n        //True if ints should not be converted to\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\n    };\n\n    (function () {\n        Settings.CACHE.roots = {};\n        var x = 40,\n                y = 40;\n        for (var i = 2; i <= x; i++) {\n            for (var j = 2; j <= y; j++) {\n                var nthpow = bigInt(i).pow(j);\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\n            }\n        }\n    })();\n\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\n    //when it's raised to a symbol, which typically results in an EX\n    var N = Groups.N = 1, // A number\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\n            S = Groups.S = 3, // A single variable e.g. x.\n            EX = Groups.EX = 4, // An exponential\n            FN = Groups.FN = 5, // A function\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\n\n    var CONST_HASH = Settings.CONST_HASH = '#';\n\n    var PARENTHESIS = Settings.PARENTHESIS;\n\n    var SQRT = Settings.SQRT;\n\n    var ABS = Settings.ABS;\n\n    var FACTORIAL = Settings.FACTORIAL;\n\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\n\n    //the storage container \"memory\" for parsed expressions\n    var EXPRESSIONS = [];\n\n    //variables\n    var VARS = {};\n\n    //the container used to store all the reserved functions\n    var RESERVED = [];\n\n    var WARNINGS = [];\n\n    /**\n     * Use this when errors are suppressible\n     * @param {String} msg\n     * @param {object} ErrorObj\n     */\n    var err = function (msg, ErrorObj) {\n        if (!Settings.suppress_errors) {\n            if (ErrorObj)\n                throw new ErrorObj(msg);\n            else\n                throw new Error(msg);\n        }\n    };\n\n//Utils ========================================================================\n    var customError = function (name) {\n        var E = function (message) {\n            this.name = name;\n            this.message = message !== undefined ? message : '';\n            var error = new Error(this.message);\n            error.name = this.name;\n            this.stack = error.stack;\n        }; //create an empty error\n        E.prototype = Object.create(Error.prototype);\n        return E;\n    };\n\n    /**\n     * Checks to see if value is one of nerdamer's reserved names\n     * @param {String} value\n     * @return boolean\n     */\n    var isReserved = function (value) {\n        return RESERVED.indexOf(value) !== -1;\n    };\n\n    /**\n     * Checks to see that all symbols in array are the same\n     * @param {Symbol[]} arr\n     * @returns {bool}\n     */\n    var allSame = function (arr) {\n        var last = arr[0];\n        for (var i = 1, l = arr.length; i < l; i++)\n            if (!arr[i].equals(last))\n                return false;\n        return true;\n    };\n\n    /**\n     * Used to pass warnings or low severity errors about the library\n     * @param msg\n     */\n    var warn = function (msg) {\n        WARNINGS.push(msg);\n        if (Settings.SHOW_WARNINGS && console && console.warn) {\n            console.warn(msg);\n        }\n    };\n\n    /**\n     * Enforces rule: \"must start with a letter or underscore and\n     * can have any number of underscores, letters, and numbers thereafter.\"\n     * @param name The name of the symbol being checked\n     * @param {String} typ - The type of symbols that's being validated\n     * @throws {Exception}  - Throws an exception on fail\n     */\n    var validateName = function (name, typ) {\n        typ = typ || 'variable';\n        if (Settings.ALLOW_CHARS.indexOf(name) !== -1)\n            return;\n        var regex = Settings.VALIDATION_REGEX;\n        if (!(regex.test(name))) {\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\n        }\n    };\n\n    /**\n     * Convert number from scientific format to decimal format\n     * @param {Number} num\n     */\n    var scientificToDecimal = function (num) {\n        var nsign = Math.sign(num);\n        //remove the sign\n        num = Math.abs(num);\n        //if the number is in scientific notation remove it\n        if (/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\n            var zero = '0',\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\n                    e = parts.pop(), //store the exponential part\n                    l = Math.abs(e), //get the number of zeros\n                    sign = e / l,\n                    coeff_array = parts[0].split('.');\n            if (sign === -1) {\n                l = l - coeff_array[0].length;\n                if (l < 0) {\n                  num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\n                }\n                else {\n                  num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\n                }\n            }\n            else {\n                var dec = coeff_array[1];\n                if (dec)\n                    l = l - dec.length;\n                if (l < 0) {\n                  num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\n                } else {\n                  num = coeff_array.join('') + new Array(l + 1).join(zero);\n                }\n            }\n        }\n\n        return nsign < 0 ? '-'+num : num;\n    };\n    /**\n     * Checks if number is a prime number\n     * @param {Number} n - the number to be checked\n     */\n    var isPrime = function (n) {\n        var q = Math.floor(Math.sqrt(n));\n        for (var i = 2; i <= q; i++) {\n            if (n % i === 0)\n                return false;\n        }\n        return true;\n    };\n\n    /**\n     * Checks if n is a number\n     * @param {any} n\n     */\n    var isNumber = function(n) {\n        return /^\\d+\\.?\\d*$/.test(n);\n    };\n\n    /**\n     * Checks to see if an array contains only numeric values\n     * @param {Array} arr\n     */\n    var allNumeric = function(arr) {\n        for(var i=0; i<arr.length; i++)\n            if(!isNumber(arr[i]))\n                return false;\n        return true;\n    };\n    /**\n     * Checks to see if a number or Symbol is a fraction\n     * @param {Number|Symbol} num\n     * @returns {boolean}\n     */\n    var isFraction = function (num) {\n        if (isSymbol(num))\n            return isFraction(num.multiplier.toDecimal());\n        return (num % 1 !== 0);\n    };\n\n    /**\n     * Checks to see if the object provided is a Symbol\n     * @param {Object} obj\n     */\n    var isSymbol = function (obj) {\n        return (obj instanceof Symbol);\n    };\n\n    /**\n     * Checks to see if the object provided is an Expression\n     * @param {Object} obj\n     */\n    var isExpression = function (obj) {\n        return (obj instanceof Expression);\n    };\n\n    /**\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\n     * names are then returned in alphabetical order.\n     * @param {Symbol} obj\n     * @param {Boolean} poly\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\n     * automatically. In the future this will be a Collector object.\n     * @returns {String[]} - An array containing variable names\n     */\n    var variables = function (obj, poly, vars) {\n        vars = vars || {\n            c: [],\n            add: function (value) {\n                if (this.c.indexOf(value) === -1 && isNaN(value))\n                    this.c.push(value);\n            }\n        };\n\n        if (isSymbol(obj)) {\n            var group = obj.group,\n                    prevgroup = obj.previousGroup;\n            if (group === EX)\n                variables(obj.power, poly, vars);\n\n            if (group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\n                for (var x in obj.symbols) {\n                    variables(obj.symbols[x], poly, vars);\n                }\n            }\n            else if (group === S || prevgroup === S) {\n                //very crude needs fixing. TODO\n                if (!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\n                    vars.add(obj.value);\n            }\n            else if (group === PL || prevgroup === PL) {\n                variables(firstObject(obj.symbols), poly, vars);\n            }\n            else if (group === EX) {\n                if (!isNaN(obj.value))\n                    vars.add(obj.value);\n                variables(obj.power, poly, vars);\n            }\n            else if (group === FN && !poly) {\n                for (var i = 0; i < obj.args.length; i++) {\n                    variables(obj.args[i], poly, vars);\n                }\n            }\n        }\n\n        return vars.c.sort();\n    };\n\n    /**\n     * Returns the sum of an array\n     * @param {Array} arr\n     * @returns {Symbol}\n     */\n    var arraySum = function(arr) {\n        var sum = new Symbol(0);\n        arr.map(function(x) {\n            sum = _.add(sum, x);\n        });\n        return sum;\n    };\n\n    /**\n     * Separates out the variables into terms of variabls.\n     * e.g. x+y+x*y+sqrt(2)+pi returns\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\n     * @param {type} symbol\n     * @param {type} o\n     * @returns {undefined}\n     * @throws {Error} for expontentials\n     */\n    var separate = function (symbol, o) {\n        symbol = _.expand(symbol);\n        o = o || {};\n        var insert = function (key, sym) {\n            if (!o[key])\n                o[key] = new Symbol(0);\n            o[key] = _.add(o[key], sym.clone());\n        };\n        symbol.each(function (x) {\n            if (x.isConstant('all'))\n                insert('constants', x);\n            else if (x.group === S) {\n                insert(x.value, x);\n            }\n            else if (x.group === FN && (x.fname === ABS || x.fname === '')) {\n                separate(x.args[0]);\n            }\n            else if (x.group === EX || x.group === FN) {\n                throw new Error('Unable to separate. Term cannot be a function!');\n            }\n            else {\n                insert(variables(x).join(' '), x);\n            }\n        });\n\n        return o;\n    };\n\n    /**\n     * Fills holes in an array with zero symbol or generates one with n zeroes\n     * @param {Array} arr\n     * @param {Number} n\n     */\n    var fillHoles = function (arr, n) {\n        n = n || arr.length;\n        for (var i = 0; i < n; i++) {\n            var sym = arr[i];\n            if (!sym)\n                arr[i] = new Symbol(0);\n        }\n        return arr;\n    };\n\n    /**\n     *\n     * Checks to see if the object provided is a Vector\n     * @param {Object} obj\n     */\n    var isVector = function (obj) {\n        return (obj instanceof Vector);\n    };\n\n    /**\n     * Checks to see if the object provided is a Matrix\n     * @param {Object} obj\n     */\n    var isMatrix = function (obj) {\n        return (obj instanceof Matrix);\n    };\n\n    var isSet = function(obj) {\n        return (obj instanceof Set);\n    };\n\n    /**\n     * Checks to see if a symbol is in group N\n     * @param {Symbol} symbol\n     */\n    var isNumericSymbol = function (symbol) {\n        return symbol.group === N || symbol.group === P;\n    };\n\n    /**\n     * Checks to see if a symbol is a variable with no multiplier nor power\n     * @param {Symbol} symbol\n     */\n    var isVariableSymbol = function (symbol) {\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\n    };\n\n    /**\n     * Checks to see if the object provided is an Array\n     * @param {Object} arr\n     */\n    var isArray = function (arr) {\n        return Array.isArray(arr);\n    };\n\n    /**\n     * Checks to see if a number is an integer\n     * @param {Number} num\n     */\n    var isInt = function (num) {\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\n    };\n\n    /**\n     * @param {Number|Symbol} obj\n     * @returns {boolean}\n     */\n    var isNegative = function (obj) {\n        if (isSymbol(obj)) {\n            obj = obj.multiplier;\n        }\n        return obj.lessThan(0);\n    };\n    /**\n     * Safely stringify object\n     * @param o\n     */\n    var stringify = function(o) {\n        if(!o)\n            return o;\n        return String(o);\n    };\n\n    /**\n     * @param {String} str\n     * @returns {String} - returns a formatted string surrounded by brackets\n     */\n    var inBrackets = function (str) {\n        return '(' + str + ')';\n    };\n\n    /**\n     * A helper function to replace parts of string\n     * @param {String} str - The original string\n     * @param {Integer} from - The starting index\n     * @param {Integer} to - The ending index\n     * @param {String} with_str - The replacement string\n     * @returns {String} - A formatted string\n     */\n    var stringReplace = function (str, from, to, with_str) {\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\n    };\n\n    /**\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\n     * @param {Object} obj\n     * @returns {boolean}\n     */\n    var customType = function (obj) {\n        return obj !== undefined && obj.custom;\n    };\n\n    /**\n     * Checks to see if numbers are both negative or are both positive\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {boolean}\n     */\n    var sameSign = function (a, b) {\n        return (a < 0) === (b < 0);\n    };\n\n    /**\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\n     * @example format('{0} nice, {0} sweet', 'something')\n     * //returns 'something nice, something sweet'\n     */\n    var format = function () {\n        var args = [].slice.call(arguments),\n                str = args.shift();\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\n            var arg = args[index];\n            return typeof arg === 'function' ? arg() : arg;\n        });\n\n        return new_str;\n    };\n\n    /**\n     * Generates an array with values within a range. Multiplies by a step if provided\n     * @param {Number} start\n     * @param {Number} end\n     * @param {Number} step\n     */\n    var range = function(start, end, step) {\n        var arr = [];\n        step = step || 1;\n        for(var i=start; i<=end; i++)\n            arr.push(i*step);\n        return arr;\n    };\n\n    /**\n     * Returns an array of all the keys in an array\n     * @param {Object} obj\n     * @returns {Array}\n     */\n    var keys = Object.keys;\n\n    /**\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\n     * so only use if you need any first random or if there's only one item in the object\n     * @param {Object} obj\n     * @param {String} key Return this key as first object\n     * @param {Boolean} both\n     * @returns {*}\n     */\n    var firstObject = function (obj, key, both) {\n        for (var x in obj)\n            break;\n        if (key)\n            return x;\n        if(both)\n            return {\n                key: x,\n                obj: obj[x]\n            };\n        return obj[x];\n    };\n\n    /**\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\n     * @param {Symbol} sym1\n     * @param {Symbol} sym2\n     * @param {String[]} vars - an optional array of variables to use\n     * @returns {bool}\n     */\n    var compare = function (sym1, sym2, vars) {\n        var n = 5; //a random number between 1 and 5 is good enough\n        var scope = {}; // scope object with random numbers generated using vars\n        var comparison;\n        for (var i = 0; i < vars.length; i++)\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\n        block('PARSE2NUMBER', function () {\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\n        });\n        return comparison;\n    };\n\n    /**\n     * Is used to set a user defined function using the function assign operator\n     * @param {String} name\n     * @param {String[]} params_array\n     * @param {String} body\n     * @returns {Boolean}\n     */\n    var setFunction = function (name, params_array, body) {\n        validateName(name);\n        if (!isReserved(name)) {\n            params_array = params_array || variables(_.parse(body));\n            _.functions[name] = [_.mapped_function, params_array.length, {\n                    name: name,\n                    params: params_array,\n                    body: body\n                }];\n            return body;\n        }\n        return null;\n    };\n\n    /**\n     * Returns the minimum number in an array\n     * @param {Array} arr\n     * @returns {Number}\n     */\n    var arrayMax = function (arr) {\n        return Math.max.apply(undefined, arr);\n    };\n\n    /**\n     * Returns the maximum number in an array\n     * @param {Array} arr\n     * @returns {Number}\n     */\n    var arrayMin = function (arr) {\n        return Math.min.apply(undefined, arr);\n    };\n\n    /**\n     * Clones array with clonable items\n     * @param {Array} arr\n     * @returns {Array}\n     */\n    var arrayClone = function (arr) {\n        var new_array = [], l = arr.length;\n        for (var i = 0; i < l; i++)\n            new_array[i] = arr[i].clone();\n        return new_array;\n    };\n\n    /**\n     * Fills numbers between array values\n     * @param {Numbers[]} arr\n     * @param {Integer} slices\n     */\n    var arrayAddSlices = function(arr, slices) {\n        slices = slices || 20;\n        var retval = [];\n        var c, delta, e;\n        retval.push(arr[0]); //push the beginning\n        for(var i=0; i<arr.length-1; i++) {\n            c = arr[i];\n            delta = arr[i+1]-c; //get the difference\n            e = delta/slices; //chop it up in the desired number of slices\n            for(var j=0; j<slices; j++) {\n                c += e; //add the mesh to the last slice\n                retval.push(c);\n            }\n        }\n\n        return retval;\n    };\n\n     /**\n     * Gets nth roots of a number\n     * @param {Symbol} symbol\n     * @returns {Vector}\n     */\n    var nroots = function(symbol) {\n        var a, b;\n\n        if(symbol.group === FN && symbol.fname === '') {\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n            b = _.parse(symbol.power);\n        }\n        else if(symbol.group === P) {\n            a = _.parse(symbol.value);\n            b = _.parse(symbol.power);\n        }\n\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\n            var _roots = [];\n\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\n            var r = parts[0];\n\n            //var r = _.parse(a).abs().toString();\n\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n            var x = _.arg(a);\n            var n = b.multiplier.den.toString();\n            var p = b.multiplier.num.toString();\n\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\n\n            for(var i=0; i<n; i++) {\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n            }\n            return Vector.fromArray(_roots);\n        }\n        else if(symbol.isConstant(true, true)) {\n            var sign = symbol.sign();\n            var x = evaluate(symbol.abs());\n            var root = _.sqrt(x);\n\n            var _roots = [root.clone(), root.negate()];\n\n            if(sign < 0)\n                _roots = _roots.map(function(x) {\n                    return _.multiply(x, Symbol.imaginary());\n                });\n\n        }\n        else {\n            _roots = [_.parse(symbol)];\n        }\n\n        return Vector.fromArray(_roots);\n    };\n\n    /**\n     * Sorts and array given 2 parameters\n     * @param {String} a\n     * @param {String} b\n     */\n    var comboSort = function (a, b) {\n        var l = a.length,\n                combined = []; //the linker\n        for (var i = 0; i < a.length; i++) {\n            combined.push([a[i], b[i]]); //create the map\n        }\n\n        combined.sort(function (x, y) {\n            return x[0] - y[0];\n        });\n\n        var na = [], nb = [];\n\n        for (i = 0; i < l; i++) {\n            na.push(combined[i][0]);\n            nb.push(combined[i][1]);\n        }\n\n        return [na, nb];\n    };\n    /**\n     * TODO: Pick a more descriptive name and better description\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\n     * Example a*x^2+b wrt x\n     * @param {Symbol} fn\n     * @param {String} wrt\n     * @param {bool} as_obj\n     */\n    var decompose_fn = function (fn, wrt, as_obj) {\n        wrt = String(wrt); //convert to string\n        var ax, a, x, b;\n        if (fn.group === CP) {\n            var t = _.expand(fn.clone()).stripVar(wrt);\n            ax = _.subtract(fn.clone(), t.clone());\n            b = t;\n        }\n        else\n            ax = fn.clone();\n        a = ax.stripVar(wrt);\n        x = _.divide(ax.clone(), a.clone());\n        b = b || new Symbol(0);\n        if (as_obj)\n            return {\n                a: a,\n                x: x,\n                ax: ax,\n                b: b\n            };\n        return [a, x, ax, b];\n    };\n    /**\n     * Rounds a number up to x decimal places\n     * @param {Number} x\n     * @param {Number} s\n     */\n    var nround = function (x, s) {\n        if(isInt(x)) {\n            if(x >= Number.MAX_VALUE)\n                return x.toString();\n            return Number(x);\n        }\n\n        s = typeof s === 'undefined' ? 14 : s;\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\n    };\n\n    /**\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\n     * instance a is used in the symbol then it keeps going down the line until\n     * one is found that's not in use. If all letters are taken then it\n     * starts appending numbers.\n     * IMPORTANT! It assumes that the substitution will be undone\n     * beore the user gets to interact with the object again.\n     * @param {Symbol} symbol\n     */\n    var getU = function (symbol) {\n        //start with u\n        var u = 'u', //start with u\n                v = u, //init with u\n                c = 0, //postfix number\n                vars = variables(symbol);\n        //make sure this variable isn't reserved and isn't in the variable list\n        while (!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\n            v = u + c++;\n        //get an empty slot. It seems easier to just push but the\n        //problem is that we may have some which are created by clearU\n        for (var i = 0, l = RESERVED.length; i <= l; i++)\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\n            if (!RESERVED[i]) {\n                RESERVED[i] = v; //reserve the variable\n                break;\n            }\n        return v;\n    };\n\n    /**\n     * Clears the u variable so it's no longer reserved\n     * @param {String} u\n     */\n    var clearU = function (u) {\n        var indx = RESERVED.indexOf(u);\n        if (indx !== -1)\n            RESERVED[indx] = undefined;\n    };\n\n    /**\n     * Loops through each item in object and calls function with item as param\n     * @param {Object|Array} obj\n     * @param {Function} fn\n     */\n    var each = function (obj, fn) {\n        if (isArray(obj)) {\n            var l = obj.length;\n            for (var i = 0; i < l; i++)\n                fn.call(obj, i);\n        }\n        else {\n            for (var x in obj)\n                if (obj.hasOwnProperty(x))\n                    fn.call(obj, x);\n        }\n    };\n\n    /**\n     * Checks to see if a number is an even number\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var even = function (num) {\n        return num % 2 === 0;\n    };\n\n    /**\n     * Checks to see if a fraction is divisible by 2\n     * @param {Number} num\n     * @returns {boolean}\n     */\n    var evenFraction = function (num) {\n        return 1 / (num % 1) % 2 === 0;\n    };\n\n    /**\n     * Strips duplicates out of an array\n     * @param {Array} arr\n     */\n    var arrayUnique = function (arr) {\n        var l = arr.length, a = [];\n        for (var i = 0; i < l; i++) {\n            var item = arr[i];\n            if (a.indexOf(item) === -1)\n                a.push(item);\n        }\n        return a;\n    };\n\n    /**\n     * Removes duplicates from an array. Returns a new array\n     * @param {Array} arr\n     * @param {Function} condition\n     */\n    var removeDuplicates = function(arr, condition) {\n        var conditionType = typeof condition;\n\n        if(conditionType !== 'function' || conditionType === 'undefined') {\n            condition = function(a, b) {\n                return a === b;\n            };\n        }\n\n        var seen = [];\n\n        while(arr.length) {\n            var a = arr[0];\n            //only one element left so we're done\n            if(arr.length === 1) {\n                seen.push(a);\n                break;\n            }\n            var temp = [];\n            seen.push(a); //we already scanned these\n            for(var i=1; i<arr.length; i++) {\n                var b = arr[i];\n                //if the number is outside the specified tolerance\n                if(!condition(a, b))\n                    temp.push(b);\n            }\n            //start over with the remainder\n            arr = temp;\n        }\n\n        return seen;\n    };\n\n    /**\n     * Reserves the names in an object so they cannot be used as function names\n     * @param {Object} obj\n     */\n    var reserveNames = function (obj) {\n        var add = function (item) {\n            if (RESERVED.indexOf(item) === -1)\n                RESERVED.push(item);\n        };\n\n        if (typeof obj === 'string')\n            add(obj);\n        else {\n            each(obj, function (x) {\n                add(x);\n            });\n        }\n    };\n\n    /**\n     * Removes an item from either an array or an object. If the object is an array, the index must be\n     * specified after the array. If it's an object then the key must be specified\n     * @param {Object|Array} obj\n     * @param {Integer} indexOrKey\n     */\n    var remove = function (obj, indexOrKey) {\n        var result;\n        if (isArray(obj)) {\n            result = obj.splice(indexOrKey, 1)[0];\n        }\n        else {\n            result = obj[indexOrKey];\n            delete obj[indexOrKey];\n        }\n        return result;\n    };\n\n    /**\n     * Creates a temporary block in which one of the global settings is temporarily modified while\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\n     * answer for a period you would set PARSE2NUMBER to true in the block.\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\n     * @param {String} setting - The setting being accessed\n     * @param {Function} f\n     * @param {boolean} opt - The value of the setting in the block\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\n     */\n    var block = function (setting, f, opt, obj) {\n        var current_setting = Settings[setting];\n        Settings[setting] = opt === undefined ? true : !!opt;\n        var retval = f.call(obj);\n        Settings[setting] = current_setting;\n        return retval;\n    };\n\n    /**\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\n     * Some functions will return undefined. This can maybe just remove the\n     * function object at some point when all functions are eventually\n     * housed in the global function object. Returns ALL parser available\n     * functions. Parser.functions may not contain all functions\n     */\n    var importFunctions = function () {\n        var o = {};\n        for (var x in _.functions)\n            o[x] = _.functions[x][0];\n        return o;\n    };\n\n    /**\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\n     * @param {Array|object} obj\n     */\n    var arguments2Array = function (obj) {\n        return [].slice.call(obj);\n    };\n\n    /**\n     * Returns the coefficients of a symbol\n     * @param {Symbol} symbol\n     * @param {Symbol} wrt\n     */\n    var getCoeffs = function (symbol, wrt) {\n        var coeffs = [];\n        //we loop through the symbols and stick them in their respective\n        //containers e.g. y*x^2 goes to index 2\n        symbol.each(function (term) {\n            if (term.contains(wrt)) {\n                //we want only the coefficient which in this case will be everything but the variable\n                //e.g. a*b*x -> a*b if the variable to solve for is x\n                var coeff = term.stripVar(wrt),\n                        x = _.divide(term.clone(), coeff.clone()),\n                        p = x.power.toDecimal();\n            }\n            else {\n                coeff = term;\n                p = 0;\n            }\n            var e = coeffs[p];\n            //if it exists just add it to it\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\n\n        }, true);\n\n        for (var i = 0; i < coeffs.length; i++)\n            if (!coeffs[i])\n                coeffs[i] = new Symbol(0);\n        //fill the holes\n        return coeffs;\n    };\n\n    /**\n     * As the name states. It forces evaluation of the expression\n     * @param {Symbol} symbol\n     * @param {Symbol} o\n     */\n    var evaluate = function (symbol, o) {\n        return block('PARSE2NUMBER', function () {\n            return _.parse(symbol, o);\n        }, true);\n    };\n\n    /**\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\n     * @param {String[]|String|Symbol|Number|Number[]} x\n     */\n    var convertToVector = function (x) {\n        if (isArray(x)) {\n            var vector = new Vector([]);\n            for (var i = 0; i < x.length; i++)\n                vector.elements.push(convertToVector(x[i]));\n            return vector;\n        }\n        //Ensure that a nerdamer ready object is returned\n        if (!isSymbol(x))\n            return _.parse(x);\n        return x;\n    };\n\n    /**\n     * Generates prime numbers up to a specified number\n     * @param {Number} upto\n     */\n    var generatePrimes = function (upto) {\n        //get the last prime in the array\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\n        //no need to check if we've already encountered the number. Just check the cache.\n        for (var i = last_prime; i < upto; i++) {\n            if (isPrime(i))\n                PRIMES.push(i);\n        }\n    };\n    /**\n     * Checks to see if all arguments are numbers\n     * @param {object} args\n     */\n    var allNumbers = function (args) {\n        for (var i = 0; i < args.length; i++)\n            if (args[i].group !== N)\n                return false;\n        return true;\n    };\n    /*\n     * Checks if all arguments aren't just all number but if they\n     * are constants as well e.g. pi, e.\n     * @param {object} args\n     */\n    var allConstants = function (args) {\n        for (var i = 0; i < args.length; i++) {\n            if (args[i].isPi() || args[i].isE())\n                continue;\n            if (!args[i].isConstant(true))\n                return false;\n        }\n        return true;\n    };\n\n\n//Exceptions ===================================================================\n    //Is thrown for division by zero\n    var DivisionByZero = customError('DivisionByZero');\n    //Is throw if an error occured during parsing\n    var ParseError = customError('ParseError');\n    //Is thrown if the expression results in undefined\n    var UndefinedError = customError('UndefinedError');\n    //Is throw if a function exceeds x amount of iterations\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\n    //Is thrown if the parser receives an incorrect type\n    var NerdamerTypeError = customError('NerdamerTypeError');\n    //Is thrown if bracket parity is not correct\n    var ParityError = customError('ParityError');\n    //Is thrown if an unexpectd or incorrect operator is encountered\n    var OperatorError = customError('OperatorError');\n    //Is thrown if an index is out of range.\n    var OutOfRangeError = customError('OutOfRangeError');\n    //Is thrown if dimensions are incorrect. Mostly for matrices\n    var DimensionError = customError('DimensionError');\n    //Is thrown if variable name violates naming rule\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\n    //Is thrown if the limits of the library are exceeded for a function\n    //This can be that the function become unstable passed a value\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\n    //Is throw if the value is an incorrect LH or RH value\n    var NerdamerValueError = customError('NerdamerValueError');\n    //Is throw if the value is an incorrect LH or RH value\n    var SolveError = customError('SolveError');\n\n    var exceptions = {\n        DivisionByZero: DivisionByZero,\n        ParseError: ParseError,\n        UndefinedError: UndefinedError,\n        MaximumIterationsReached: MaximumIterationsReached,\n        NerdamerTypeError: NerdamerTypeError,\n        ParityError: ParityError,\n        OperatorError: OperatorError,\n        OutOfRangeError: OutOfRangeError,\n        DimensionError: DimensionError,\n        InvalidVariableNameError: InvalidVariableNameError,\n        ValueLimitExceededError: ValueLimitExceededError,\n        NerdamerValueError: NerdamerValueError,\n        SolveError: SolveError\n    };\n//Big ==========================================================================\n    var Big = {\n        cos: function (x) {\n            return new Symbol(bigDec.cos(x.multiplier.toDecimal()));\n        },\n        sin: function (x) {\n            return new Symbol(bigDec.sin(x.multiplier.toDecimal()));\n        }\n    };\n//Math2 ========================================================================\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\n    //functions within are pretty self-explanatory.\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\n    var Math2 = {\n        csc: function (x) {\n            return 1 / Math.sin(x);\n        },\n        sec: function (x) {\n            return 1 / Math.cos(x);\n        },\n        cot: function (x) {\n            return 1 / Math.tan(x);\n        },\n\t\tacsc: function(x) { return Math.asin(1/x); },\n        asec: function(x) {\n            return Math.acos(1/x);\n        },\n        acot: function(x) {\n            return (Math.PI / 2) - Math.atan(x);\n        },\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\n        erf: function (x) {\n            var t = 1 / (1 + 0.5 * Math.abs(x));\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\n                    t * (1.00002368 +\n                            t * (0.37409196 +\n                                    t * (0.09678418 +\n                                            t * (-0.18628806 +\n                                                    t * (0.27886807 +\n                                                            t * (-1.13520398 +\n                                                                    t * (1.48851587 +\n                                                                            t * (-0.82215223 +\n                                                                                    t * (0.17087277)))))))))\n                    );\n            return x >= 0 ? result : -result;\n        },\n        diff: function(f) {\n            var h = 0.001;\n\n            var derivative = function(x) {\n                return (f(x + h) - f(x - h)) / (2 * h);\n            };\n\n            return derivative;\n        },\n        median: function (...values) {\n            values.sort(function (a, b) {\n                return a - b;\n            });\n\n            var half = Math.floor(values.length / 2);\n\n            if (values.length % 2)\n                return values[half];\n\n            return (values[half - 1] + values[half]) / 2.0;\n        },\n        /*\n         * Reverses continued fraction calculation\n         * @param {obj} contd\n         * @returns {Number}\n         */\n        fromContinued: function (contd) {\n            var arr = contd.fractions.slice();\n            var e = 1 / arr.pop();\n            for (var i = 0, l = arr.length; i < l; i++) {\n                e = 1 / (arr.pop() + e);\n            }\n            return contd.sign * (contd.whole + e);\n        },\n        /*\n         * Calculates continued fractions\n         * @param {Number} n\n         * @param {Number} x The number of places\n         * @returns {Number}\n         */\n        continuedFraction: function (n, x) {\n            x = x || 20;\n            var sign = Math.sign(n); /*store the sign*/\n            var absn = Math.abs(n); /*get the absolute value of the number*/\n            var whole = Math.floor(absn); /*get the whole*/\n            var ni = absn - whole; /*subtract the whole*/\n            var c = 0; /*the counter to keep track of iterations*/\n            var done = false;\n            var epsilon = 1e-14;\n            var max = 1e7;\n            var e, w;\n            var retval = {\n                whole: whole,\n                sign: sign,\n                fractions: []\n            };\n            /*start calculating*/\n            while (!done && ni !== 0) {\n                /*invert and get the whole*/\n                e = 1 / ni;\n                w = Math.floor(e);\n                if (w > max) {\n                    /*this signals that we may have already gone too far*/\n                    var d = Math2.fromContinued(retval) - n;\n                    if (d <= Number.EPSILON)\n                        break;\n                }\n                /*add to result*/\n                retval.fractions.push(w);\n                /*move the ni to the decimal*/\n                ni = e - w;\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\n                if (ni <= epsilon || c >= x - 1)\n                    done = true;\n                c++;\n            }\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\n            var idx = retval.fractions.length - 1;\n            if (retval.fractions[idx] === 1) {\n                retval.fractions.pop();\n                /*increase the last one by one*/\n                retval.fractions[--idx]++;\n            }\n            return retval;\n        },\n        bigpow: function (n, p) {\n            if (!(n instanceof Frac))\n                n = Frac.create(n);\n            if (!(p instanceof Frac))\n                p = Frac.create(p);\n            var retval = new Frac(0);\n            if (p.isInteger()) {\n                retval.num = n.num.pow(p.toString());\n                retval.den = n.den.pow(p.toString());\n            }\n            else {\n                var num = Frac.create(Math.pow(n.num, p.num));\n                var den = Frac.create(Math.pow(n.den, p.num));\n\n                retval.num = Math2.nthroot(num, p.den.toString());\n                retval.den = Math2.nthroot(den, p.den);\n            }\n            return retval;\n        },\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\n        gamma: function (z) {\n            var g = 7;\n            var C = [\n                0.99999999999980993,\n                676.5203681218851,\n                -1259.1392167224028,\n                771.32342877765313,\n                -176.61502916214059,\n                12.507343278686905,\n                -0.13857109526572012,\n                9.9843695780195716e-6,\n                1.5056327351493116e-7]\n                    ;\n\n            if (z < 0.5)\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\n            else {\n                z -= 1;\n\n                var x = C[0];\n                for (var i = 1; i < g + 2; i++)\n                    x += C[i] / (z + i);\n\n                var t = z + g + 0.5;\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\n            }\n        },\n        //factorial\n        bigfactorial: function (x) {\n            var retval = new bigInt(1);\n            for (var i = 2; i <= x; i++)\n                retval = retval.times(i);\n            return new Frac(retval);\n        },\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\n        bigLog: function (x) {\n            varn            if (CACHE[x]) {\n                return Frac.quick.apply(null, CACHE[x].split('/'));\n            }\n            x = new Frac(x);\n            var n = 80;\n            var retval = new Frac(0);\n            var a = x.subtract(new Frac(1));\n            var b = x.add(new Frac(1));\n            for (var i = 0; i < n; i++) {\n                var t = new Frac(2 * i + 1);\n                var k = Math2.bigpow(a.divide(b), t);\n                var r = t.clone().invert().multiply(k);\n                retval = retval.add(r);\n\n            }\n            return retval.multiply(new Frac(2));\n        },\n        //the factorial function but using the big library instead\n        factorial: function (x) {\n            var is_int = x % 1 === 0;\n\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\n            if (is_int && x < 0)\n                return NaN;\n\n            if(!is_int)\n                return Math2.gamma(x+1);\n\n            var retval = 1;\n            for (var i = 2; i <= x; i++)\n                retval = retval * i;\n            return retval;\n        },\n        //double factorial\n        //http://mathworld.wolfram.com/DoubleFactorial.html\n        dfactorial: function (x) {\n            if (isInt(x)) {\n                var even = x % 2 === 0;\n                /* If x = even then n = x/2 else n = (x-1)/2*/\n                var n = even ? x / 2 : (x + 1) / 2;\n                /*the return value*/\n                var r = new Frac(1);\n                /*start the loop*/\n                if (even)\n                    for (var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\n                else\n                    for (var i = 1; i <= n; i++)\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\n            }\n            else {\n                /*Not yet extended to bigNum*/\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\n            }\n\n            /*done*/\n            return r;\n        },\n        GCD: function () {\n            var args = arrayUnique([].slice.call(arguments)\n                    .map(function (x) {\n                        return Math.abs(x);\n                    })).sort(),\n                    a = Math.abs(args.shift()),\n                    n = args.length;\n\n            while (n-- > 0) {\n                var b = Math.abs(args.shift());\n                while (true) {\n                    a %= b;\n                    if (a === 0) {\n                        a = b;\n                        break;\n                    }\n                    b %= a;\n                    if (b === 0)\n                        break;\n                    ;\n                }\n            }\n            return a;\n        },\n        QGCD: function () {\n            var args = [].slice.call(arguments);\n            var a = args[0];\n            for (var i = 1; i < args.length; i++) {\n                var b = args[i];\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\n                a = b.gcd(a);\n                if (sign < 0)\n                    a.negate();\n            }\n            return a;\n        },\n        LCM: function (a, b) {\n            return (a * b) / Math2.GCD(a, b);\n        },\n        //pow but with the handling of negative numbers\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\n        pow: function (b, e) {\n            if (b < 0) {\n                if (Math.abs(e) < 1) {\n                    /*nth root of a negative number is imaginary when n is even*/\n                    if (1 / e % 2 === 0)\n                        return NaN;\n                    return -Math.pow(Math.abs(b), e);\n                }\n            }\n            return Math.pow(b, e);\n        },\n        factor: function (n) {\n            n = Number(n);\n            var sign = Math.sign(n); /*store the sign*/\n            /*move the number to absolute value*/\n            n = Math.abs(n);\n            var ifactors = Math2.ifactor(n);\n            var factors = new Symbol();\n            factors.symbols = {};\n            factors.group = CB;\n            for (var x in ifactors) {\n                var factor = new Symbol(1);\n                factor.group = P; /*cheat a little*/\n                factor.value = x;\n                factor.power = new Symbol(ifactors[x]);\n                factors.symbols[x] = factor;\n            }\n            factors.updateHash();\n\n            if(n === 1) {\n                factors = new Symbol(n);\n            }\n\n            /*put back the sign*/\n            if(sign < 0)\n                factors.negate();\n\n            return factors;\n        },\n        /**\n         * Uses trial division\n         * @param {Integer} n - the number being factored\n         * @param {object} factors -  the factors object\n         * @returns {object}\n         */\n        sfactor: function (n, factors) {\n            factors = factors || {};\n            var r = Math.floor(Math.sqrt(n));\n            var lcprime = PRIMES[PRIMES.length - 1];\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\n            /*takes too long*/\n            if (r > lcprime && n < 1e6)\n                generatePrimes(r);\n            var l = PRIMES.length;\n            for (var i = 0; i < l; i++) {\n                var prime = PRIMES[i];\n                /*trial division*/\n                while (n % prime === 0) {\n                    n = n / prime;\n                    factors[prime] = (factors[prime] || 0) + 1;\n                }\n            }\n            if (n > 1)\n                factors[n] = 1;\n            return factors;\n        },\n        /**\n         * Pollard's rho\n         * @param {Integer} n\n         * @returns {object}\n         */\n        ifactor: function (n) {\n            n = String(n);\n\n            if (n === '0')\n                return {'0': 1};\n            n = new bigInt(n); /*convert to bigInt for safety*/\n            var sign = n.sign ? -1 : 1;\n            n = n.abs();\n            var factors = {}; /*factor object being returned.*/\n            if (n.lt('65536')) { /*less than 2^16 just use trial division*/\n                factors = Math2.sfactor(n, factors);\n            }\n            else {\n                var add = function (e) {\n                    if (!e.isPrime()) {\n                        factors = Math2.sfactor(e, factors);\n                    }\n                    else\n                        factors[e] = (factors[e] || 0) + 1;\n                };\n\n                try {\n                    //set a safety\n                    var max = 1e3;\n                    var safety = 0;\n\n                    while (!n.abs().equals(1)) {\n                        if (n.isPrime()) {\n                            add(n);\n                            break;\n                        }\n                        else {\n                            function rho(c) {\n                                var xf = new bigInt(c),\n                                        cz = 2,\n                                        x = new bigInt(c),\n                                        factor = new bigInt(1);\n\n                                while (factor.equals(1)) {\n                                    for (var i = 0; i <= cz && factor.equals(1); i++) {\n                                        //trigger the safety\n                                        if(safety++ > max)\n                                            throw new Error('stopping');\n\n                                        x = x.pow(2).add(1).mod(n);\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\n                                    }\n\n                                    cz = cz * 2;\n                                    xf = x;\n                                }\n                                if (factor.equals(n)) {\n                                    return rho(c + 1);\n                                }\n                                return factor;\n                            }\n                            var factor = rho(2);\n                            add(factor);\n                            /*divide out the factor*/\n                            n = n.divide(factor);\n                        }\n                    }\n                }\n                catch(e) {\n                    //reset factors\n                    factors = {};\n                    add(n);\n                }\n\n            }\n\n            /*put the sign back*/\n            if (sign === -1) {\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\n                factors['-' + sm] = factors[sm];\n                delete factors[sm];\n            }\n\n            return factors;\n        },\n        //factors a number into rectangular box. If sides are primes that this will be\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\n        boxfactor: function (n, max) {\n            max = max || 200; //stop after this number of iterations\n            var c, r,\n                    d = Math.floor((5 / 12) * n), //the divisor\n                    i = 0, //number of iterations\n                    safety = false;\n            while (true) {\n                c = Math.floor(n / d);\n                r = n % d;\n                if (r === 0)\n                    break; //we're done\n                if (safety)\n                    return [n, 1];\n                d = Math.max(r, d - r);\n                i++;\n                safety = i > max;\n            }\n            return [c, d, i];\n        },\n        fib: function (n) {\n            var sign = Math.sign(n);\n            n = Math.abs(n);\n            sign = even(n) ? sign : Math.abs(sign);\n            var a = 0, b = 1, f = 1;\n            for (var i = 2; i <= n; i++) {\n                f = a + b;\n                a = b;\n                b = f;\n            }\n            return f * sign;\n        },\n        mod: function (x, y) {\n            return x % y;\n        },\n        //http://mathworld.wolfram.com/IntegerPart.html\n        integer_part: function (x) {\n            var sign = Math.sign(x);\n            return sign * Math.floor(Math.abs(x));\n        },\n        simpson: function (f, a, b, step) {\n            var get_value = function (f, x, side) {\n                var v = f(x);\n                var d = 0.000000000001;\n                if (isNaN(v)) {\n                    v = f(side === 1 ? x + d : x - d);\n                }\n                return v;\n            };\n\n            step = step || 0.0001;\n            //calculate the number of intervals\n            var n = Math.abs(Math.floor((b - a) / step));\n            //simpson's rule requires an even number of intervals. If it's not then add 1\n            if (n % 2 !== 0)\n                n++;\n            //get the interval size\n            var dx = (b - a) / n;\n            //get x0\n            var retval = get_value(f, a, 1);\n\n            //get the middle part 4x1+2x2+4x3 ...\n            //but first set a flag to see if it's even or odd.\n            //The first one is odd so we start there\n            var even = false;\n            //get x1\n            var xi = a + dx;\n            //the coefficient\n            var c, k;\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\n            for (var i = 1; i < n; i++) {\n                c = even ? 2 : 4;\n                k = c * get_value(f, xi, 1);\n                retval += k;\n                //flip the even flag\n                even = !even;\n                //increment xi\n                xi += dx;\n            }\n\n            //add xn\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\n\n        },\n        /**\n         * https://github.com/scijs/integrate-adaptive-simpson\n         * @param {Function} f - the function being integrated\n         * @param {Number} a - lower bound\n         * @param {Number} b - upper bound\n         * @param {Number} tol - step width\n         * @param {Number} maxdepth\n         * @returns {Number}\n         */\n        num_integrate: function (f, a, b, tol, maxdepth) {\n            if (maxdepth < 0)\n                throw new Error('max depth cannot be negative');\n\n            /* This algorithm adapted from pseudocode in:*/\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\n                if (state.nanEncountered) {\n                    return NaN;\n                }\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\n                h = b - a;\n                f1 = f(a + h * 0.25);\n                f2 = f(b - h * 0.25);\n                /* Simple check for NaN:*/\n                if (isNaN(f1)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n                /* Simple check for NaN:*/\n                if (isNaN(f2)) {\n                    state.nanEncountered = true;\n                    return;\n                }\n\n                sl = h * (fa + 4 * f1 + fm) / 12;\n                sr = h * (fm + 4 * f2 + fb) / 12;\n                s2 = sl + sr;\n                err = (s2 - V0) / 15;\n\n                if (state.maxDepthCount > 1000 * maxdepth) {\n                    return;\n                }\n\n\n                if (depth > maxdepth) {\n                    state.maxDepthCount++;\n                    return s2 + err;\n                }\n                else if (Math.abs(err) < tol) {\n                    return s2 + err;\n                }\n                else {\n                    m = a + h * 0.5;\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\n                    if (isNaN(V1)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\n\n                    if (isNaN(V2)) {\n                        state.nanEncountered = true;\n                        return NaN;\n                    }\n\n                    return V1 + V2;\n                }\n            }\n\n            function integrate(f, a, b, tol, maxdepth) {\n                var state = {\n                    maxDepthCount: 0,\n                    nanEncountered: false\n                };\n\n                if (tol === undefined) {\n                    tol = 1e-9;\n                }\n                if (maxdepth === undefined) {\n                    /*Issue #458 - This was lowered because of performance issues. */\n                    /*This was suspected from before but is now confirmed with this issue*/\n                    maxdepth = 45;\n                }\n\n                var fa = f(a);\n                var fm = f(0.5 * (a + b));\n                var fb = f(b);\n\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\n\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\n\n                if (state.maxDepthCount > 0) {\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\n                }\n\n                if (state.nanEncountered) {\n                    throw new Error('Function does not converge over interval!');\n                }\n\n                return result;\n            }\n            var retval;\n\n            try {\n                retval = integrate(f, a, b, tol, maxdepth);\n            }\n            catch (e) {\n                /*fallback to non-adaptive*/\n                return Math2.simpson(f, a, b);\n            }\n            return nround(retval, 12);\n        },\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\n        //CosineIntegral\n        Ci: function (x) {\n            var n = 20,\n                    /*roughly Euler–Mascheroni*/\n                    g = 0.5772156649015329,\n                    sum = 0;\n            for (var i = 1; i < n; i++) {\n                /*cache 2n*/\n                var n2 = 2 * i;\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\n            }\n            return Math.log(x) + g + sum;\n        },\n        /*SineIntegral*/\n        Si: function (x) {\n            var n = 20,\n                    sum = 0;\n            for (var i = 0; i < n; i++) {\n                var n2 = 2 * i;\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\n            }\n            return sum;\n        },\n        /*ExponentialIntegral*/\n        Ei: function (x) {\n            if (Number(x) === 0)\n                return -Infinity;\n            var n = 30,\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\n                    sum = 0;\n            for (var i = 1; i < n; i++) {\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\n            }\n            return g + Math.abs(Math.log(x)) + sum;\n        },\n        /*Hyperbolic Sine Integral*/\n        /*http://mathworld.wolfram.com/Shi.html*/\n        Shi: function (x) {\n            var n = 30,\n                    sum = 0,\n                    k, t;\n            for (var i = 0; i < n; i++) {\n                k = 2 * i;\n                t = k + 1;\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\n            }\n            return sum;\n        },\n        /*the cosine integral function*/\n        Chi: function (x) {\n            var dx, g, f;\n            dx = 0.001;\n            g = 0.5772156649015328606;\n            f = function (t) {\n                return (Math.cosh(t) - 1) / t;\n            };\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\n        },\n        /*the log integral*/\n        Li: function (x) {\n            return Math2.Ei(Math2.bigLog(x));\n        },\n        /*the gamma incomplete function*/\n        gamma_incomplete: function (n, x) {\n            var t = n - 1,\n                    sum = 0,\n                    x = x || 0;\n            for (var i = 0; i < t; i++) {\n                sum += Math.pow(x, i) / Math2.factorial(i);\n            }\n            return Math2.factorial(t) * Math.exp(-x) * sum;\n        },\n        /*\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\n         * if x > 0 then 1\n         * if x == 0 then 1/2\n         * if x < 0 then 0\n         */\n        step: function (x) {\n            if (x > 0)\n                return 1;\n            if (x < 0)\n                return 0;\n            return 0.5;\n        },\n        /*\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\n         * if |x| > 1/2 then 0\n         * if |x| == 1/2 then 1/2\n         * if |x| < 1/2 then 1\n         */\n        rect: function (x) {\n            var x = Math.abs(x);\n            if (x === 0.5)\n                return x;\n            if (x > 0.5)\n                return 0;\n            return 1;\n        },\n        /*\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\n         * if x == 0 then 1\n         * otherwise sin(x)/x\n         */\n        sinc: function (x) {\n            if (x.equals(0))\n                return 1;\n            return Math.sin(x) / x;\n        },\n        /*\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\n         * if |x| >= 1 then 0\n         * if |x| < then 1-|x|\n         */\n        tri: function (x) {\n            x = Math.abs(x);\n            if (x >= 1)\n                return 0;\n            return 1 - x;\n        },\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\n        nthroot: function (A, n) {\n            /*make sure the input is of type Frac*/\n            if (!(A instanceof Frac))\n                A = new Frac(A.toString());\n            if (!(n instanceof Frac))\n                n = new Frac(n.toString());\n            if (n.equals(1))\n                return A;\n            /*begin algorithm*/\n            var xk = A.divide(new Frac(2)); /*x0*/\n            var e = new Frac(1e-15);\n            var dk, dk0, d0;\n            var a = n.clone().invert(),\n                    b = n.subtract(new Frac(1));\n            do {\n                var powb = Math2.bigpow(xk, b);\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\n                dk = Frac.create(dk_dec);\n                if (d0)\n                    break;\n\n                xk = xk.add(dk);\n                /*check to see if there's no change from the last xk*/\n                var dk_dec = dk.toDecimal();\n                d0 = dk0 ? dk0 === dk_dec : false;\n                dk0 = dk_dec;\n            }\n            while (dk.abs().gte(e))\n\n            return xk;\n        },\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\n        /*Just the square root function but big :)*/\n        sqrt: function (n) {\n            if (!(n instanceof Frac))\n                n = new Frac(n);\n            var xn, d, ld, same_delta;\n            var c = 0; /*counter*/\n            var done = false;\n            var delta = new Frac(1e-20);\n            xn = n.divide(new Frac(2));\n            var safety = 1000;\n            do {\n                /*break if we're not converging*/\n                if (c > safety)\n                    throw new Error('Unable to calculate square root for ' + n);\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\n                xn = new Frac(xn.decimal(30));\n                /*get the difference from the true square*/\n                d = n.subtract(xn.multiply(xn));\n                /*if the square of the calculated number is close enough to the number*/\n                /*we're getting the square root or the last delta was the same as the new delta*/\n                /*then we're done*/\n                same_delta = ld ? ld.equals(d) : false;\n                if (d.clone().abs().lessThan(delta) || same_delta)\n                    done = true;\n                /*store the calculated delta*/\n                ld = d;\n                c++; /*increase the counter*/\n            }\n            while (!done)\n\n            return xn;\n        }\n    };\n    //link the Math2 object to Settings.FUNCTION_MODULES\n    Settings.FUNCTION_MODULES.push(Math2);\n    reserveNames(Math2); //reserve the names in Math2\n\n\n//Polyfills ====================================================================\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\n    Math.sign = Math.sign || function (x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return x;\n        }\n        return x > 0 ? 1 : -1;\n    };\n\n    Math.cosh = Math.cosh || function (x) {\n        var y = Math.exp(x);\n        return (y + 1 / y) / 2;\n    };\n\n    Math.sech = Math.sech || function (x) {\n        return 1 / Math.cosh(x);\n    };\n\n    Math.csch = Math.csch || function (x) {\n        return 1 / Math.sinh(x);\n    };\n\n    Math.coth = Math.coth || function (x) {\n        return 1 / Math.tanh(x);\n    };\n\n    Math.sinh = Math.sinh || function (x) {\n        var y = Math.exp(x);\n        return (y - 1 / y) / 2;\n    };\n\n    Math.tanh = Math.tanh || function (x) {\n        if (x === Infinity) {\n            return 1;\n        }\n        else if (x === -Infinity) {\n            return -1;\n        }\n        else {\n            var y = Math.exp(2 * x);\n            return (y - 1) / (y + 1);\n        }\n    };\n\n    Math.asinh = Math.asinh || function (x) {\n        if (x === -Infinity) {\n            return x;\n        }\n        else {\n            return Math.log(x + Math.sqrt(x * x + 1));\n        }\n    };\n\n    Math.acosh = Math.acosh || function (x) {\n        return Math.log(x + Math.sqrt(x * x - 1));\n    };\n\n    Math.atanh = Math.atanh || function (x) {\n        return Math.log((1 + x) / (1 - x)) / 2;\n    };\n\n    Math.log10 = Math.log10 || function (x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n\n    Math.trunc = Math.trunc || function (x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n\n//Global functions =============================================================\n    /**\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\n     * If all else fails it *assumes* the object has a toString method and will call that.\n     *\n     * @param {Object} obj\n     * @param {String} option get is as a hash\n     * @param {int} useGroup\n     * @returns {String}\n     */\n    function text(obj, option, useGroup, decp) {\n        var asHash = option === 'hash',\n            //whether to wrap numbers in brackets\n            wrapCondition = undefined,\n            opt = asHash ? undefined : option,\n            asDecimal = opt === 'decimal' || opt === 'decimals';\n\n        if(asDecimal && typeof decp === 'undefined')\n            decp = 16;\n\n        function toString(obj) {\n            switch (option)\n            {\n                case 'decimals':\n                case 'decimal':\n                    wrapCondition = wrapCondition || function (str) {\n                        return false;\n                    };\n                    return obj.valueOf();\n                case 'recurring':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf(\"'\") !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if (frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var negative = false;\n                    var m = Number(parts[0]);\n                    if (m < 0) {\n                        m = -m;\n                        negative = true;\n                    }\n                    var n = Number(parts[1]);\n                    if (!n)\n                        n = 1;\n\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\n                    quotient = quotient.toString() + \".\";\n                    while (c && c < n) {\n                        c *= 10;\n                        quotient += \"0\";\n                    }\n                    var digits = \"\", passed = [], i = 0;\n                    while (true) {\n                        if (typeof passed[c] !== 'undefined') {\n                            var prefix = digits.slice(0, passed[c]),\n                                    cycle = digits.slice(passed[c]),\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\n                        }\n                        var q = Math.floor(c / n), r = c - q * n;\n                        passed[c] = i;\n                        digits += q.toString();\n                        i += 1;\n                        c = 10 * r;\n                    }\n                case 'mixed':\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    var str = obj.toString();\n                    //verify that the string is actually a fraction\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\n                    if (frac.length === 0)\n                        return str;\n\n                    //split the fraction into the numerator and denominator\n                    var parts = frac[0].split('/');\n                    var numer = new bigInt(parts[0]);\n                    var denom = new bigInt(parts[1]);\n                    if (denom.equals(0))\n                        denom = new bigInt(1);\n\n                    //return the quotient plus the remainder\n                    var divmod = numer.divmod(denom);\n                    var quotient = divmod.quotient;\n                    var remainder = divmod.remainder;\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\n                case 'scientific':\n                    wrapCondition = wrapCondition || function(str) {\n                        return false;\n                    }\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\n                default:\n                    wrapCondition = wrapCondition || function (str) {\n                        return str.indexOf('/') !== -1;\n                    };\n\n                    return obj.toString();\n            }\n        }\n\n        //if the object is a symbol\n        if (isSymbol(obj)) {\n            var multiplier = '',\n                    power = '',\n                    sign = '',\n                    group = obj.group || useGroup,\n                    value = obj.value;\n\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\n            if (!asHash) {\n                //use asDecimal to get the object back as a decimal\n                var om = toString(obj.multiplier);\n                if (om == '-1' && String(obj.multiplier) === '-1') {\n                    sign = '-';\n                    om = '1';\n                }\n                //only add the multiplier if it's not 1\n                if (om != '1')\n                    multiplier = om;\n                //use asDecimal to get the object back as a decimal\n                var p = obj.power ? toString(obj.power) : '';\n                //only add the multiplier\n                if (p != '1') {\n                    //is it a symbol\n                    if (isSymbol(p)) {\n                        power = text(p, opt);\n                    }\n                    else {\n                        power = p;\n                    }\n                }\n            }\n\n            switch (group) {\n                case N:\n                    multiplier = '';\n                    //round if requested\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\n                    //if it's numerical then all we need is the multiplier\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\n                    power = '';\n                    break;\n                case PL:\n                    value = obj.collectSymbols().map(function(x) {\n                        var txt = text(x, opt, useGroup, decp);\n                        if(txt == '0')\n                            txt = '';\n                        return txt;\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CP:\n                    value = obj.collectSymbols().map(function(x) {\n                        var txt = text(x, opt, useGroup, decp);\n                        if(txt == '0')\n                            txt = '';\n                        return txt;\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\n                    break;\n                case CB:\n                    value = obj.collectSymbols(function (symbol) {\n                        var g = symbol.group;\n                        //both groups will already be in brackets if their power is greater than 1\n                        //so skip it.\n                        if ((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\n                            return inBrackets(text(symbol, opt));\n                        }\n                        return text(symbol, opt);\n                    }).join('*');\n                    break;\n                case EX:\n                    var pg = obj.previousGroup,\n                            pwg = obj.power.group;\n\n                    //PL are the exception. It's simpler to just collect and set the value\n                    if (pg === PL)\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\n                    if (!(pg === N || pg === S || pg === FN) && !asHash) {\n                        value = inBrackets(value);\n                    }\n\n                    if ((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\n                        power = inBrackets(power);\n                    }\n                    break;\n            }\n\n            if (group === FN) {\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\n                    return text(symbol, opt);\n                }).join(','));\n            }\n            //TODO: Needs to be more efficient. Maybe.\n            if (group === FN && obj.fname in CUSTOM_OPERATORS) {\n                var a = text(obj.args[0]);\n                var b = text(obj.args[1]);\n                if (obj.args[0].isComposite()) //preserve the brackets\n                    a = inBrackets(a);\n                if (obj.args[1].isComposite()) //preserve the brackets\n                    b = inBrackets(b);\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\n            }\n            //wrap the power since / is less than ^\n            //TODO: introduce method call isSimple\n            if (power && group !== EX && wrapCondition(power)) {\n                power = inBrackets(power);\n            }\n\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\n            //by a multiplier and have to be in brackets to preserve the order of precedence\n            if (((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\n                    || !asHash && group === P && value == -1\n                    || obj.fname === PARENTHESIS) {\n\n                value = inBrackets(value);\n            }\n\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\n                multiplier = nround(multiplier, decp);\n            }\n\n            //add the sign back\n            var c = sign + multiplier;\n\n            if (multiplier && wrapCondition(multiplier))\n                c = inBrackets(c);\n\n            if (power < 0)\n                power = inBrackets(power);\n\n            //add the multiplication back\n            if (multiplier)\n                c = c + '*';\n\n            if (power)\n                power = Settings.POWER_OPERATOR + power;\n\n            //this needs serious rethinking. Must fix\n            if (group === EX && value.charAt(0) === '-')\n                value = inBrackets(value);\n\n            var cv = c + value;\n\n            if (obj.parens)\n                cv = inBrackets(cv);\n\n            return cv + power;\n        }\n        else if (isVector(obj)) {\n            var l = obj.elements.length,\n                    c = [];\n            for (var i = 0; i < l; i++)\n                c.push(obj.elements[i].text(option));\n            return '[' + c.join(',') + ']';\n        }\n        else {\n            try {\n                return obj.toString();\n            }\n            catch (e) {\n                return '';\n            }\n        }\n    }\n    /**\n     * Calculates prime factors for a number\n     * @param {int} num\n     * @returns {Array}\n     */\n\n    function primeFactors(num) {\n        if (isPrime(num))\n            return [num];\n        var l = num, i = 1, factors = [],\n                epsilon = 2.2204460492503130808472633361816E-16;\n        while (i < l) {\n            var quotient = num / i;\n            var whole = Math.floor(quotient);\n            var remainder = quotient - whole;\n            if (remainder <= epsilon && i > 1) {\n                if (PRIMES.indexOf(i) !== -1)\n                    PRIMES[i]=i;\n                factors.push(i);\n                l = whole;\n            }\n            i++;\n        }\n\n        return factors.sort(function (a, b) {\n            return a - b;\n        });\n    };\n\n//Expression ===================================================================\n    /**\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\n     * provides the user with some useful functions. If you want to provide the user with extra\n     * library functions then add them to this class's prototype.\n     * @param {Symbol} symbol\n     * @returns {Expression} wraps around the Symbol class\n     */\n    function Expression(symbol) {\n        //we don't want arrays wrapped\n        this.symbol = symbol;\n    }\n    /**\n     * Returns stored expression at index. For first index use 1 not 0.\n     * @param {bool} asType\n     * @param {Integer} expression_number\n     */\n    Expression.getExpression = function (expression_number, asType) {\n        if (expression_number === 'last' || !expression_number)\n            expression_number = EXPRESSIONS.length;\n        if (expression_number === 'first')\n            expression_number = 1;\n        var index = expression_number - 1,\n                expression = EXPRESSIONS[index],\n                retval = expression ? new Expression(expression) : expression;\n        return retval;\n    };\n    Expression.prototype = {\n        /**\n         * Returns the text representation of the expression\n         * @param {String} opt - option of formatting numbers\n         * @param {Number} n The number of significant figures\n         * @returns {String}\n         */\n        text: function (opt, n) {\n            n = n || 19;\n            opt = opt || 'decimals';\n            if (this.symbol.text_)\n                return this.symbol.text_(opt);\n\n            return text(this.symbol, opt, undefined, n);\n        },\n        /**\n         * Returns the latex representation of the expression\n         * @param {String} option - option for formatting numbers\n         * @returns {String}\n         */\n        latex: function (option) {\n            if (this.symbol.latex)\n                return this.symbol.latex(option);\n            return LaTeX.latex(this.symbol, option);\n        },\n        valueOf: function () {\n            return this.symbol.valueOf();\n        },\n\n        /**\n         * Evaluates the expression and tries to reduce it to a number if possible.\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\n         * Other than that it will just use it's own text and reparse\n         * @returns {Expression}\n         */\n        evaluate: function () {\n\n            var first_arg = arguments[0], expression, idx = 1;\n\n            //Enable getting of expressions using the % so for example %1 should get the first expression\n            if (typeof first_arg === 'string') {\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\n            }\n            else if (first_arg instanceof Expression || isSymbol(first_arg)) {\n                expression = first_arg.text();\n            }\n            else {\n                expression = this.symbol.text();\n                idx--;\n            }\n\n            var subs = arguments[idx] || {};\n\n            var retval = new Expression(block('PARSE2NUMBER', function () {\n                return _.parse(expression, subs);\n            }, true));\n\n            return retval;\n        },\n        /**\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\n         * the default alphabetical order\n         * @param vars {Array}\n         */\n        buildFunction: function (vars) {\n            return Build.build(this.symbol, vars);\n        },\n        /**\n         * Checks to see if the expression is just a plain old number\n         * @returns {boolean}\n         */\n        isNumber: function () {\n            return isNumericSymbol(this.symbol);\n        },\n        /**\n         * Checks to see if the expression is infinity\n         * @returns {boolean}\n         */\n        isInfinity: function () {\n            return Math.abs(this.symbol.multiplier) === Infinity;\n        },\n        /**\n         * Returns all the variables in the expression\n         * @returns {Array}\n         */\n        variables: function () {\n            return variables(this.symbol);\n        },\n\n        toString: function () {\n            try {\n                if (isArray(this.symbol))\n                    return '[' + this.symbol.toString() + ']';\n                return this.symbol.toString();\n            }\n            catch (e) {\n                return '';\n            }\n        },\n        //forces the symbol to be returned as a decimal\n        toDecimal: function (prec) {\n            Settings.precision = prec;\n            var dec = text(this.symbol, 'decimals');\n            Settings.precision = undefined;\n            return dec;\n        },\n        //checks to see if the expression is a fraction\n        isFraction: function () {\n            return isFraction(this.symbol);\n        },\n        //checks to see if the symbol is a multivariate polynomial\n        isPolynomial: function () {\n            return this.symbol.isPoly();\n        },\n        //performs a substitution\n        sub: function (symbol, for_symbol) {\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\n        },\n        operation: function (otype, symbol) {\n            if (isExpression(symbol))\n                symbol = symbol.symbol;\n            else if (!isSymbol(symbol))\n                symbol = _.parse(symbol);\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\n        },\n        add: function (symbol) {\n            return this.operation('add', symbol);\n        },\n        subtract: function (symbol) {\n            return this.operation('subtract', symbol);\n        },\n        multiply: function (symbol) {\n            return this.operation('multiply', symbol);\n        },\n        divide: function (symbol) {\n            return this.operation('divide', symbol);\n        },\n        pow: function (symbol) {\n            return this.operation('pow', symbol);\n        },\n        expand: function () {\n            return new Expression(_.expand(this.symbol));\n        },\n        each: function (callback, i) {\n            if (this.symbol.each)\n                this.symbol.each(callback, i);\n            else if (isArray(this.symbol)) {\n                for (var i = 0; i < this.symbol.length; i++)\n                    callback.call(this.symbol, this.symbol[i], i);\n            }\n            else\n                callback.call(this.symbol);\n        },\n        eq: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = _.subtract(this.symbol.clone(), value);\n                return d.equals(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        lt: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.lessThan(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        gt: function (value) {\n            if (!isSymbol(value))\n                value = _.parse(value);\n            try {\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\n                return d.greaterThan(0);\n            }\n            catch (e) {\n                return false;\n            }\n            ;\n        },\n        gte: function (value) {\n            return this.gt(value) || this.eq(value);\n        },\n        lte: function (value) {\n            return this.lt(value) || this.eq(value);\n        },\n\n        numerator: function () {\n            return new Expression(this.symbol.getNum());\n        },\n        denominator: function () {\n            return new Expression(this.symbol.getDenom());\n        },\n        hasFunction: function(f) {\n            return this.symbol.containsFunction(f);\n        },\n        contains: function(variable) {\n            return this.symbol.contains(variable);\n        }\n    };\n    //Aliases\n    Expression.prototype.toTeX = Expression.prototype.latex;\n\n//Scientific ===================================================================\n    function Scientific(num) {\n        if (!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if (num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        } else {\n            this.sign = 1;\n        }\n\n        if (Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        } else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function (num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function (num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || '';\n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w + d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location - (zeroes + 1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\n\n            return this;\n        },\n        round: function (num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if (num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num + 1);\n                //get the next two\n                var next_two = this.coeff.substring(num + 1, num + 3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if (next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded + ed;\n            }\n\n            return n;\n        },\n        copy: function () {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function (n) {\n            var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, n);\n\n            var c;\n            if(this.exponent === 0 && Settings.SCIENTIFIC_IGNORE_INTS) {\n                c = this.coeff;\n            }\n            else  {\n                c = coeff + 'e' + this.exponent;\n            }\n            return (this.sign === -1 ? '-' : '') + c;\n        }\n    };\n\n    Scientific.isScientific = function (num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function (num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    };\n    Scientific.removeLeadingZeroes = function (num) {\n        var match = num.match(/^0*(.*)$/);\n        return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function (num) {\n        var match = num.match(/0*$/);\n        return match ? num.substring(0, num.length - match[0].length) : '';\n    };\n    Scientific.round = function (c, n) {\n        var coeff = nround(c, n);\n        var m = String(coeff).split('.').pop();\n        var d = n - m.length;\n        //if we're asking for more significant figures\n        if (d > 0) {\n            coeff = coeff + (new Array(d + 1).join(0));\n        }\n        return coeff;\n    };\n\n//Scientific ===================================================================\n    /*\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\n     */\n\n    function Scientific(num) {\n        if(!(this instanceof Scientific))\n            return new Scientific(num);\n\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\n\n        //remove the sign\n        if(num.startsWith('-')) {\n            this.sign = -1;\n            //remove the sign\n            num = num.substr(1, num.length);\n        }\n        else {\n            this.sign = 1;\n        }\n\n        if(Scientific.isScientific(num)) {\n            this.fromScientific(num);\n        }\n        else {\n            this.convert(num);\n        }\n        return this;\n    }\n\n    Scientific.prototype = {\n        fromScientific: function(num) {\n            var parts = String(num).toLowerCase().split('e');\n            this.coeff = parts[0];\n            this.exponent = parts[1];\n\n            return this;\n        },\n        convert: function(num) {\n            //get wholes and decimals\n            var parts = num.split('.');\n            //make zero go away\n            var w = parts[0] || '';\n            var d = parts[1] || '';\n            //convert zero to blank strings\n            w = Scientific.removeLeadingZeroes(w);\n            d = Scientific.removeTrailingZeroes(d);\n            //find the location of the decimal place which is right after the wholes\n            var dot_location = w.length;\n            //add them together so we can move the dot\n            var n = w+d;\n            //find the next number\n            var zeroes = Scientific.leadingZeroes(n).length;\n            //set the exponent\n            this.exponent = dot_location-(zeroes+1);\n            //set the coeff but first remove leading zeroes\n            var coeff = Scientific.removeLeadingZeroes(n);\n            this.coeff = coeff.charAt(0)+'.'+(coeff.substr(1, coeff.length) || '0');\n\n            //the coeff decimal places\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\n\n            this.decp = dec === '0' ? 0 : dec.length;\n            //decimals\n            this.dec = d;\n            //wholes\n            this.wholes = w;\n\n            return this;\n        },\n        round: function(num) {\n            var n = this.copy();\n\n            num = Number(num); //cast to number for safety\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\n            //we can round based on this\n            if(num === 0)\n                n.coeff = n.coeff.charAt(0);\n            else {\n                //get up to n-1 digits\n                var rounded = this.coeff.substring(0, num+1);\n                //get the next two\n                var next_two = this.coeff.substring(num+1, num+3);\n                //the extra digit\n                var ed = next_two.charAt(0);\n\n                if(next_two.charAt(1) > 4)\n                    ed++;\n\n                n.coeff = rounded+ed;\n            }\n\n            return n;\n        },\n        copy: function() {\n            var n = new Scientific(0);\n            n.coeff = this.coeff;\n            n.exponent = this.exponent;\n            n.sign = this.sign;\n            return n;\n        },\n        toString: function(n) {\n            var retval;\n\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\n                if(this.decp === 0)\n                    retval = this.wholes;\n                else\n                    retval = this.coeff;\n            }\n            else {\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\n                retval = this.exponent === 0 ? coeff : coeff+'e'+this.exponent;\n            }\n\n            return (this.sign === -1 ? '-' : '' )+retval;\n        }\n    };\n\n    Scientific.isScientific = function(num) {\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\n    };\n    Scientific.leadingZeroes = function(num) {\n        var match = num.match(/^(0*).*$/);\n        return match ? match[1] : '';\n    };\n    Scientific.removeLeadingZeroes = function(num) {\n      var match = num.match(/^0*(.*)$/);\n      return match ? match[1] : '';\n    };\n\n    Scientific.removeTrailingZeroes = function(num) {\n      var match = num.match(/0*$/);\n      return match ? num.substring(0, num.length-match[0].length) : '';\n    };\n\n\n//Frac =========================================================================\n    function Frac(n) {\n        if (n instanceof Frac)\n            return n;\n        if (n === undefined)\n            return this;\n        try {\n            if (isInt(n)) {\n                try {\n                    this.num = bigInt(n);\n                    this.den = bigInt(1);\n                }\n                catch (e) {\n                    return Frac.simple(n);\n                }\n            }\n            else {\n                var frac = Fraction.convert(n);\n                this.num = new bigInt(frac[0]);\n                this.den = new bigInt(frac[1]);\n            }\n        }\n        catch (e) {\n            return Frac.simple(n);\n        }\n\n    }\n    //safe to use with negative numbers or other types\n    Frac.create = function (n) {\n        if (n instanceof Frac)\n            return n;\n        n = n.toString();\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\n        if (is_neg)\n            n = n.substr(1, n.length - 1); //remove the sign\n        var frac = new Frac(n);\n        //put the sign back\n        if (is_neg)\n            frac.negate();\n        return frac;\n    };\n    Frac.isFrac = function (o) {\n        return (o instanceof Frac);\n    };\n    Frac.quick = function (n, d) {\n        var frac = new Frac();\n        frac.num = new bigInt(n);\n        frac.den = new bigInt(d);\n        return frac;\n    };\n    Frac.simple = function (n) {\n        var nstr = String(scientificToDecimal(n)),\n                m_dc = nstr.split('.'),\n                num = m_dc.join(''),\n                den = 1,\n                l = (m_dc[1] || '').length;\n        for (var i = 0; i < l; i++)\n            den += '0';\n        var frac = Frac.quick(num, den);\n        return frac.simplify();\n    };\n    Frac.prototype = {\n        multiply: function (m) {\n            if (this.isOne()) {\n                return m.clone();\n            }\n            if (m.isOne()) {\n                return this.clone();\n            }\n\n            var c = this.clone();\n            c.num = c.num.multiply(m.num);\n            c.den = c.den.multiply(m.den);\n\n            return c.simplify();\n        },\n        divide: function (m) {\n            if (m.equals(0))\n                throw new DivisionByZero('Division by zero not allowed!');\n            return this.clone().multiply(m.clone().invert()).simplify();\n        },\n        subtract: function (m) {\n            return this.clone().add(m.clone().neg());\n        },\n        neg: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        add: function (m) {\n            var n1 = this.den, n2 = m.den, c = this.clone();\n            var a = c.num, b = m.num;\n            if (n1.equals(n2)) {\n                c.num = a.add(b);\n            }\n            else {\n                c.num = a.multiply(n2).add(b.multiply(n1));\n                c.den = n1.multiply(n2);\n            }\n\n            return c.simplify();\n        },\n        mod: function (m) {\n            var a = this.clone(),\n                    b = m.clone();\n            //make their denominators even and return the mod of their numerators\n            a.num = a.num.multiply(b.den);\n            a.den = a.den.multiply(b.den);\n            b.num = b.num.multiply(this.den);\n            b.den = b.den.multiply(this.den);\n            a.num = a.num.mod(b.num);\n            return a.simplify();\n        },\n        simplify: function () {\n            var gcd = bigInt.gcd(this.num, this.den);\n\n            this.num = this.num.divide(gcd);\n            this.den = this.den.divide(gcd);\n            return this;\n        },\n        clone: function () {\n            var m = new Frac();\n            m.num = new bigInt(this.num);\n            m.den = new bigInt(this.den);\n            return m;\n        },\n        decimal: function (prec) {\n            var sign = this.num.isNegative() ? '-' : '';\n            if (this.num.equals(this.den)) {\n                return '1';\n            }\n            //go plus one for rounding\n            prec = prec || Settings.PRECISION;\n            prec++;\n            var narr = [],\n                    n = this.num.abs(),\n                    d = this.den;\n            for (var i = 0; i < prec; i++) {\n                var w = n.divide(d), //divide out whole\n                        r = n.subtract(w.multiply(d)); //get remainder\n\n                narr.push(w);\n                if (r.equals(0))\n                    break;\n                n = r.times(10); //shift one dec place\n            }\n            var whole = narr.shift();\n            if (narr.length === 0) {\n                return sign + whole.toString();\n            }\n\n            if (i === prec) {\n                var lt = [];\n                //get the last two so we can round it\n                for (var i = 0; i < 2; i++)\n                    lt.unshift(narr.pop());\n                //put the last digit back by rounding the last two\n                narr.push(Math.round(lt.join('.')));\n            }\n\n            var dec = whole.toString() + '.' + narr.join('');\n            return sign + dec;\n        },\n        toDecimal: function (prec) {\n            if (prec || Settings.PRECISION) {\n                return this.decimal(prec);\n            }\n            else\n                return this.num / this.den;\n        },\n        qcompare: function (n) {\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\n        },\n        equals: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].equals(q[1]);\n        },\n        absEquals: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].abs().equals(q[1]);\n        },\n        //lazy check to be fixed. Sufficient for now but will cause future problems\n        greaterThan: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].gt(q[1]);\n        },\n        gte: function (n) {\n            return this.greaterThan(n) || this.equals(n);\n        },\n        lte: function (n) {\n            return this.lessThan(n) || this.equals(n);\n        },\n        lessThan: function (n) {\n            if (!isNaN(n))\n                n = new Frac(n);\n            var q = this.qcompare(n);\n\n            return q[0].lt(q[1]);\n        },\n        isInteger: function () {\n            return this.den.equals(1);\n        },\n        negate: function () {\n            this.num = this.num.multiply(-1);\n            return this;\n        },\n        invert: function () {\n            var t = this.den;\n            //why invert 0/1? It'll become 1/0 and that's a lie.\n            if (!this.num.equals(0)) {\n                var isnegative = this.num.isNegative();\n                this.den = this.num.abs();\n                this.num = t;\n                if (isnegative)\n                    this.num = this.num.multiply(-1);\n            }\n\n            return this;\n        },\n        isOne: function () {\n            return this.num.equals(1) && this.den.equals(1);\n        },\n        sign: function () {\n            return this.num.isNegative() ? -1 : 1;\n        },\n        abs: function () {\n            this.num = this.num.abs();\n            return this;\n        },\n        gcd: function (f) {\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\n        },\n        toString: function () {\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\n        },\n        valueOf: function () {\n//            if(this.num == 24) throw new Error(999)\n            if (Settings.USE_BIG)\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\n            return this.num / this.den;\n        },\n        isNegative: function () {\n            return this.toDecimal() < 0;\n        }\n    };\n\n//Symbol =======================================================================\n    /**\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\n     * All symbols except for \"numbers (group N)\" have a power.\n     * @class Primary data type for the Parser.\n     * @param {String} obj\n     * @returns {Symbol}\n     */\n    function Symbol(obj) {\n        var isInfinity = obj === 'Infinity';\n        //this enables the class to be instantiated without the new operator\n        if (!(this instanceof Symbol)) {\n            return new Symbol(obj);\n        }\n        ;\n        //define numeric symbols\n        if (/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj)) {\n            this.group = N;\n            this.value = CONST_HASH;\n            this.multiplier = new Frac(obj);\n        }\n        //define symbolic symbols\n        else {\n            this.group = S;\n            validateName(obj);\n            this.value = obj;\n            this.multiplier = new Frac(1);\n            this.imaginary = obj === Settings.IMAGINARY;\n            this.isInfinity = isInfinity;\n        }\n\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\n        //Although this is still redundant in constants, it simplifies the logic in\n        //other parts so we'll keep it\n        this.power = new Frac(1);\n\n        // Added to silence the strict warning.\n        return this;\n    }\n    /**\n     * Returns vanilla imaginary symbol\n     * @returns {Symbol}\n     */\n    Symbol.imaginary = function () {\n        var s = new Symbol(Settings.IMAGINARY);\n        s.imaginary = true;\n        return s;\n    };\n    /**\n     * Return nerdamer's representation of Infinity\n     * @param {int} negative -1 to return negative infinity\n     * @returns {Symbol}\n     */\n    Symbol.infinity = function (negative) {\n        var v = new Symbol('Infinity');\n        if (negative === -1)\n            v.negate();\n        return v;\n    };\n    Symbol.shell = function (group, value) {\n        var symbol = new Symbol(value);\n        symbol.group = group;\n        symbol.symbols = {};\n        symbol.length = 0;\n        return symbol;\n    };\n    //sqrt(x) -> x^(1/2)\n    Symbol.unwrapSQRT = function (symbol, all) {\n        var p = symbol.power;\n        if (symbol.fname === SQRT && (symbol.isLinear() || all)) {\n            var t = symbol.args[0].clone();\n            t.power = t.power.multiply(new Frac(1 / 2));\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\n            symbol = t;\n            if (all)\n                symbol.power = p.multiply(new Frac(1 / 2));\n        }\n\n        return symbol;\n    };\n    Symbol.hyp = function (a, b) {\n        a = a || new Symbol(0);\n        b = b || new Symbol(0);\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\n    };\n    //converts to polar form array\n    Symbol.toPolarFormArray = function (symbol) {\n        var re, im, r, theta;\n        re = symbol.realpart();\n        im = symbol.imagpart();\n        r = Symbol.hyp(re, im);\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\n        return [r, theta];\n    };\n    //removes parentheses\n    Symbol.unwrapPARENS = function (symbol) {\n        if (symbol.fname === '') {\n            var r = symbol.args[0];\n            r.power = r.power.multiply(symbol.power);\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\n            if (symbol.fname === '')\n                return Symbol.unwrapPARENS(r);\n            return r;\n        }\n        return symbol;\n    };\n    //quickly creates a Symbol\n    Symbol.create = function (value, power) {\n        power = power === undefined ? 1 : power;\n        return _.parse('(' + value + ')^(' + power + ')');\n    };\n    Symbol.prototype = {\n        isSimple: function () {\n            return this.power.equals(1) && this.multiplier.equals(1);\n        },\n        //returns a clone.\n        powSimp: function () {\n            if (this.group === CB) {\n                var powers = [],\n                        sign = this.multiplier.sign();\n                this.each(function (x) {\n                    var p = x.power;\n                    //why waste time if I can't do anything anyway\n                    if (isSymbol(p) || p.equals(1))\n                        return this.clone();\n                    powers.push(p);\n                });\n                var min = new Frac(arrayMin(powers));\n\n                //handle the coefficient\n                //handle the multiplier\n                var sign = this.multiplier.sign(),\n                        m = this.multiplier.clone().abs(),\n                        mfactors = Math2.ifactor(m);\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\n                //we can then reduce it to 2*3*5*(15)^2\n                var out_ = new Frac(1);\n                var in_ = new Frac(1);\n\n                for (var x in mfactors) {\n                    var n = new Frac(mfactors[x]);\n                    if (!n.lessThan(min)) {\n                        n = n.divide(min).subtract(new Frac(1));\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\n                    }\n\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\n                }\n                var t = new Symbol(in_);\n                this.each(function (x) {\n                    x = x.clone();\n                    x.power = x.power.divide(min);\n                    t = _.multiply(t, x);\n                });\n\n                var xt = _.symfunction(PARENTHESIS, [t]);\n                xt.power = min;\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\n\n                return xt;\n            }\n            return this.clone();\n        },\n        /**\n         * Checks to see if two functions are of equal value\n         * @param {Symbol} symbol\n         */\n        equals: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.value === symbol.value && this.power.equals(symbol.power)\n                    && this.multiplier.equals(symbol.multiplier)\n                    && this.group === symbol.group;\n        },\n        abs: function() {\n            var e = this.clone();\n            e.multiplier.abs();\n            return e;\n        },\n        // Greater than\n        gt: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Greater than\n        gte: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\n        },\n        // Less than\n        lt: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        // Less than\n        lte: function (symbol) {\n            if (!isSymbol(symbol))\n                symbol = new Symbol(symbol);\n            return this.equals(symbol) ||\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\n        },\n        /**\n         * Because nerdamer doesn't group symbols by polynomials but\n         * rather a custom grouping method, this has to be\n         * reinserted in order to make use of most algorithms. This function\n         * checks if the symbol meets the criteria of a polynomial.\n         * @param {bool} multivariate\n         * @returns {boolean}\n         */\n        isPoly: function (multivariate) {\n            var g = this.group,\n                    p = this.power;\n            //the power must be a integer so fail if it's not\n            if (!isInt(p) || p < 0)\n                return false;\n            //constants and first orders\n            if (g === N || g === S || this.isConstant(true))\n                return true;\n            var vars = variables(this);\n            if (g === CB && vars.length === 1) {\n                //the variable is assumed the only one that was found\n                var v = vars[0];\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\n                if (!v)\n                    return true;\n                for (var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    //sqrt(x)\n                    if (sym.group === FN && !sym.args[0].isConstant())\n                        return false;\n                    if (!sym.contains(v) && !sym.isConstant(true))\n                        return false;\n                }\n                return true;\n            }\n            //PL groups. These only fail if a power is not an int\n            //this should handle cases such as x^2*t\n            if (this.isComposite() || g === CB && multivariate) {\n                //fail if we're not checking for multivariate polynomials\n                if (!multivariate && vars.length > 1)\n                    return false;\n                //loop though the symbols and check if they qualify\n                for (var x in this.symbols) {\n                    //we've already the symbols if we're not checking for multivariates at this point\n                    //so we check the sub-symbols\n                    if (!this.symbols[x].isPoly(multivariate))\n                        return false;\n                }\n                return true;\n            }\n            else\n                return false;\n\n            /*\n             //all tests must have passed so we must be dealing with a polynomial\n             return true;\n             */\n        },\n        //removes the requested variable from the symbol and returns the remainder\n        stripVar: function (x, exclude_x) {\n            var retval;\n            if ((this.group === PL || this.group === S) && this.value === x)\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\n            else if (this.group === CB && this.isLinear()) {\n                retval = new Symbol(1);\n                this.each(function (s) {\n                    if (!s.contains(x, true))\n                        retval = _.multiply(retval, s.clone());\n                });\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\n            }\n            else if (this.group === CP && !this.isLinear()) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === CP && this.isLinear()) {\n                retval = new Symbol(0);\n                this.each(function (s) {\n                    if (!s.contains(x)) {\n                        var t = s.clone();\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\n                        retval = _.add(retval, t);\n                    }\n                });\n                //BIG TODO!!! It doesn't make much sense\n                if (retval.equals(0))\n                    retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === EX && this.power.contains(x, true)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else if (this.group === FN && this.contains(x)) {\n                retval = new Symbol(this.multiplier);\n            }\n            else\n                //wth? This should technically be the multiplier.\n                //Unfortunately this method wasn't very well thought out :`(.\n                //should be: retval = new Symbol(this.multiplier);\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\n                //this will break a bunch of unit tests so be ready to for the long haul\n                retval = this.clone();\n\n\n            return retval;\n        },\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\n        toArray: function (v, arr) {\n            arr = arr || {\n                arr: [],\n                add: function (x, idx) {\n                    var e = this.arr[idx];\n                    this.arr[idx] = e ? _.add(e, x) : x;\n                }\n            };\n            var g = this.group;\n\n            if (g === S && this.contains(v)) {\n                arr.add(new Symbol(this.multiplier), this.power);\n            }\n            else if (g === CB) {\n                var a = this.stripVar(v),\n                        x = _.divide(this.clone(), a.clone());\n                var p = x.isConstant() ? 0 : x.power;\n                arr.add(a, p);\n            }\n            else if (g === PL && this.value === v) {\n                this.each(function (x, p) {\n                    arr.add(x.stripVar(v), p);\n                });\n            }\n            else if (g === CP) {\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\n                //each case is handled above\n                this.each(function (x) {\n                    x.toArray(v, arr);\n                });\n            }\n            else if (this.contains(v)) {\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\n            }\n            else {\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\n            }\n            //fill the holes\n            arr = arr.arr; //keep only the array since we don't need the object anymore\n            for (var i = 0; i < arr.length; i++)\n                if (!arr[i])\n                    arr[i] = new Symbol(0);\n            return arr;\n        },\n        //checks to see if a symbol contans a function\n        hasFunc: function (v) {\n            var fn_group = this.group === FN || this.group === EX;\n            if (fn_group && !v || fn_group && this.contains(v))\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].hasFunc(v))\n                        return true;\n                }\n            }\n            return false;\n        },\n        sub: function (a, b) {\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\n            if (a.group === N || a.group === P)\n                err('Cannot substitute a number. Must be a variable');\n            var same_pow = false,\n                    a_is_unit_multiplier = a.multiplier.equals(1),\n                    m = this.multiplier.clone(),\n                    retval;\n            /*\n             * In order to make the substitution the bases have to first match take\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\n             * In both cases the first condition is that the bases match so we begin there\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\n             */\n            if (this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\n                //we cleared the first hurdle but a subsitution may not be possible just yet\n                if (a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\n                    if (a.isLinear()) {\n                        retval = b;\n                    }\n                    else if (a.power.equals(this.power)) {\n                        retval = b;\n                        same_pow = true;\n                    }\n                    if (a.multiplier.equals(this.multiplier))\n                        m = new Frac(1);\n                }\n            }\n            //the next thing is to handle CB\n            else if (this.group === CB || this.previousGroup === CB) {\n                retval = new Symbol(1);\n                this.each(function (x) {\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\n                    retval = _.multiply(retval, subbed);\n\n                });\n            }\n            else if (this.isComposite()) {\n                if (a.isComposite() && this.isComposite() && this.isLinear() && a.isLinear()) {\n                    var find = function (stack, needle) {\n                        for (var x in stack.symbols) {\n                            var sym = stack.symbols[x];\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\n                            if (sym.isComposite() && find(sym, needle) || sym.equals(needle))\n                                return true;\n                        }\n                        return false;\n                    };\n                    //go fish\n                    for (var x in a.symbols) {\n                        if (!find(this, a.symbols[x]))\n                            return this.clone();\n                    }\n                    retval = _.add(_.subtract(this.clone(), a), b);\n                }\n                else {\n                    retval = new Symbol(0);\n                    this.each(function (x) {\n                        retval = _.add(retval, x.sub(a, b));\n                    });\n                }\n            }\n            else if (this.group === EX) {\n                // the parsed value could be a function so parse and sub\n                retval = _.parse(this.value).sub(a, b);\n            }\n            else if (this.group === FN) {\n                var nargs = [];\n                for (var i = 0; i < this.args.length; i++) {\n                    var arg = this.args[i];\n                    if (!isSymbol(arg))\n                        arg = _.parse(arg);\n                    nargs.push(arg.sub(a, b));\n                }\n                retval = _.symfunction(this.fname, nargs);\n            }\n            //if we did manage a substitution\n            if (retval) {\n                if (!same_pow) {\n                    //substitute the power\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\n                    //now raise the symbol to that power\n                    retval = _.pow(retval, p);\n                }\n\n                //transfer the multiplier\n                retval.multiplier = retval.multiplier.multiply(m);\n                //done\n                return retval;\n            }\n            //if all else fails\n            return this.clone();\n        },\n        isMonomial: function () {\n            if (this.group === S)\n                return true;\n            if (this.group === CB) {\n                for (var x in this.symbols)\n                    if (this.symbols[x].group !== S)\n                        return false;\n            }\n            else\n                return false;\n            return true;\n        },\n        isPi: function () {\n            return this.group === S && this.value === 'pi';\n        },\n        sign: function () {\n            return this.multiplier.sign();\n        },\n        isE: function () {\n            return this.value === 'e';\n        },\n        isSQRT: function () {\n            return this.fname === SQRT;\n        },\n        isConstant: function (check_all, check_symbols) {\n            if(check_symbols && this.group === CB) {\n                for(var x in this.symbols) {\n                    if(this.symbols[x].isConstant(true))\n                        return true;\n                }\n            }\n\n            if (check_all === 'all' && (this.isPi() || this.isE()))\n                return true;\n\n            if (check_all && this.group === FN) {\n                for (var i = 0; i < this.args.length; i++) {\n                    if (!this.args[i].isConstant(check_all))\n                        return false;\n                }\n                return true;\n            }\n\n            if(check_all)\n                return isNumericSymbol(this);\n            return this.value === CONST_HASH;\n        },\n        //the symbols is imaginary if\n        //1. n*i\n        //2. a+b*i\n        //3. a*i\n        isImaginary: function () {\n            if (this.imaginary)\n                return true;\n            else if (this.symbols) {\n                for (var x in this.symbols)\n                    if (this.symbols[x].isImaginary())\n                        return true;\n            }\n            return false;\n        },\n        /**\n         * Returns the real part of a symbol\n         * @returns {Symbol}\n         */\n        realpart: function () {\n            if (this.isConstant()) {\n                return this.clone();\n            }\n            else if (this.imaginary)\n                return new Symbol(0);\n            else if (this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.realpart());\n                });\n                return retval;\n            }\n            else if (this.isImaginary())\n                return new Symbol(0);\n            return this.clone();\n        },\n        /*\n         * Return imaginary part of a symbol\n         * @returns {Symbol}\n         */\n        imagpart: function () {\n            if (this.group === S && this.isImaginary())\n                return new Symbol(this.multiplier);\n            if (this.isComposite()) {\n                var retval = new Symbol(0);\n                this.each(function (x) {\n                    retval = _.add(retval, x.imagpart());\n                });\n                return retval;\n            }\n            if (this.group === CB)\n                return this.stripVar(Settings.IMAGINARY);\n            return new Symbol(0);\n        },\n        isInteger: function () {\n            return this.isConstant() && this.multiplier.isInteger();\n        },\n        isLinear: function (wrt) {\n            if (wrt) {\n                if (this.isConstant())\n                    return true;\n                if (this.group === S) {\n                    if (this.value === wrt)\n                        return this.power.equals(1);\n                    else\n                        return true;\n                }\n\n                if (this.isComposite() && this.power.equals(1)) {\n                    for (var x in this.symbols) {\n                        if (!this.symbols[x].isLinear(wrt))\n                            return false;\n                    }\n                    return true;\n                }\n\n                if (this.group === CB && this.symbols[wrt])\n                    return this.symbols[wrt].isLinear(wrt);\n                return false;\n            }\n            else\n                return this.power.equals(1);\n        },\n        /**\n         * Checks to see if a symbol has a function by a specified name or within a specified list\n         * @param {String|String[]} names\n         * @returns {Boolean}\n         */\n        containsFunction: function (names) {\n            if (typeof names === 'string')\n                names = [names];\n            if (this.group === FN && names.indexOf(this.fname) !== -1)\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].containsFunction(names))\n                        return true;\n                }\n            }\n            return false;\n        },\n        multiplyPower: function (p2) {\n            //leave out 1\n            if (this.group === N && this.multiplier.equals(1))\n                return this;\n\n            var p1 = this.power;\n\n            if (this.group !== EX && p2.group === N) {\n                var p = p2.multiplier;\n                if (this.group === N && !p.isInteger()) {\n                    this.convert(P);\n                }\n\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\n\n                if (this.group === P && isInt(this.power)) {\n                    //bring it back to an N\n                    this.value = Math.pow(this.value, this.power);\n                    this.toLinear();\n                    this.convert(N);\n                }\n            }\n            else {\n                if (this.group !== EX) {\n                    p1 = new Symbol(p1);\n                    this.convert(EX);\n                }\n                this.power = _.multiply(p1, p2);\n            }\n\n            return this;\n        },\n        setPower: function (p, retainSign) {\n            //leave out 1\n            if (this.group === N && this.multiplier.equals(1))\n                return this;\n            if (this.group === EX && !isSymbol(p)) {\n                this.group = this.previousGroup;\n                delete this.previousGroup;\n                if (this.group === N) {\n                    this.multiplier = new Frac(this.value);\n                    this.value = CONST_HASH;\n                }\n                else\n                    this.power = p;\n            }\n            else {\n                var isSymbolic = false;\n                if (isSymbol(p)) {\n                    if (p.group === N) {\n                        //p should be the multiplier instead\n                        p = p.multiplier;\n\n                    }\n                    else {\n                        isSymbolic = true;\n                    }\n                }\n                var group = isSymbolic ? EX : P;\n                this.power = p;\n                if (this.group === N && group)\n                    this.convert(group, retainSign);\n            }\n\n            return this;\n        },\n        /**\n         * Checks to see if symbol is located in the denominator\n         * @returns {boolean}\n         */\n        isInverse: function () {\n            if (this.group === EX)\n                return (this.power.multiplier.lessThan(0));\n            return this.power < 0;\n        },\n        /**\n         * Make a duplicate of a symbol by copying a predefined list of items.\n         * The name 'copy' would probably be a more appropriate name.\n         * to a new symbol\n         * @param {Symbol} c\n         * @returns {Symbol}\n         */\n        clone: function (c) {\n            var clone = c || new Symbol(0),\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\n                    properties = [\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\n                    l = properties.length, i;\n            if (this.symbols) {\n                clone.symbols = {};\n                for (var x in this.symbols) {\n                    clone.symbols[x] = this.symbols[x].clone();\n                }\n            }\n\n            for (i = 0; i < l; i++) {\n                if (this[properties[i]] !== undefined) {\n                    clone[properties[i]] = this[properties[i]];\n                }\n            }\n\n            clone.power = this.power.clone();\n            clone.multiplier = this.multiplier.clone();\n            //add back the flag to track if this symbol is a conversion symbol\n            if (this.isConversion)\n                clone.isConversion = this.isConversion;\n\n            if (this.isUnit)\n                clone.isUnit = this.isUnit;\n\n            return clone;\n        },\n        /**\n         * Converts a symbol multiplier to one.\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\n         * @returns {Symbol}\n         */\n        toUnitMultiplier: function (keepSign) {\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\n            this.multiplier.den = new bigInt(1);\n            return this;\n        },\n        /**\n         * Converts a Symbol's power to one.\n         * @returns {Symbol}\n         */\n        toLinear: function () {\n            this.setPower(new Frac(1));\n            return this;\n        },\n        /**\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\n         * @param {Function} fn\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\n         */\n        each: function (fn, deep) {\n            if (!this.symbols) {\n                fn.call(this, this, this.value);\n            }\n            else {\n                for (var x in this.symbols) {\n                    var sym = this.symbols[x];\n                    if (sym.group === PL && deep) {\n                        for (var y in sym.symbols) {\n                            fn.call(x, sym.symbols[y], y);\n                        }\n                    }\n                    else\n                        fn.call(this, sym, x);\n                }\n            }\n        },\n        /**\n         * A numeric value to be returned for Javascript. It will try to\n         * return a number as far a possible but in case of a pure symbolic\n         * symbol it will just return its text representation\n         * @returns {String|Number}\n         */\n        valueOf: function () {\n            if (this.group === N)\n                return this.multiplier.valueOf();\n            else if (this.power === 0) {\n                return 1;\n            }\n            else if (this.multiplier === 0) {\n                return 0;\n            }\n            else {\n                return text(this, 'decimals');\n            }\n        },\n        /**\n         * Checks to see if a symbols has a particular variable within it.\n         * Pass in true as second argument to include the power of exponentials\n         * which aren't check by default.\n         * @example var s = _.parse('x+y+z'); s.contains('y');\n         * //returns true\n         * @param {any} variable\n         * @param {boolean} all\n         * @returns {boolean}\n         */\n        contains: function (variable, all) {\n            //contains expects a string\n            variable = String(variable);\n            var g = this.group;\n            if (this.value === variable)\n                return true;\n            if (this.symbols) {\n                for (var x in this.symbols) {\n                    if (this.symbols[x].contains(variable, all))\n                        return true;\n                }\n            }\n            if (g === FN || this.previousGroup === FN) {\n                for (var i = 0; i < this.args.length; i++) {\n                    if (this.args[i].contains(variable, all))\n                        return true;\n                }\n            }\n\n            if (g === EX) {\n                //exit only if it does\n                if (all && this.power.contains(variable, all)) {\n                    return true;\n                }\n                if (this.value === variable)\n                    return true;\n\n            }\n\n            return this.value === variable;\n        },\n        /**\n         * Negates a symbols\n         * @returns {boolean}\n         */\n        negate: function () {\n            this.multiplier.negate();\n            if (this.group === CP || this.group === PL)\n                this.distributeMultiplier();\n            return this;\n        },\n        /**\n         * Inverts a symbol\n         * @param {boolean} power_only\n         * @param {boolean} all\n         * @returns {boolean}\n         */\n        invert: function (power_only, all) {\n            //invert the multiplier\n            if (!power_only)\n                this.multiplier = this.multiplier.invert();\n            //invert the rest\n            if (isSymbol(this.power)) {\n                this.power.negate();\n            }\n            else if (this.group === CB && all) {\n                this.each(function (x) {\n                    return x.invert();\n                });\n            }\n            else {\n                if (this.power && this.group !== N)\n                    this.power.negate();\n            }\n            return this;\n        },\n        /**\n         * Symbols of group CP or PL may have the multiplier being carried by\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\n         * convenient in many cases, however in some cases the multiplier needs\n         * to be carried individually e.g. 2*x+2*y+2*z.\n         * This method distributes the multiplier over the entire symbol\n         * @param {boolean} all\n         * @returns {Symbol}\n         */\n        distributeMultiplier: function (all) {\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\n            if (this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\n                for (var x in this.symbols) {\n                    var s = this.symbols[x];\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\n                    s.distributeMultiplier();\n                }\n                this.toUnitMultiplier();\n            }\n\n            return this;\n        },\n        /**\n         * This method expands the exponent over the entire symbol just like\n         * distributeMultiplier\n         * @returns {Symbol}\n         */\n        distributeExponent: function () {\n            if (!this.power.equals(1)) {\n                var p = this.power;\n                for (var x in this.symbols) {\n                    var s = this.symbols[x];\n                    if (s.group === EX) {\n                        s.power = _.multiply(s.power, new Symbol(p));\n                    }\n                    else {\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\n                    }\n                }\n                this.toLinear();\n            }\n            return this;\n        },\n        /**\n         * This method will attempt to up-convert or down-convert one symbol\n         * from one group to another. Not all symbols are convertible from one\n         * group to another however. In that case the symbol will remain\n         * unchanged.\n         * @param {int} group\n         * @param {string} imaginary\n         */\n        convert: function (group, imaginary) {\n            if (group > FN) {\n                //make a clone of this symbol;\n                var cp = this.clone();\n\n                //attach a symbols object and upgrade the group\n                this.symbols = {};\n\n                if (group === CB) {\n                    //symbol of group CB hold symbols bound together through multiplication\n                    //because of commutativity this multiplier can technically be anywhere within the group\n                    //to keep track of it however it's easier to always have the top level carry it\n                    cp.toUnitMultiplier();\n                }\n                else {\n                    //reset the symbol\n                    this.toUnitMultiplier();\n                }\n\n                if (this.group === FN) {\n                    cp.args = this.args;\n                    delete this.args;\n                    delete this.fname;\n                }\n\n                //the symbol may originate from the symbol i but this property no longer holds true\n                //after copying\n                if (this.isImgSymbol)\n                    delete this.isImgSymbol;\n\n                this.toLinear();\n                //attach a clone of this symbol to the symbols object using its proper key\n                this.symbols[cp.keyForGroup(group)] = cp;\n                this.group = group;\n                //objects by default don't have a length property. However, in order to keep track of the number\n                //of sub-symbols we have to impliment our own.\n                this.length = 1;\n            }\n            else if (group === EX) {\n                //1^x is just one so check and make sure\n                if (!(this.group === N && this.multiplier.equals(1))) {\n                    if (this.group !== EX)\n                        this.previousGroup = this.group;\n                    if (this.group === N) {\n                        this.value = this.multiplier.num.toString();\n                        this.toUnitMultiplier();\n                    }\n                    //update the hash to reflect the accurate hash\n                    else\n                        this.value = text(this, 'hash');\n\n                    this.group = EX;\n                }\n            }\n            else if (group === N) {\n                var m = this.multiplier.toDecimal();\n                if (this.symbols)\n                    this.symbols = undefined;\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\n            }\n            else if (group === P && this.group === N) {\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\n                this.toUnitMultiplier(!imaginary);\n                this.group = P;\n            }\n            return this;\n        },\n        /**\n         * This method is one of the principal methods to make it all possible.\n         * It performs cleanup and prep operations whenever a symbols is\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\n         * group for instance it will remove the redundant symbol. Similarly\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\n         * will remove any dangling zeroes from the symbol. It will also\n         * up-convert or down-convert a symbol if it detects that it's\n         * incorrectly grouped. It should be noted that this method is not\n         * called directly but rather by the 'attach' method for addition groups\n         * and the 'combine' method for multiplication groups.\n         * @param {Symbol} symbol\n         * @param {String} action\n         */\n        insert: function (symbol, action) {\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\n            if (!isSymbol(symbol))\n                err('Object ' + symbol + ' is not of type Symbol!');\n            if (this.symbols) {\n                var group = this.group;\n                if (group > FN) {\n                    var key = symbol.keyForGroup(group);\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\n                    if (action === 'add') {\n                        var hash = key;\n                        if (existing) {\n                            //add them together using the parser\n                            this.symbols[hash] = _.add(existing, symbol);\n                            //if the addition resulted in a zero multiplier remove it\n                            if (this.symbols[hash].multiplier.equals(0)) {\n                                delete this.symbols[hash];\n                                this.length--;\n\n                                if (this.length === 0) {\n                                    this.convert(N);\n                                    this.multiplier = new Frac(0);\n                                }\n                            }\n                        }\n                        else {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                    }\n                    else {\n                        //check if this is of group P and unwrap before inserting\n                        if (symbol.group === P && isInt(symbol.power)) {\n                            symbol.convert(N);\n                        }\n\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\n                        if (symbol.group !== EX) {\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                            symbol.toUnitMultiplier();\n                        }\n                        else {\n                            symbol.parens = symbol.multiplier.lessThan(0);\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\n                            symbol.toUnitMultiplier(true);\n                        }\n\n                        if (existing) {\n                            //remove because the symbol may have changed\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\n                            if (symbol.isConstant()) {\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\n                            }\n\n                            this.length--;\n                            //clean up\n                        }\n\n                        //don't insert the symbol if it's 1\n                        if (!symbol.isOne(true)) {\n                            this.symbols[key] = symbol;\n                            this.length++;\n                        }\n                        else if (symbol.multiplier.lessThan(0)) {\n                            this.negate(); //put back the sign\n                        }\n                    }\n\n                    //clean up\n                    if (this.length === 0)\n                        this.convert(N);\n                    //update the hash\n                    if (this.group === CP || this.group === CB) {\n                        this.updateHash();\n                    }\n                }\n            }\n\n            return this;\n        },\n        //the insert method for addition\n        attach: function (symbol) {\n            if (isArray(symbol)) {\n                for (var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'add');\n                return this;\n            }\n            return this.insert(symbol, 'add');\n        },\n        //the insert method for multiplication\n        combine: function (symbol) {\n            if (isArray(symbol)) {\n                for (var i = 0; i < symbol.length; i++)\n                    this.insert(symbol[i], 'multiply');\n                return this;\n            }\n            return this.insert(symbol, 'multiply');\n        },\n        /**\n         * This method should be called after any major \"surgery\" on a symbol.\n         * It updates the hash of the symbol for example if the fname of a\n         * function has changed it will update the hash of the symbol.\n         */\n        updateHash: function () {\n            if (this.group === N)\n                return;\n\n            if (this.group === FN) {\n                var contents = '',\n                        args = this.args,\n                        is_parens = this.fname === PARENTHESIS;\n                for (var i = 0; i < args.length; i++)\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\n                var fn_name = is_parens ? '' : this.fname;\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\n            }\n            else if (!(this.group === S || this.group === PL)) {\n                this.value = text(this, 'hash');\n            }\n        },\n        /**\n         * this function defines how every group in stored within a group of\n         * higher order think of it as the switchboard for the library. It\n         * defines the hashes for symbols.\n         * @param {int} group\n         */\n        keyForGroup: function (group) {\n            var g = this.group;\n            var key;\n\n            if (g === N) {\n                key = this.value;\n            }\n            else if (g === S || g === P) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if (g === FN) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if (g === PL) {\n                //if the order is reversed then we'll assume multiplication\n                //TODO: possible future dilemma\n                if (group === CB)\n                    key = text(this, 'hash');\n                else if (group === CP) {\n                    if (this.power.equals(1))\n                        key = this.value;\n                    else\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\n                }\n                else if (group === PL)\n                    key = this.power.toString();\n                else\n                    key = this.value;\n                return key;\n            }\n            else if (g === CP) {\n                if (group === CP) {\n                    key = text(this, 'hash');\n                }\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = this.value;\n            }\n            else if (g === CB) {\n                if (group === PL)\n                    key = this.power.toDecimal();\n                else\n                    key = text(this, 'hash');\n            }\n            else if (g === EX) {\n                if (group === PL)\n                    key = text(this.power);\n                else\n                    key = text(this, 'hash');\n            }\n\n            return key;\n        },\n        /**\n         * Symbols are typically stored in an object which works fine for most\n         * cases but presents a problem when the order of the symbols makes\n         * a difference. This function simply collects all the symbols and\n         * returns them as an array. If a function is supplied then that\n         * function is called on every symbol contained within the object.\n         * @param {Function} fn\n         * @param {Object} opt\n         * @param {Function} sort_fn\n         * @@param {Boolean} expand_symbol\n         * @returns {Array}\n         */\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\n            var collected = [];\n            if (!this.symbols)\n                collected.push(this);\n            else {\n                for (var x in this.symbols) {\n                    var symbol = this.symbols[x];\n                    if (expand_symbol && (symbol.group === PL || symbol.group === CP)) {\n                        collected = collected.concat(symbol.collectSymbols());\n                    }\n                    else\n                        collected.push(fn ? fn(symbol, opt) : symbol);\n                }\n            }\n            if (sort_fn === null)\n                sort_fn = undefined; //WTF Firefox? Seriously?\n\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\n        },\n        /**\n         * Returns the latex representation of the symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        latex: function (option) {\n            return LaTeX.latex(this, option);\n        },\n        /**\n         * Returns the text representation of a symbol\n         * @param {String} option\n         * @returns {String}\n         */\n        text: function (option) {\n            return text(this, option);\n        },\n        /**\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\n         * @@param {bool} abs Compares the absolute value\n         */\n        isOne: function (abs) {\n            var f = abs ? 'absEquals' : 'equals';\n            if (this.group === N)\n                return this.multiplier[f](1);\n            else\n                return this.power.equals(0);\n        },\n        isComposite: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CP || g === PL || pg === PL || pg === CP;\n        },\n        isCombination: function () {\n            var g = this.group,\n                    pg = this.previousGroup;\n            return g === CB || pg === CB;\n        },\n        lessThan: function (n) {\n            return this.multiplier.lessThan(n);\n        },\n        greaterThan: function (n) {\n            return this.multiplier.greaterThan(n);\n        },\n        /**\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\n         * with other classes the symbol is either the denominator or not.\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\n         * denominator and has to be found by looking at the actual symbols themselves.\n         */\n        getDenom: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if (this.group === CB && this.power.lessThan(0))\n                symbol = _.expand(symbol);\n\n            //if the symbol already is the denominator... DONE!!!\n            if (symbol.power.lessThan(0)) {\n                var d = _.parse(symbol.multiplier.den);\n                retval = symbol.toUnitMultiplier();\n                retval.power.negate();\n                retval = _.multiply(d, retval); //put back the coeff\n            }\n            else if (symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.den);\n                for (var x in symbol.symbols)\n                    if (symbol.symbols[x].power < 0)\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\n            }\n            else\n                retval = _.parse(symbol.multiplier.den);\n            return retval;\n        },\n        getNum: function () {\n            var retval, symbol;\n            symbol = this.clone();\n            //e.g. 1/(x*(x+1))\n            if (symbol.group === CB && symbol.power.lessThan(0))\n                symbol = _.expand(symbol);\n            //if the symbol already is the denominator... DONE!!!\n            if (symbol.power.greaterThan(0) && symbol.group !== CB) {\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\n            }\n            else if (symbol.group === CB) {\n                retval = _.parse(symbol.multiplier.num);\n                symbol.each(function (x) {\n                    if (x.power > 0 || x.group === EX && x.power.multiplier > 0) {\n                        retval = _.multiply(retval, x.clone());\n                    }\n                });\n            }\n            else {\n                retval = _.parse(symbol.multiplier.num);\n            }\n            return retval;\n        },\n        toString: function () {\n            return this.text();\n        }\n    };\n\n//Parser =======================================================================\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\n    function Parser() {\n        //Point to the local parser instead of the global one\n        var _ = this;\n        var bin = {};\n        var preprocessors = {names: [], actions: []};\n\n//Parser.classes ===============================================================\n        function Slice(upper, lower) {\n            this.start = upper;\n            this.end = lower;\n        }\n        ;\n        Slice.prototype.isConstant = function () {\n            return this.start.isConstant() && this.end.isConstant();\n        };\n        Slice.prototype.text = function () {\n            return text(this.start) + ':' + text(this.end);\n        };\n\n        /**\n         * Class used to collect arguments for functions\n         * @returns {Parser.Collection}\n         */\n        function Collection() {\n            this.elements = [];\n        }\n        Collection.prototype.append = function (e) {\n            this.elements.push(e);\n        };\n        Collection.prototype.getItems = function () {\n            return this.elements;\n        };\n        Collection.prototype.toString = function () {\n            return _.pretty_print(this.elements);\n        };\n        Collection.create = function (e) {\n            var collection = new Collection();\n            if (e)\n                collection.append(e);\n            return collection;\n        };\n\n        function Token(node, node_type, column) {\n            this.type = node_type;\n            this.value = node;\n            if (column !== undefined)\n                this.column = column + 1;\n            if (node_type === Token.OPERATOR) {\n                //copy everything over from the operator\n                var operator = operators[node];\n                for (var x in operator)\n                    this[x] = operator[x];\n\n            }\n            else if (node_type === Token.FUNCTION) {\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\n                this.leftAssoc = false;\n            }\n        }\n        Token.prototype.toString = function () {\n            return this.value;\n        };\n        Token.prototype.toString = function () {\n            if (this.is_prefix)\n                return '`' + this.value;\n            return this.value;\n        };\n        //some constants\n        Token.OPERATOR = 'OPERATOR';\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\n        Token.FUNCTION = 'FUNCTION';\n        Token.UNIT = 'UNIT';\n        Token.KEYWORD = 'KEYWORD';\n        Token.MAX_PRECEDENCE = 999;\n        //create link to classes\n        this.classes = {\n            Collection: Collection,\n            Slice: Slice,\n            Token: Token\n        };\n//Parser.modules ===============================================================\n        //object for functions which handle complex number\n        var complex = {\n            prec: undefined,\n            cos: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cos(r) * Math.cosh(i));\n                im = _.parse(Math.sin(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sin: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(r) * Math.cosh(i));\n                im = _.parse(Math.cos(r) * Math.sinh(i));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tan: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sec: function (r, i) {\n                var t = this.removeDen(this.cos(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csc: function (r, i) {\n                var t = this.removeDen(this.sin(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            cot: function (r, i) {\n                var t = this.removeDen(this.tan(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acos: function (r, i) {\n                var symbol, sq, a, b, c;\n                symbol = this.fromArray([r, i]);\n                sq = _.expand(_.pow(symbol.clone(), new Symbol(2))); //z*z\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\n                b = _.expand(_.add(symbol.clone(), a));\n                c = log(b);\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\n            },\n            asin: function (r, i) {\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\n            },\n            atan: function (r, i) {\n                var a, b, c, symbol;\n                symbol = complex.fromArray([r, i]);\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\n            },\n            asec: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.acos.apply(this, d);\n            },\n            acsc: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.asin.apply(this, d);\n            },\n            acot: function (r, i) {\n                var d = this.removeDen([r, i]);\n                d[1].negate();\n                return this.atan.apply(this, d);\n            },\n            //Hyperbolic trig\n            cosh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.cosh(r) * Math.cos(i));\n                im = _.parse(Math.sinh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sinh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(r) * Math.cos(i));\n                im = _.parse(Math.cosh(r) * Math.sin(i));\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\n            },\n            tanh: function (r, i) {\n                var re, im;\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\n            },\n            sech: function (r, i) {\n                var t = this.removeDen(this.cosh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            csch: function (r, i) {\n                var t = this.removeDen(this.sinh(r, i));\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            coth: function (r, i) {\n                var t = this.removeDen(this.tanh(r, i));\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\n            },\n            acosh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\n            },\n            asinh: function (r, i) {\n                var a, z;\n                z = this.fromArray([r, i]);\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\n                return _.expand(log(_.add(z, a)));\n            },\n            atanh: function (r, i) {\n                var a, b, z;\n                z = this.fromArray([r, i]);\n                a = log(_.add(z.clone(), new Symbol(1)));\n                b = log(_.subtract(new Symbol(1), z));\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\n            },\n            asech: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.acosh.apply(this, t);\n            },\n            acsch: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.asinh.apply(this, t);\n            },\n            acoth: function (r, i) {\n                var t = this.removeDen([r, i]);\n                t[1].negate();\n                return this.atanh.apply(this, t);\n            },\n            sqrt: function (symbol) {\n                var re, im, h, a, d;\n                re = symbol.realpart();\n                im = symbol.imagpart();\n                h = Symbol.hyp(re, im);\n                a = _.add(re.clone(), h);\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\n            },\n            log: function (r, i) {\n                var re, im;\n                re = log(Symbol.hyp(r, i));\n                im = _.parse(Math.atan2(i, r));\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\n            },\n            erf(symbol, n) {\n                //Do nothing for now. Revisit this in the future.\n                return _.symfunction('erf', [symbol]);\n\n                n = n || 30;\n\n                var f = function(R, I) {\n                    return block('PARSE2NUMBER', function() {\n                        var retval = new Symbol(0);\n                        for(var i=0; i<n; i++) {\n                            var a, b;\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\n                            retval = _.add(retval, _.multiply(a, b));\n                        }\n                        return _.multiply(retval, new Symbol(2));\n                    }, true);\n                };\n                var re, im, a, b, c, k;\n                re = symbol.realpart();\n                im = symbol.imagpart();\n\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\n                b = f(re.toString(), im.toString());\n\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\n            },\n            removeDen: function (symbol) {\n                var den, r, i, re, im;\n                if (isArray(symbol)) {\n                    r = symbol[0];\n                    i = symbol[1];\n                }\n                else {\n                    r = symbol.realpart();\n                    i = symbol.imagpart();\n                }\n\n                den = Math.pow(r, 2) + Math.pow(i, 2);\n                re = _.parse(r / den);\n                im = _.parse(i / den);\n                return [re, im];\n            },\n            fromArray: function (arr) {\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\n            },\n            evaluate: function (symbol, f) {\n                var re, im, sign;\n\n                sign = symbol.power.sign();\n                //remove it from under the denominator\n                symbol.power = symbol.power.abs();\n                //expand\n                if (symbol.power.greaterThan(1))\n                    symbol = _.expand(symbol);\n                //remove the denominator\n                if (sign < 0) {\n                    var d = this.removeDen(symbol);\n                    re = d[0];\n                    im = d[1];\n                }\n                else {\n                    re = symbol.realpart();\n                    im = symbol.imagpart();\n                }\n\n                if (re.isConstant('all') && im.isConstant('all'))\n                    return this[f].call(this, re, im);\n                return _.symfunction(f, [symbol]);\n            }\n        };\n        //object for functions which handle trig\n        var trig = this.trig = {\n            //container for trigonometric function\n            cos: function (symbol) {\n                if (symbol.equals('pi') && symbol.multiplier.den.equals(2))\n                    return new Symbol(0);\n\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.equals(new Symbol(Settings.PI / 2)))\n                        return new Symbol(0);\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.cos(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cos');\n                    }\n                }\n                if (symbol.equals(0))\n                    return new Symbol(1);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = Number(m.num), d = Number(m.den);\n                        if (d === 2)\n                            retval = new Symbol(0);\n                        else if (d === 3) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else if (d === 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if (d === 6) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cos', [symbol]);\n                    }\n                }\n\n                if (c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if (!retval)\n                    retval = _.symfunction('cos', [symbol]);\n\n                return retval;\n            },\n            sin: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.sin(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sin');\n                }\n\n                if (symbol.equals(0))\n                    return new Symbol(0);\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        sign = symbol.multiplier.sign(),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n                if (symbol.equals('pi'))\n                    retval = new Symbol(0);\n                else if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 3) {\n                            retval = _.parse('sqrt(3)/2');\n                            c = true\n                        }\n                        else if (d == 4) {\n                            retval = _.parse('1/sqrt(2)');\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('1/2');\n                            c = true;\n                        }\n                        else\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n                    }\n                }\n\n                if (!retval)\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\n\n                if (c && (q === 3 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            tan: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.tan(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'tan');\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(0);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\n                        else if (d == 3) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('tan', [symbol]);\n                    }\n                }\n\n                if (!retval)\n                    retval = _.symfunction('tan', [symbol]);\n\n                if (c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            sec: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math2.sec(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'sec');\n                    return _.parse(format('1/cos({0})', symbol));\n                }\n\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier.abs();\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return for 1 or -1 for multiples of pi\n                    if (isInt(m)) {\n                        retval = new Symbol(even(m) ? 1 : -1);\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\n                        else if (d == 3) {\n                            retval = new Symbol(2);\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = _.parse('sqrt(2)');\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('2/sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('sec', [symbol]);\n                    }\n                }\n\n                if (c && (q === 2 || q === 3))\n                    retval.negate();\n\n                if (!retval)\n                    retval = _.symfunction('sec', [symbol]);\n\n                return retval;\n            },\n            csc: function(symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant())\n                        return new Symbol(Math2.csc(symbol.valueOf()));\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'csc');\n                    return _.parse(format('1/sin({0})', symbol));\n                }\n\n                var retval,\n                    c = false,\n                    q = getQuadrant(symbol.multiplier.toDecimal()),\n                    sign = symbol.multiplier.sign(),\n                    m = symbol.multiplier.abs();\n\n                symbol.multiplier = m;\n\n                if(symbol.isPi() && symbol.isLinear()) {\n                    //return for 0 for multiples of pi\n                    if(isInt(m)) {\n                        throw new UndefinedError('csc is undefined for '+symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if(d == 2) {\n                            retval = new Symbol(1); c = true;\n                        }\n                        else if(d == 3) {\n                            retval = _.parse('2/sqrt(3)'); c = true\n                        }\n                        else if(d == 4) {\n                            retval = _.parse('sqrt(2)'); c = true;\n                        }\n                        else if(d == 6) {\n                            retval = new Symbol(2); c = true;\n                        }\n                        else\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n                    }\n                }\n\n                if(!retval) retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\n\n                if(c && (q === 3 || q === 4)) retval.negate();\n\n                return retval;\n            },\n            cot: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math2.cot(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'cot');\n                    return _.parse(format('1/tan({0})', symbol));\n                }\n                var retval,\n                        c = false,\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\n                        m = symbol.multiplier;\n\n                symbol.multiplier = m;\n\n                if (symbol.isPi() && symbol.isLinear()) {\n                    //return 0 for all multiples of pi\n                    if (isInt(m)) {\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\n                    }\n                    else {\n                        var n = m.num, d = m.den;\n                        if (d == 2)\n                            retval = new Symbol(0);\n                        else if (d == 3) {\n                            retval = _.parse('1/sqrt(3)');\n                            c = true;\n                        }\n                        else if (d == 4) {\n                            retval = new Symbol(1);\n                            c = true;\n                        }\n                        else if (d == 6) {\n                            retval = _.parse('sqrt(3)');\n                            c = true;\n                        }\n                        else\n                            retval = _.symfunction('cot', [symbol]);\n                    }\n                }\n\n                if (!retval)\n                    retval = _.symfunction('cot', [symbol]);\n\n                if (c && (q === 2 || q === 4))\n                    retval.negate();\n\n                return retval;\n            },\n            acos: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.acos(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acos');\n                }\n                return _.symfunction('acos', arguments);\n            },\n            asin: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.asin(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asin');\n                }\n                return _.symfunction('asin', arguments);\n            },\n            atan: function (symbol) {\n                var retval;\n                if (symbol.equals(0))\n                    retval = new Symbol(0);\n                else if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.atan(symbol.valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'atan');\n                    return _.symfunction('atan', arguments);\n                }\n                else if (symbol.equals(-1))\n                    retval = _.parse('-pi/4');\n                else\n                    retval = _.symfunction('atan', arguments);\n                return retval;\n            },\n            asec: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.acos(symbol.invert().valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'asec');\n                }\n                return _.symfunction('asec', arguments);\n            },\n            acsc: function (symbol) {\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.asin(symbol.invert().valueOf()));\n                    if (symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acsc');\n                }\n                return _.symfunction('acsc', arguments);\n            },\n            acot: function(symbol) {\n                if(Settings.PARSE2NUMBER) {\n                    if(symbol.isConstant()) {\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\n                    }\n\n                    if(symbol.isImaginary())\n                        return complex.evaluate(symbol, 'acot');\n                }\n                return _.symfunction('acot', arguments);\n            },\n            atan2: function (a, b) {\n                if (a.equals(0) && b.equals(0))\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\n\n                if (Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\n                    return new Symbol(Math.atan2(a, b));\n                }\n                return _.symfunction('atan2', arguments);\n            }\n        };\n        //object for functions which handle hyperbolic trig\n        var trigh = this.trigh = {\n            //container for hyperbolic trig function\n            cosh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.cosh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'cosh');\n                    }\n                }\n\n                return retval = _.symfunction('cosh', arguments);\n            },\n            sinh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.sinh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sinh');\n                    }\n                }\n\n                return retval = _.symfunction('sinh', arguments);\n            },\n            tanh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.tanh(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'tanh');\n                    }\n                }\n\n                return retval = _.symfunction('tanh', arguments);\n            },\n            sech: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant()) {\n                        return new Symbol(Math.sech(symbol.valueOf()));\n                    }\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'sech');\n                    }\n                    return _.parse(format('1/cosh({0})', symbol));\n                }\n\n                return retval = _.symfunction('sech', arguments);\n            },\n            csch: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.csch(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'csch');\n                    }\n                    return _.parse(format('1/sinh({0})', symbol));\n                }\n\n                return retval = _.symfunction('csch', arguments);\n            },\n            coth: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER) {\n                    if (symbol.isConstant())\n                        return new Symbol(Math.coth(symbol.valueOf()));\n                    if (symbol.isImaginary()) {\n                        return complex.evaluate(symbol, 'coth');\n                    }\n                    return _.parse(format('1/tanh({0})', symbol));\n                }\n\n                return retval = _.symfunction('coth', arguments);\n            },\n            acosh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acosh');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2-1))', symbol.toString())));\n                else\n                    retval = _.symfunction('acosh', arguments);\n                return retval;\n            },\n            asinh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asinh');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'(({0})+sqrt(({0})^2+1))', symbol.toString())));\n                else\n                    retval = _.symfunction('asinh', arguments);\n                return retval;\n            },\n            atanh: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'atanh');\n                else if (Settings.PARSE2NUMBER) {\n                    retval = evaluate(_.parse(format('(1/2)*'+Settings.LOG+'((1+({0}))/(1-({0})))', symbol.toString())));\n                }\n                else\n                    retval = _.symfunction('atanh', arguments);\n                return retval;\n            },\n            asech: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'asech');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\n                else\n                    retval = _.symfunction('asech', arguments);\n                return retval;\n            },\n            acsch: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acsch');\n                else if (Settings.PARSE2NUMBER)\n                    retval = evaluate(_.parse(format(Settings.LOG+'((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\n                else\n                    retval = _.symfunction('acsch', arguments);\n                return retval;\n            },\n            acoth: function (symbol) {\n                var retval;\n                if (Settings.PARSE2NUMBER && symbol.isImaginary())\n                    retval = complex.evaluate(symbol, 'acoth');\n                else if (Settings.PARSE2NUMBER) {\n                    if (symbol.equals(1))\n                        retval = Symbol.infinity();\n                    else\n                        retval = evaluate(\n                                _.divide(\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\n                                        new Symbol(2)));\n                }\n                else\n                    retval = _.symfunction('acoth', arguments);\n                return retval;\n            }\n        };\n        //list of supported units\n        this.units = {};\n        //list all the supported operators\n        var operators = {\n            '\\\\': {\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            },\n            '!!': {\n                precedence: 7,\n                operator: '!!',\n                action: 'dfactorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\n                }\n            },\n            '!': {\n                precedence: 7,\n                operator: '!',\n                action: 'factorial',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                operation: function (e) {\n                    return factorial(e); //wrap it in a factorial function\n                }\n            },\n            '^': {\n                precedence: 6,\n                operator: '^',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '**': {\n                precedence: 6,\n                operator: '**',\n                action: 'pow',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            },\n            '%': {\n                precedence: 4,\n                operator: '%',\n                action: 'percent',\n                prefix: false,\n                postfix: true,\n                leftAssoc: true,\n                overloaded: true,\n                overloadAction: 'mod',\n\t\toverloadLeftAssoc: false,\n                operation: function (x) {\n                    return _.divide(x, new Symbol(100));\n                }\n            },\n            '*': {\n                precedence: 4,\n                operator: '*',\n                action: 'multiply',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '/': {\n                precedence: 4,\n                operator: '/',\n                action: 'divide',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '+': {\n                precedence: 3,\n                operator: '+',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            'plus': {\n                precedence: 3,\n                operator: 'plus',\n                action: 'add',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x;\n                }\n            },\n            '-': {\n                precedence: 3,\n                operator: '-',\n                action: 'subtract',\n                prefix: true,\n                postfix: false,\n                leftAssoc: false,\n                operation: function (x) {\n                    return x.negate();\n                }\n            },\n            '=': {\n                precedence: 2,\n                operator: '=',\n                action: 'equals',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '==': {\n                precedence: 1,\n                operator: '==',\n                action: 'eq',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<': {\n                precedence: 1,\n                operator: '<',\n                action: 'lt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '<=': {\n                precedence: 1,\n                operator: '<=',\n                action: 'lte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '>': {\n                precedence: 1,\n                operator: '>',\n                action: 'gt',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            '=>': {\n                precedence: 1,\n                operator: '=>',\n                action: 'gte',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ',': {\n                precedence: 0,\n                operator: ',',\n                action: 'comma',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false\n            },\n            ':': {\n                precedence: 0,\n                operator: ',',\n                action: 'assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: false,\n                vectorFn: 'slice'\n            },\n            ':=': {\n                precedence: 0,\n                operator: ',',\n                action: 'function_assign',\n                prefix: false,\n                postfix: false,\n                leftAssoc: true\n            }\n        };\n        //brackets\n        var brackets = {\n            '(': {\n                type: 'round',\n                id: 1,\n                is_open: true,\n                is_close: false\n            },\n            ')': {\n                type: 'round',\n                id: 2,\n                is_open: false,\n                is_close: true\n            },\n            '[': {\n                type: 'square',\n                id: 3,\n                is_open: true,\n                is_close: false,\n                maps_to: 'vector'\n            },\n            ']': {\n                type: 'square',\n                id: 4,\n                is_open: false,\n                is_close: true\n            },\n            '{': {\n                type: 'curly',\n                id: 5,\n                is_open: true,\n                is_close: false,\n                maps_to: 'Set'\n            },\n            '}': {\n                type: 'curly',\n                id: 6,\n                is_open: false,\n                is_close: true\n            }\n        };\n        // Supported functions.\n        // Format: function_name: [mapped_function, number_of_parameters]\n        var functions = this.functions = {\n            'cos':                  [trig.cos, 1],\n            'sin':                  [trig.sin, 1],\n            'tan':                  [trig.tan, 1],\n            'sec':                  [trig.sec, 1],\n            'csc':                  [trig.csc, 1],\n            'cot':                  [trig.cot, 1],\n            'acos':                 [trig.acos, 1],\n            'asin':                 [trig.asin, 1],\n            'atan':                 [trig.atan, 1],\n            'arccos':               [trig.acos, 1],\n            'arcsin':               [trig.asin, 1],\n            'arctan':               [trig.atan, 1],\n            'asec':                 [trig.asec, 1],\n            'acsc':                 [trig.acsc, 1],\n            'acot':                 [trig.acot, 1],\n            'atan2':                [trig.atan2, 2],\n            'acoth':                [trigh.acoth, 1],\n            'asech':                [trigh.asech, 1],\n            'acsch':                [trigh.acsch, 1],\n            'sinh':                 [trigh.sinh, 1],\n            'cosh':                 [trigh.cosh, 1],\n            'tanh':                 [trigh.tanh, 1],\n            'asinh':                [trigh.asinh, 1],\n            'sech':                 [trigh.sech, 1],\n            'csch':                 [trigh.csch, 1],\n            'coth':                 [trigh.coth, 1],\n            'acosh':                [trigh.acosh, 1],\n            'atanh':                [trigh.atanh, 1],\n            'log10':                [, 1],\n            'exp':                  [exp, 1],\n            'radians':              [radians, 1],\n            'degrees':              [degrees, 1],\n            'min':                  [min, -1],\n            'max':                  [max, -1],\n            'erf':                  [, 1],\n            'floor':                [, 1],\n            'ceil':                 [, 1],\n            'trunc':                [, 1],\n            'Si':                   [, 1],\n            'step':                 [, 1],\n            'rect':                 [, 1],\n            'sinc':                 [sinc, 1],\n            'tri':                  [, 1],\n            'sign':                 [sign, 1],\n            'Ci':                   [, 1],\n            'Ei':                   [, 1],\n            'Shi':                  [, 1],\n            'Chi':                  [, 1],\n            'Li':                   [, 1],\n            'fib':                  [, 1],\n            'fact':                 [factorial, 1],\n            'factorial':            [factorial, 1],\n            'continued_fraction':   [continued_fraction, [1, 2]],\n            'dfactorial':           [, 1],\n            'gamma_incomplete':     [, [1, 2]],\n            'round':                [round, [1, 2]],\n            'scientific':           [scientific, [1, 2]],\n            'mod':                  [mod, 2],\n            'pfactor':              [pfactor, 1],\n            'vector':               [vector, -1],\n            'matrix':               [matrix, -1],\n            'Set':                  [set, -1],\n            'imatrix':              [imatrix, -1],\n            'parens':               [parens, -1],\n            'sqrt':                 [sqrt, 1],\n            'cbrt':                 [cbrt, 1],\n            'nthroot':              [nthroot, 2],\n            'log':                  [log, [1, 2]],\n            'expand':               [expand, 1],\n            'abs':                  [abs, 1],\n            'invert':               [invert, 1],\n            'determinant':          [determinant, 1],\n            'size':                 [size, 1],\n            'transpose':            [transpose, 1],\n            'dot':                  [dot, 2],\n            'cross':                [cross, 2],\n            'vecget':               [vecget, 2],\n            'vecset':               [vecset, 3],\n            'vectrim':              [vectrim, [1, 2]],\n            'matget':               [matget, 3],\n            'matset':               [matset, 4],\n            'matgetrow':            [matgetrow, 2],\n            'matsetrow':            [matsetrow, 3],\n            'matgetcol':            [matgetcol, 2],\n            'matsetcol':            [matsetcol, 3],\n            'rationalize':          [rationalize, 1],\n            'IF':                   [IF, 3],\n            'is_in':                [is_in, 2],\n            //imaginary support\n            'realpart':             [realpart, 1],\n            'imagpart':             [imagpart, 1],\n            'conjugate':            [conjugate, 1],\n            'arg':                  [arg, 1],\n            'polarform':            [polarform, 1],\n            'rectform':             [rectform, 1],\n            'sort':                 [sort, [1, 2]],\n            'integer_part':         [, 1],\n            'union':                [union, 2],\n            'contains':             [contains, 2],\n            'intersection':         [intersection, 2],\n            'difference':           [difference, 2],\n            'intersects':           [intersects, 2],\n            'is_subset':            [is_subset, 2],\n            //system support\n            'print':                [print, -1]\n        };\n\n        //error handler\n        this.error = err;\n        //this function is used to comb through the function modules and find a function given its name\n        var findFunction = function (fname) {\n            var fmodules = Settings.FUNCTION_MODULES,\n                    l = fmodules.length;\n            for (var i = 0; i < l; i++) {\n                var fmodule = fmodules[i];\n                if (fname in fmodule)\n                    return fmodule[fname];\n            }\n            err('The function ' + fname + ' is undefined!');\n        };\n\n        /**\n         * This method gives the ability to override operators with new methods.\n         * @param {String} which\n         * @param {Function} with_what\n         */\n        this.override = function (which, with_what) {\n            if (!bin[which])\n                bin[which] = [];\n            bin[which].push(this[which]);\n            this[which] = with_what;\n        };\n\n        /**\n         * Restores a previously overridden operator\n         * @param {String} what\n         */\n        this.restore = function (what) {\n            if (this[what])\n                this[what] = bin[what].pop();\n        };\n\n        /**\n         * This method is supposed to behave similarly to the override method but it does not override\n         * the existing function rather it only extends it\n         * @param {String} what\n         * @param {Function} with_what\n         * @param {boolean} force_call\n         */\n        this.extend = function (what, with_what, force_call) {\n            var _ = this,\n                    extended = this[what];\n            if (typeof extended === 'function' && typeof with_what === 'function') {\n                var f = this[what];\n                this[what] = function (a, b) {\n                    if (isSymbol(a) && isSymbol(b) && !force_call)\n                        return f.call(_, a, b);\n                    else\n                        return with_what.call(_, a, b, f);\n                };\n            }\n        };\n\n        /**\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\n         * a few extras. The most important thing is that that it gives a fname and\n         * an args property to the symbols in addition to changing its group to FN\n         * @param {String} fn_name\n         * @param {Array} params\n         * @returns {Symbol}\n         */\n        this.symfunction = function (fn_name, params) {\n            //call the proper function and return the result;\n            var f = new Symbol(fn_name);\n            f.group = FN;\n            if (typeof params === 'object')\n                params = [].slice.call(params);//ensure an array\n            f.args = params;\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\n            f.updateHash();\n            return f;\n        };\n\n        /**\n         * An internal function call for the Parser. This will either trigger a real\n         * function call if it can do so or just return a symbolic representation of the\n         * function using symfunction.\n         * @param {String} fn_name\n         * @param {Array} args\n         * @param {int} allowed_args\n         * @returns {Symbol}\n         */\n        this.callfunction = function (fn_name, args, allowed_args) {\n            var fn_settings = functions[fn_name];\n\n            if (!fn_settings)\n                err('Nerdamer currently does not support the function ' + fn_name);\n\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\n                    fn = fn_settings[0], //get the mapped function\n                    retval;\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\n            //an array so make sure to wrap the argument in an array.\n            if (!(args instanceof Array))\n                args = args !== undefined ? [args] : [];\n\n            if (num_allowed_args !== -1) {\n                var is_array = isArray(num_allowed_args),\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\n                        num_args = args.length;\n\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\n\n                if (num_args < min_args)\n                    err(format(error_msg, 'minimum', min_args, num_args));\n                if (num_args > max_args)\n                    err(format(error_msg, 'maximum', max_args, num_args));\n            }\n\n            /*\n             * The following are very important to the how nerdamer constructs functions!\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\n             *     they are expecting a symbolic output.\n             */\n            //check if arguments are all numers\n            var numericArgs = allNumbers(args);\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\n            if (Settings.USE_BIG && numericArgs) {\n                retval = Big[fn_name].apply(undefined, args);\n            }\n            else {\n                if (!fn) {\n                    //Remember assumption 1. No function defined so it MUST be numeric in nature\n                    fn = findFunction(fn_name);\n                    if (Settings.PARSE2NUMBER && numericArgs)\n                        retval = bigConvert(fn.apply(fn, args));\n                    else\n                        retval = _.symfunction(fn_name, args);\n                }\n                else {\n                    //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\n                    retval = fn.apply(fn_settings[2], args);\n                }\n            }\n\n            return retval;\n        };\n        /**\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\n         * substituting spaces for multiplication\n         */\n        this.operator_filter_regex = (function () {\n            //we only want the operators which are singular since those are the ones\n            //that nerdamer uses anyway\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\n                if (x.length === 1)\n                    return x;\n            }).join('\\\\');\n            //create a regex which captures all spaces between characters except those\n            //have an operator on one end\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\n        })();\n\n        /**\n         * Replaces nerdamer.setOperator\n         * @param {object} operator\n         * @param {boolean} shift\n         */\n        this.setOperator = function (operator, action, shift) {\n            var name = operator.operator; //take the name to be the symbol\n            operators[name] = operator;\n            if(action)\n                this[operator.action] = action;\n            //make the parser aware of the operator\n            _[name] = operator.operation;\n            //make the action available to the parser if infix\n            if (!operator.action &&!(operator.prefix || operator.postif)) {\n                operator.action = name;\n            }\n            //if this operator is exclusive then all successive operators should be shifted\n            if (shift === 'over' || shift === 'under') {\n                var precedence = operator.precedence;\n\n                for (var x in operators) {\n                    var o = operators[x];\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\n                    if (condition)\n                        o.precedence++;\n                }\n                ;\n            }\n        };\n\n        /**\n         * Gets an opererator by its symbol\n         * @param {String} operator\n         * @returns {Object}\n         */\n        this.getOperator = function(operator) {\n            return operators[operator];\n        };\n\n        this.aliasOperator = function(o, n) {\n            var t = {};\n            var operator = operators[o];\n            //copy everything over to the new operator\n            for(var x in operator) {\n                t[x] = operator[x];\n            }\n            //update the symbol\n            t.operator = n;\n\n            this.setOperator(t);\n        };\n\n        /**\n         * Returns the list of operators. Caution! Can break parser!\n         * @returns {object}\n         */\n        this.getOperators = function () {\n            //will replace this with some cloning action in the future\n            return operators;\n        };\n\n        this.getBrackets = function () {\n            return brackets;\n        };\n        /*\n         * Preforms preprocessing on the string. Useful for making early modification before\n         * sending to the parser\n         * @param {String} e\n         */\n        var prepare_expression = function (e) {\n            /*\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\n             * a side-by-side close and open parenthesis\n             */\n            e = String(e);\n            //apply preprocessors\n            for (var i = 0; i < preprocessors.actions.length; i++)\n                e = preprocessors.actions[i].call(this, e);\n\n            /* //NO LONGER NEEDED SINCE IMPLIED MULTIPLICATION IS NOW HANDLED LATER IN TOKENIZER\n            var match;\n            //add support for spaces between variables\n            while (true) {\n                match = _.operator_filter_regex.exec(e);\n                if (!match)\n                    break;\n                try {\n                    var a = match[1],\n                            b = match[2];\n                    validateName(a);\n                    validateName(b);\n                    e = e.replace(match[0], a + '*' + b);\n                }\n                catch (e) {\n                    break;\n                }\n            }\n            */\n\n            //e = e.split(' ').join('');//strip empty spaces\n            //replace multiple spaces with one space\n            e = e.replace(/\\s+/g, ' ');\n\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\n            if(/e/gi.test(e)) {\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\n                    return scientificToDecimal(x);\n                });\n            }\n            //replace scientific numbers\n\n            //allow omission of multiplication after coefficients\n            e = e.replace(/([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi, function () {\n                var str = arguments[4],\n                        group1 = arguments[1],\n                        group2 = arguments[2],\n                        start = arguments[3],\n                        first = str.charAt(start),\n                        before = '',\n                        d = '*';\n                if (!first.match(/[\\+\\-\\/\\*]/))\n                    before = str.charAt(start - 1);\n                if (before.match(/[a-z]/i))\n                    d = '';\n                return group1 + d + group2;\n            })\n            .replace(/([a-z0-9_]+)/gi, function (match, a) {\n                if (Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\n                    if (!isNaN(a))\n                        return a;\n                    return a.split('').join('*');\n                }\n                return a;\n            })\n            //allow omission of multiplication sign between brackets\n            .replace(/\\)\\(/g, ')*(') || '0';\n            //replace x(x+a) with x*(x+a)\n            while (true) {\n                var e_org = e; //store the original\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\n                    var g1 = a || c,\n                            g2 = b || d;\n                    if (g1 in functions) //create a passthrough for functions\n                        return g1 + g2;\n                    return g1 + '*' + g2;\n                });\n                //if the original equals the replace we're done\n                if (e_org === e)\n                    break;\n            }\n            return e;\n        };\n        //delay setting of constants until Settings is ready\n        this.initConstants = function () {\n            this.CONSTANTS = {\n                E: new Symbol(Settings.E),\n                PI: new Symbol(Settings.PI)\n            };\n        };\n        /*\n         * Debugging method used to better visualize vector and arrays\n         * @param {object} o\n         * @returns {String}\n         */\n        this.pretty_print = function (o) {\n            if (Array.isArray(o)) {\n                var s = o.map(x => _.pretty_print(x)).join(', ');\n                if (o.type === 'vector')\n                    return 'vector<' + s + '>';\n                return '(' + s + ')';\n            }\n            return o.toString();\n        };\n        this.peekers = {\n            pre_operator: [],\n            post_operator: [],\n            pre_function: [],\n            post_function: []\n        };\n\n        this.callPeekers = function(name) {\n\t\t\tif (Settings.callPeekers) {\n\t\t\t\tvar peekers = this.peekers[name];\n\t\t\t\t//remove the first items and stringify\n\t\t\t\tvar args = arguments2Array(arguments).slice(1).map(stringify);\n\t\t\t\t//call each one of the peekers\n\t\t\t\tfor(var i=0; i<peekers.length; i++) {\n\t\t\t\t\tpeekers[i].apply(null, args);\n\t\t\t\t}\n\t\t\t}\n        };\n        /*\n         * Tokenizes the string\n         * @param {String} e\n         * @returns {Token[]}\n         */\n        this.tokenize = function (e) {\n            //cast to String\n            e = String(e);\n            //remove multiple white spaces and spaces at beginning and end of string\n            e = e.trim().replace(/\\s+/g, ' ');\n            //remove spaces before and after brackets\n            for (var x in brackets) {\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\n                e = e.replace(regex, x);\n            }\n\n            var col = 0; //the column position\n            var L = e.length; //expression length\n            var lpos = 0; //marks beginning of next token\n            var tokens = []; //the tokens container\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\n            var depth = 0;\n            var open_brackets = [];\n            var has_space = false; //marks if an open space character was found\n            var SPACE = ' ';\n            var EMPTY_STRING = '';\n            var COMMA = ',';\n            var MINUS = '-';\n            var MULT = '*';\n            //Possible source of bug. Review\n            /*\n             //gets the next space\n             var next_space = function(from) {\n             for(var i=from; i<L; i++) {\n             if(e.charAt(i) === ' ')\n             return i;\n             }\n\n             return L; //assume the end of the string instead\n             };\n             */\n            /**\n             * Adds a scope to tokens\n             * @param {String} scope_type\n             * @param {int} column\n             * @returns {undefined}\n             */\n            var addScope = function (scope_type, column) {\n                var new_scope = []; //create a new scope\n                if (scope_type !== undefined) {\n                    new_scope.type = scope_type;\n                }\n                new_scope.column = column; //mark the column of the scope\n                scopes.push(new_scope); //add it to the list of scopes\n                target.push(new_scope); //add it to the tokens list since now it's a scope\n                target = new_scope; //point to it\n                depth++; //go down one in scope\n            };\n            /**\n             * Goes up in scope by one\n             * @returns {undefined}\n             */\n            var goUp = function () {\n                scopes.pop(); //remove the scope from the scopes stack\n                target = scopes[--depth]; //point the above scope\n            };\n            /**\n             * Extracts all the operators from the expression string starting at postion start_at\n             * @param {int} start_at\n             * @returns {String}\n             */\n            var get_operator_str = function (start_at) {\n                start_at = start_at !== undefined ? start_at : col;\n                //mark the end of the operator as the start since we're just going\n                //to be walking along the string\n                var end = start_at + 1;\n                //just keep moving along\n                while (e.charAt(end++) in operators) {\n                }\n                //remember that we started at one position ahead. The beginning operator is what triggered\n                //this function to be called in the first place. String.CharAt is zero based so we now\n                //have to correct two places. The initial increment + the extra++ at the end of end during\n                //the last iteration.\n                return e.substring(start_at, end - 1);\n            };\n            /**\n             * Breaks operator up in to several different operators as defined in operators\n             * @param {String} operator_str\n             * @returns {String[]}\n             */\n            var chunkify = function (operator_str) {\n                var start = col - operator_str.length; //start of operator\n                var _operators = [];\n                var operator = operator_str.charAt(0);\n                //grab the largest possible chunks but start at 2 since we already know\n                //that the first character is an operator\n\n                for (var i = 1, L = operator_str.length; i < L; i++) {\n                    var ch = operator_str.charAt(i);\n                    var o = operator + ch;\n                    //since the operator now is undefined then the last operator\n                    //was the largest possible combination.\n                    if (!(o in operators)) {\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                        operator = ch;\n                    }\n                    else\n                        operator = o;//now the operator is the larger chunk\n                }\n                //add the last operator\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\n                return _operators;\n            };\n\n            /**\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\n             * @param {int} at\n             * @param {String} token\n             * @returns {undefined}\n             */\n            var add_token = function (at, token) {\n                //grab the token if we're not supplied one\n                if (token === undefined)\n                    token = e.substring(lpos, at);\n                //only add it if it's not an empty string\n                if (token in _.units)\n                    target.push(new Token(token, Token.UNIT, lpos));\n                else if (token !== '')\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\n            };\n            /**\n             * Adds a function to the output\n             * @param {String} f\n             * @returns {undefined}\n             */\n            var add_function = function (f) {\n                target.push(new Token(f, Token.FUNCTION, lpos));\n            };\n            /**\n             * Tokens are found between operators so this marks the location of where the last token was found\n             * @param {int} position\n             * @returns {undefined}\n             */\n            var set_last_position = function (position) {\n                lpos = position + 1;\n            };\n            /**\n             * When a operator is found and added, especially a combo operator, then the column location\n             * has to be adjusted to the end of the operator\n             * @returns {undefined}\n             */\n            var adjust_column_position = function () {\n                lpos = lpos + operator_str.length - 2;\n                col = lpos - 1;\n            };\n            for (; col < L; col++) {\n                var ch = e.charAt(col);\n                if (ch in operators) {\n                    add_token(col);\n                    //is the last token numeric?\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\n                    //is this character multiplication?\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\n                    //if we're in a new scope then go up by one but if the space\n                    //is right befor an operator then it makes no sense to go up in scope\n                    //consider sin -x. The last position = current position at the minus sign\n                    //this means that we're going for sin(x) -x which is wrong\n                    //Ignore comma since comma is still part of the existing scope.\n                    if (has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\n                        has_space = false;\n                        goUp();\n                    }\n                    //mark the last position that a\n                    set_last_position(col + 1);\n                    var operator_str = get_operator_str(col);\n\n                    adjust_column_position();\n                    target.push.apply(target, chunkify(operator_str));\n                }\n                else if (ch in brackets) {\n                    var bracket = brackets[ch];\n\n                    if (bracket.is_open) {\n                        //mark the bracket\n                        open_brackets.push([bracket, lpos]);\n                        var f = e.substring(lpos, col);\n                        if (f in functions) {\n                            add_function(f);\n                        }\n                        else if (f !== '') {\n                            //assume multiplication\n                            //TODO: Add the multiplication to stack\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\n                        }\n                        //go down one in scope\n                        addScope(bracket.maps_to, col);\n                    }\n                    else if (bracket.is_close) {\n                        //get the matching bracket\n                        var pair = open_brackets.pop();\n                        //throw errors accordingly\n                        //missing open bracket\n                        if (!pair)\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\n                        //incorrect pair\n                        else if (pair[0].id !== bracket.id - 1)\n                            throw new ParityError('Parity error');\n\n                        add_token(col);\n                        goUp();\n                    }\n                    set_last_position(col);\n                }\n                else if (ch === SPACE) {\n                    var prev = e.substring(lpos, col); //look back\n                    var nxt = e.charAt(col+1); //look forward\n                    if (has_space) {\n\n                        if (prev in operators) {\n                            target.push(new Token(prev, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, prev);\n                            //we're at the closing space\n                            goUp(); //go up in scope if we're at a space\n\n                            //assume multiplication if it's not an operator except for minus\n                            var is_operator = nxt in operators;\n\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                            }\n                        }\n                        has_space = false; //remove the space\n                    }\n                    else {\n                        //we're at the closing space\n                        //check if it's a function\n                        var f = e.substring(lpos, col);\n\n                        if (f in functions) {\n                            //there's no need to go up in scope if the next character is an operator\n                            has_space = true; //mark that a space was found\n                            add_function(f);\n                            addScope();\n                        }\n                        else if (f in operators) {\n                            target.push(new Token(f, Token.OPERATOR, col));\n                        }\n                        else {\n                            add_token(undefined, f);\n                            //peek ahead to the next character\n                            var nxt = e.charAt(col+1);\n\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\n                            //is not an operator\n\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\n                                target.push(new Token(MULT, Token.OPERATOR, col));\n                        }\n                        //Possible source of bug. Review\n                        /*\n                         //space can mean multiplication so add the symbol if the is encountered\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\n                         var next = e.charAt(col+1);\n                         var next_is_operator = next in operators;\n                         var ns = next_space(col+1);\n                         var next_word = e.substring(col+1, ns);\n                         //the next can either be a prefix operator or no operator\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\n                         target.push(new Token('*', Token.OPERATOR, col));\n                         }\n                         */\n                    }\n                    set_last_position(col); //mark this location\n                }\n            }\n            //check that all brackets were closed\n            if (open_brackets.length) {\n                var b = open_brackets.pop();\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\n            }\n            //add the last token\n            add_token(col);\n\n            return tokens;\n        };\n        /*\n         * Puts token array in Reverse Polish Notation\n         * @param {Token[]} tokens\n         * @returns {Token[]}\n         */\n        this.toRPN = function (tokens) {\n            var fn = tokens.type;\n            var l = tokens.length, i;\n            var output = [];\n            var stack = [];\n            var prefixes = [];\n            var collapse = function (target, destination) {\n                while (target.length)\n                    destination.push(target.pop());\n            };\n            //mark all the prefixes and add them to the stack\n            for (i = 0; i < l; i++) {\n                var token = tokens[i];\n                if (token.type !== Token.OPERATOR)\n                    break;\n                if (!token.prefix)\n                    throw new OperatorError('Not a prefix operator');\n                token.is_prefix = true;\n                stack.push(token);\n            }\n            //begin with remaining tokens\n            for (; i < l; i++) {\n                var e = tokens[i];\n                if (e.type === Token.OPERATOR) {\n                    var operator = e;\n\n\t\t    //create the option for the operator being overloaded\n                    if (operator.overloaded) {\n                        var next = tokens[i + 1];\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\n                        if (next && next.type === Token.VARIABLE_OR_LITERAL) {\n                            operator.postfix = false;\n                            //override the original function with the overload function\n                            operator.action = operator.overloadAction;\n\t\t\t    operator.leftAssoc = operator.overloadLeftAssoc;\n                        }\n                    }\n\n                    //if the stack is not empty\n                    while (stack.length) {\n                        var last = stack[stack.length - 1];\n                        //if (there is an operator at the top of the operator stack with greater precedence)\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\n                        if (!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\n                            break;\n                        output.push(stack.pop());\n                    }\n\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\n                    if ((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\n                        operator.action = operator.vectorFn;\n\n\n                    //if the operator is a postfix operator then we're ready to go since it belongs\n                    //to the preceding token. However the output cannot be empty. It must have either\n                    //an operator or a variable/literal\n                    if (operator.postfix) {\n                        var previous = tokens[i - 1];\n                        if (!previous)\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\n                        else if (previous.type === Token.OPERATOR) {\n                            //a postfix can only be followed by a postfix\n                            if (!previous.postfix)\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\n                        }\n                    }\n                    else {\n                        //we must be at an infix so point the operator this\n                        do {\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\n                            var next = tokens[i + 1]; //take a look ahead\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\n                            if (next_is_operator) {\n                                //if it's not a prefix operator then it not in the right place\n                                if (!next.prefix) {\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\n                                }\n                                //mark it as a confirmed prefix\n                                next.is_prefix = true;\n                                //add it to the prefixes\n                                prefixes.push(next);\n                                i++;\n                            }\n                        }\n                        while (next_is_operator)\n                    }\n\n                    //if it's a prefix it should be on a special stack called prefixes\n                    //we do this to hold on to prefixes because of left associative operators.\n                    //they belong to the variable/literal but if placed on either the stack\n                    //or output there's no way of knowing this. I might be wrong so I welcome\n                    //any discussion about this.\n\n                    if (operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\n                        prefixes.push(operator);\n                    else\n                        stack.push(operator);\n                    //move the prefixes to the stack\n                    while (prefixes.length) {\n                        if (operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\n                            stack.push(prefixes.pop());\n                        else\n                            break;\n                    }\n                }\n                else if (e.type === Token.VARIABLE_OR_LITERAL) {\n                    //move prefixes to stack at beginning of scope\n                    if (output.length === 0)\n                        collapse(prefixes, stack);\n                    //done with token\n                    output.push(e);\n                    var last_on_stack = stack[stack.length - 1];\n                    //then move all the prefixes to the output\n                    if (!last_on_stack || !last_on_stack.leftAssoc)\n                        collapse(prefixes, output);\n                }\n                else if (e.type === Token.FUNCTION) {\n                    stack.push(e);\n                }\n                else if (e.type === Token.UNIT) {\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\n                    output.push(e);\n                }\n                //if it's an additonal scope then put that into RPN form\n                if (Array.isArray(e)) {\n                    output.push(this.toRPN(e));\n                    if (e.type)\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\n\n                }\n            }\n            //collapse the remainder of the stack and prefixes to output\n            collapse(stack, output);\n            collapse(prefixes, output);\n\n            return output;\n        };\n        /*\n         * Parses the tokens\n         * @param {Tokens[]} rpn\n         * @param {object} substitutions\n         * @returns {Symbol}\n         */\n        this.parseRPN = function (rpn, substitutions) {\n            try {\n                //default substitutions\n                substitutions = substitutions || {};\n                //prepare the substitutions.\n                //we first parse them out as-is\n                for (var x in substitutions)\n                    substitutions[x] = _.parse(substitutions[x], {});\n                //Although technically constants,\n                //pi and e are only available when evaluating the expression so add to the subs.\n                //Doing this avoids rounding errors\n                //link e and pi\n                if (Settings.PARSE2NUMBER) {\n                    //use the value provided if the individual for some strange reason prefers this.\n                    //one reason could be to sub e but not pi or vice versa\n                    if (!('e' in substitutions))\n                        substitutions.e = new Symbol(Settings.E);\n                    if ((!('pi' in substitutions)))\n                        substitutions.pi = new Symbol(Settings.PI);\n                }\n\n                var Q = [];\n                for (var i = 0, l = rpn.length; i < l; i++) {\n                    var e = rpn[i];\n\n                    //Arrays indicate a new scope so parse that out\n                    if (Array.isArray(e)) {\n                        e = this.parseRPN(e, substitutions);\n                    }\n\n                    if(e) {\n                        if (e.type === Token.OPERATOR) {\n                            if (e.is_prefix || e.postfix)\n                                //resolve the operation assocated with the prefix\n                                Q.push(e.operation(Q.pop()));\n                            else {\n                                var b = Q.pop();\n                                var a = Q.pop();\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\n                                if (typeof a === 'undefined')\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\n\n                                var is_comma = e.action === 'comma';\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\n                                if(a instanceof Set && !is_comma)\n                                    a = Vector.fromSet(a);\n\n                                if(b instanceof Set && !is_comma)\n                                    b = Vector.fromSet(b);\n\n                                //call all the pre-operators\n                                this.callPeekers('pre_operator', a, b, e);\n\n                                var ans = _[e.action](a, b);\n\n                                //call all the pre-operators\n                                this.callPeekers('post_operator', ans, a, b, e);\n\n                                Q.push(ans);\n                            }\n                        }\n                        else if (e.type === Token.FUNCTION) {\n                            var args = Q.pop();\n                            var parent = args.parent; //make a note of the parent\n                            if (!(args instanceof Collection))\n                                args = Collection.create(args);\n                            //the return value may be a vector. If it is then we check\n                            //Q to see if there's another vector on the stack. If it is then\n                            //we check if has elements. If it does then we know that we're dealing\n                            //with an \"getter\" object and return the requested values\n\n                            //call the function. This is the _.callfunction method in nerdamer\n                            //call the function. This is the _.callfunction method in nerdamer\n                            var fn_name = e.value;\n                            var fn_args = args.getItems();\n\n                            //call the pre-function peekers\n                            this.callPeekers('pre_function', fn_name, fn_args);\n\n                            var ret = _.callfunction(fn_name, fn_args);\n\n                            //call the post-function peekers\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\n\n                            var last = Q[Q.length - 1];\n                            var next = rpn[i + 1];\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\n\n                            if (!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\n                                //remove the item from the queue\n                                var item = Q.pop();\n\n                                var getter = ret.elements[0];\n                                //check if it's symbolic. If so put it back and add the item to the stack\n                                if (!getter.isConstant()) {\n                                    item.getter = getter;\n                                    Q.push(item);\n                                    Q.push(ret);\n                                }\n                                else if (getter instanceof Slice) {\n                                    //if it's a Slice return the slice\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\n                                }\n                                else {\n                                    var index = Number(getter);\n                                    var il = item.elements.length;\n                                    //support for negative indices\n                                    if (index < 0)\n                                        index = il + index;\n                                    //it it's still out of bounds\n                                    if (index < 0 || index >= il) //index should no longer be negative since it's been reset above\n                                        //range error\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\n\n                                    var element = item.elements[index];\n                                    //cyclic but we need to mark this for future reference\n                                    item.getter = index;\n                                    element.parent = item;\n\n                                    Q.push(element);\n                                }\n                            }\n                            else {\n                                //extend the parent reference\n                                if(parent)\n                                    ret.parent = parent;\n                                Q.push(ret);\n                            }\n\n                        }\n                        else {\n                            var subbed;\n                            var v = e.value;\n\n                            if (v in Settings.ALIASES)\n                                e = _.parse(Settings.ALIASES[e]);\n                            //wrap it in a symbol if need be\n                            else if (e.type === Token.VARIABLE_OR_LITERAL)\n                                e = new Symbol(v);\n                            else if (e.type === Token.UNIT) {\n                                e = new Symbol(v);\n                                e.isUnit = true;\n                            }\n\n                            //make substitutions\n                            //Always constants first. This avoids the being overridden\n                            if (v in _.CONSTANTS) {\n                                subbed = e;\n                                e = new Symbol(_.CONSTANTS[v]);\n                            }\n                            //next substitutions. This allows declared variable to be overridden\n                            //check if the values match to avoid erasing the multiplier.\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\n                            else if (v in substitutions && v !== substitutions[v].value) {\n                                subbed = e;\n                                e = substitutions[v].clone();\n                            }\n                            //next declare variables\n                            else if (v in VARS) {\n                                subbed = e;\n                                e = VARS[v].clone();\n                            }\n                            //make notation of what it was before\n                            if (subbed)\n                                e.subbed = subbed;\n\n                            Q.push(e);\n                        }\n                    }\n                }\n\n                return Q[0];\n            }\n            catch(error) {\n                throw new ParseError(error.message+': '+e.column);\n            }\n        };\n        /**\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\n         * it right away. The operator functions are called when their respective operators are reached. For instance\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\n         * character of the string and placing the operators on the stack and values on the output. When an operator\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\n         * stack.\n         * @param {String} token\n         */\n\n        function Node(token) {\n            this.type = token.type;\n            this.value = token.value;\n            //the incoming token may already be a Node type\n            this.left = token.left;\n            this.right = token.right;\n        }\n\n        Node.prototype.toString = function () {\n            var left = this.left ? this.left.toString() + '---' : '';\n            var right = this.right ? '---' + this.right.toString() : '';\n            return left + '(' + this.value + ')' + right;\n        };\n\n        Node.prototype.toHTML = function (depth, indent) {\n            depth = depth || 0;\n            indent = typeof indent === 'undefined' ? 4 : indent;\n            var tab = function (n) {\n                return ' '.repeat(indent * n);\n            };\n            var html = '';\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\n            if (left || right) {\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\n            }\n            html += '';\n            return html;\n        };\n\n        this.tree = function (tokens) {\n            var Q = [];\n            for (var i = 0; i < tokens.length; i++) {\n                var e = tokens[i];\n                //Arrays indicate a new scope so parse that out\n                if (Array.isArray(e)) {\n                    e = this.tree(e);\n                    //if it's a comma then it's just arguments\n                    Q.push(e);\n                    continue;\n                }\n                if (e.type === Token.OPERATOR) {\n                    if (e.is_prefix || e.postfix) {\n                        //prefixes go to the left, postfix to the right\n                        var location = e.is_prefix ? 'left' : 'right';\n                        var last = Q.pop();\n                        e = new Node(e);\n                        e[location] = last;\n                        Q.push(e);\n                    }\n                    else {\n                        e = new Node(e);\n                        e.right = Q.pop();\n                        e.left = Q.pop();\n                        Q.push(e);\n                    }\n                }\n                else if (e.type === Token.FUNCTION) {\n                    e = new Node(e);\n                    var args = Q.pop();\n                    e.right = args;\n                    if (e.value === 'object') {\n                        //check if Q has a value\n                        var last = Q[Q.length - 1];\n                        if (last) {\n                            while (last.right) {\n                                last = last.right;\n                            }\n                            last.right = e;\n                            continue;\n                        }\n                    }\n\n                    Q.push(e);\n                }\n                else {\n                    Q.push(new Node(e));\n                }\n            }\n\n            return Q[0];\n        };\n        this.parse = function (e, substitutions) {\n            e = prepare_expression(e);\n            substitutions = substitutions || {};\n            //three passes but easier to debug\n            var tokens = this.tokenize(e);\n            var rpn = this.toRPN(tokens);\n            return this.parseRPN(rpn, substitutions);\n        };\n        /**\n         * TODO: Switch to Parser.tokenize for this method\n         * Reads a string into an array of Symbols and operators\n         * @param {String} expression_string\n         * @returns {Array}\n         */\n        this.toObject = function (expression_string) {\n            var objectify = function (tokens) {\n                var output = [];\n                for (var i = 0, l = tokens.length; i < l; i++) {\n                    var token = tokens[i];\n                    var v = token.value;\n                    if (token.type === Token.VARIABLE_OR_LITERAL) {\n                        output.push(new Symbol(v));\n                    }\n                    else if (token.type === Token.FUNCTION) {\n                        //jump ahead since the next object are the arguments\n                        i++;\n                        //create a symbolic function and stick it on output\n                        var f = _.symfunction(v, objectify(tokens[i]));\n                        f.isConversion = true;\n                        output.push(f);\n                    }\n                    else if (token.type === Token.OPERATOR) {\n                        output.push(v);\n                    }\n                    else {\n                        output.push(objectify(token));\n                    }\n                }\n\n                return output;\n            };\n            return objectify(_.tokenize(expression_string));\n        };\n        //helper method for toTeX\n        var chunkAtCommas = function (arr) {\n            var j, k = 0, chunks = [[]];\n            for (var j = 0, l = arr.length; j < l; j++) {\n                if (arr[j] === ',') {\n                    k++;\n                    chunks[k] = [];\n                }\n                else {\n                    chunks[k].push(arr[j]);\n                }\n            }\n            return chunks;\n        };\n        //helper method for toTeX\n        var rem_brackets = function (str) {\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\n                if (a)\n                    return a;\n                return str;\n            });\n        };\n        /*\n         * Convert expression or object to LaTeX\n         * @param {String} expression_or_obj\n         * @param {object} opt\n         * @returns {String}\n         */\n        this.toTeX = function (expression_or_obj, opt) {\n            opt = opt || {};\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\n                    TeX = [],\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\n\n            if (isArray(obj)) {\n                var nobj = [], a, b;\n                //first handle ^\n                for (var i = 0; i < obj.length; i++) {\n                    a = obj[i];\n\n                    if (obj[i + 1] === '^') {\n                        b = obj[i + 2];\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\n                        i += 2;\n                    }\n                    else\n                        nobj.push(a);\n                }\n                obj = nobj;\n            }\n\n            for (var i = 0, l = obj.length; i < l; i++) {\n                var e = obj[i];\n                //convert * to cdot\n                if (e === '*') {\n                    e = cdot;\n                }\n\n                if (isSymbol(e)) {\n                    if (e.group === FN) {\n                        var fname = e.fname, f;\n\n                        if (fname === SQRT)\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\n                        else if (fname === ABS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\n                        else if (fname === PARENTHESIS)\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        else if (fname === Settings.LOG10) {\n                            f = '\\\\'+Settings.LOG10_LATEX+'\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\n                        }\n                        else if (fname === 'integrate') {\n                            /* Retrive [Expression, x] */\n                            var chunks = chunkAtCommas(e.args);\n                            /* Build TeX */\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[1]);\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\n                        }\n                        else if (fname === 'defint') {\n                            var chunks = chunkAtCommas(e.args),\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\n                                    dx = this.toTeX(chunks[3]),\n                                    lb = this.toTeX(chunks[1]),\n                                    ub = this.toTeX(chunks[2]);\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\n\n                        }\n                        else if (fname === 'diff') {\n                            var chunks = chunkAtCommas(e.args);\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\n                            if (chunks.length === 1) {\n                                var vars = [];\n                                for (j = 0; j < chunks[0].length; j++) {\n                                    if (chunks[0][j].group === 3) {\n                                        vars.push(chunks[0][j].value);\n                                    }\n                                }\n                                vars.sort();\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\n                            }\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\n                            else if (chunks.length === 2) {\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\n                            }\n                            /* If we have more than 2 arguments, we assume we've got everything */\n                            else {\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\n                            }\n\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\n\n                        }\n                        else if (fname === 'sum' || fname === 'product') {\n                            // Split e.args into 4 parts based on locations of , symbols.\n                            var argSplit = [[], [], [], []], j = 0, i;\n                            for (i = 0; i < e.args.length; i++) {\n                                if (e.args[i] === ',') {\n                                    j++;\n                                    continue;\n                                }\n                                argSplit[j].push(e.args[i]);\n                            }\n                            // Then build TeX string.\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\n                        }\n                        else if (fname === 'limit') {\n                            var args = chunkAtCommas(e.args).map(function (x) {\n                                if (Array.isArray(x))\n                                    return _.toTeX(x.join(''));\n                                return _.toTeX(String(x));\n                            });\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\n                        }\n                        else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL)\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\n                        else {\n                            f = LaTeX.latex(e);\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\n                        }\n\n                        TeX.push(f);\n                    }\n                    else\n                        TeX.push(LaTeX.latex(e));\n                }\n                else if (isArray(e)) {\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\n                }\n                else {\n                    if (e === '/')\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\n                    else\n                        TeX.push(e);\n                }\n            }\n\n            return TeX.join(' ');\n        };\n\n//Parser.functions ==============================================================\n        /* Although parens is not a \"real\" function it is important in some cases when the\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\n         * as the parser will get rid of it at the first opportunity\n         */\n        function parens(symbol) {\n            if (Settings.PARSE2NUMBER) {\n                return symbol;\n            }\n            return _.symfunction('parens', [symbol]);\n        }\n\n        function abs(symbol) {\n\n            //|-∞| = ∞\n            if(symbol.isInfinity) {\n                return Symbol.infinity();\n            }\n            if (symbol.multiplier.lessThan(0))\n                symbol.multiplier.negate();\n\n            if (symbol.isImaginary()) {\n                var re = symbol.realpart();\n                var im = symbol.imagpart();\n                if (re.isConstant() && im.isConstant())\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\n            }\n            else if (isNumericSymbol(symbol) || even(symbol.power)) {\n                return symbol;\n            }\n\n            if (symbol.isComposite()) {\n                var ms = [];\n                symbol.each(function (x) {\n                    ms.push(x.multiplier);\n                });\n                var gcd = Math2.QGCD.apply(null, ms);\n                if (gcd.lessThan(0)) {\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\n                    symbol.distributeMultiplier();\n                }\n            }\n\n            //convert |n*x| to n*|x|\n            var m = _.parse(symbol.multiplier);\n            symbol.toUnitMultiplier();\n\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\n        }\n        /**\n         * The factorial function\n         * @param {Symbol} symbol\n         * @return {Symbol}\n         */\n        function factorial(symbol) {\n            var retval;\n            if (isVector(symbol)) {\n                var V = new Vector();\n                symbol.each(function (x, i) {\n                    //i start at one.\n                    V.set(i - 1, factorial(x));\n                });\n                return V;\n            }\n            if (isMatrix(symbol)) {\n                var M = new Matrix();\n                symbol.each(function (x, i, j) {\n                    //i start at one.\n                    M.set(i, j, factorial(x));\n                });\n                return M;\n            }\n            if (Settings.PARSE2NUMBER && symbol.isConstant()) {\n                if (isInt(symbol)) {\n                    retval = Math2.bigfactorial(symbol);\n                }\n                else {\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\n                }\n\n                retval = bigConvert(retval);\n                return retval;\n            }\n            else if (symbol.isConstant()) {\n                var den = symbol.getDenom();\n                if (den.equals(2)) {\n                    var num = symbol.getNum();\n                    var a, b, c, n;\n\n                    if (!symbol.multiplier.isNegative()) {\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                    }\n                    else {\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\n                    }\n                    c = a.divide(b);\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\n                }\n            }\n            return _.symfunction(FACTORIAL, [symbol]);\n        }\n        ;\n        /**\n         * Returns the continued fraction of a number\n         * @param {Symbol} symbol\n         * @param {Symbol} n\n         * @returns {Symbol}\n         */\n        function continued_fraction(symbol, n) {\n            var _symbol = evaluate(symbol);\n            if (_symbol.isConstant()) {\n                var cf = Math2.continuedFraction(_symbol, n);\n                //convert the fractions array to a new Vector\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\n                    return new Symbol(x);\n                }));\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\n            }\n            return _.symfunction('continued_fraction', arguments);\n        }\n        /**\n         * Returns the error function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function erf(symbol) {\n            var _symbol = evaluate(symbol);\n\n            if (_symbol.isConstant()) {\n                return Math2.erf(_symbol);\n            }\n            else if(_symbol.isImaginary()) {\n                return complex.erf(symbol);\n            }\n            return _.symfunction('erf', arguments);\n        }\n        ;\n        /**\n         * The mod function\n         * @param {Symbol} symbol1\n         * @param {Symbol} symbol2\n         * @returns {Symbol}\n         */\n        function mod(symbol1, symbol2) {\n            if (symbol1.isConstant() && symbol2.isConstant()) {\n                var retval = new Symbol(1);\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\n                return retval;\n            }\n            //try to see if division has remainder of zero\n            var r = _.divide(symbol1.clone(), symbol2.clone());\n            if (isInt(r))\n                return new Symbol(0);\n            return _.symfunction('mod', [symbol1, symbol2]);\n        }\n        /**\n         * A branghing function\n         * @param {Boolean} condition\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        function IF(condition, a, b) {\n            if (typeof condition !== 'boolean')\n                if (isNumericSymbol(condition))\n                    condition = !!Number(condition);\n            if (condition)\n                return a;\n            return b;\n        }\n        /**\n         *\n         * @param {Matrix|Vector|Set|Collection} obj\n         * @param {Symbol} item\n         * @returns {Boolean}\n         */\n        function is_in(obj, item) {\n            if(isMatrix(obj)) {\n                for(var i=0, l=obj.rows(); i<l; i++) {\n                    for(var j=0, l2=obj.cols(); j<l2; j++) {\n                        var element = obj.elements[i][j];\n                        if(element.equals(item))\n                            return new Symbol(1);\n                    }\n                }\n            }\n            else if(obj.elements) {\n                for(var i=0, l=obj.elements.length; i<l; i++) {\n                    if(obj.elements[i].equals(item))\n                        return new Symbol(1);\n                }\n            }\n\n            return new Symbol(0);\n        }\n\n        /**\n         * A symbolic extension for sinc\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sinc(symbol) {\n            if (Settings.PARSE2NUMBER) {\n                if (symbol.isConstant()) {\n                    return new Symbol(Math2.sinc(symbol));\n                }\n                return _.parse(format('sin({0})/({0})', symbol));\n            }\n            return _.symfunction('sinc', [symbol]);\n        }\n\n        /**\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\n         * Thanks @ Happypig375\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function exp(symbol) {\n            return _.parse(format('e^({0})', symbol));\n        }\n\n        /**\n         * Converts value degrees to radians\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function radians(symbol) {\n            return _.parse(format('({0})*pi/180', symbol));\n        }\n\n        /**\n         * Converts value from radians to degrees\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function degrees(symbol) {\n            return _.parse(format('({0})*180/pi', symbol));\n        }\n\n        function nroots(symbol) {\n            var a, b;\n            if(symbol.group === FN && symbol.fname === '') {\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\n                b = _.parse(symbol.power);\n            }\n            else if(symbol.group === P) {\n                a = _.parse(symbol.value);\n                b = _.parse(symbol.power);\n            }\n\n            if(a && b && a.group === N && b.group === N) {\n                var _roots = [];\n                var parts = Symbol.toPolarFormArray(symbol);\n                var r = _.parse(a).abs().toString();\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\n                var x = arg(a).toString();\n                var n = b.multiplier.den.toString();\n                var p = b.multiplier.num.toString();\n\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\n                for(var i=0; i<n; i++) {\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\n                }\n                return Vector.fromArray(_roots);\n            }\n            else if(symbol.isConstant(true)) {\n                var sign = symbol.sign();\n                var x = evaluate(symbol.abs());\n                var root = _.sqrt(x);\n\n                var _roots = [root.clone(), root.negate()];\n\n                if(sign < 0)\n                    _roots = _roots.map(function(x) {\n                        return _.multiply(x, Symbol.imaginary());\n                    });\n            }\n            else {\n                _roots = [_.parse(symbol)];\n            }\n\n            return Vector.fromArray(_roots);\n        }\n\n        /**\n         * Rationalizes a symbol\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function rationalize(symbol) {\n            if(symbol.isComposite()) {\n                var retval = new Symbol(0);\n                var num, den, retnum, retden, a, b, n, d;\n                symbol.each(function(x) {\n                    num = x.getNum();\n                    den = x.getDenom();\n                    retnum = retval.getNum();\n                    retden = retval.getDenom();\n                    a = _.multiply(den, retnum);\n                    b = _.multiply(num, retden);\n                    n = _.expand(_.add(a, b));\n                    d = _.multiply(retden, den);\n                    retval = _.divide(n, d);\n                }, true);\n\n                return retval;\n            }\n            return symbol;\n        }\n\n        /**\n         * The square root function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function sqrt(symbol) {\n            if (symbol.fname === '' && symbol.power.equals(1))\n                symbol = symbol.args[0];\n\n            var is_negative = symbol.multiplier.sign() < 0;\n\n            if (Settings.PARSE2NUMBER) {\n                if (symbol.isConstant() && !is_negative) {\n                    return new Symbol(Math.sqrt(symbol.multiplier.toDecimal()));\n                }\n                else if (symbol.isImaginary()) {\n                    return complex.sqrt(symbol);\n                }\n                else if(symbol.group === S) {\n                    return _.symfunction('sqrt', [symbol]);\n                }\n            }\n\n            var img, retval,\n                    isConstant = symbol.isConstant();\n\n            if (symbol.group === CB && symbol.isLinear()) {\n                var m = sqrt(Symbol(symbol.multiplier));\n                for (var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    m = _.multiply(m, sqrt(x));\n                }\n\n                retval = m;\n            }\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\n            else if (symbol.fname === SQRT) {\n                var s = symbol.args[0];\n                var ms = symbol.multiplier;\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\n                retval = s;\n                //grab the multiplier\n                if (!ms.equals(1))\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\n            }\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\n            //no need to keep sqrt(x^(1/3))\n            else if (!symbol.power.isInteger()) {\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\n                retval = symbol;\n            }\n            else if(symbol.multiplier < 0 && symbol.group === S) {\n                var a = _.parse(symbol.multiplier).negate();\n                var b = _.parse(symbol).toUnitMultiplier().negate();\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\n            }\n            else {\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\n                //to sqrt(a)*sqrt(b)^1 for better simplification\n                //the sign of the power\n                var sign = symbol.power.sign();\n                //remove the sign\n                symbol.power = symbol.power.abs();\n\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\n                //as a product\n                if (isConstant && symbol.multiplier.lessThan(0)) {\n                    img = Symbol.imaginary();\n                    symbol.multiplier = symbol.multiplier.abs();\n                }\n\n                var q = symbol.multiplier.toDecimal(),\n                        qa = Math.abs(q),\n                        t = Math.sqrt(qa);\n\n                var m;\n                //it's a perfect square so take the square\n                if (isInt(t)) {\n                    m = new Symbol(t);\n                }\n                else if (isInt(q)) {\n                    var factors = Math2.ifactor(q);\n                    var tw = 1;\n                    for (var x in factors) {\n                        var n = factors[x],\n                                nn = (n - (n % 2)); //get out the whole numbers\n                        if (nn) { //if there is a whole number ...\n                            var w = Math.pow(x, nn);\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\n                            q /= w; //reduce the number by the wholes\n                        }\n                    }\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\n                }\n                else {\n                    //reduce the numerator and denominator using prime factorization\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\n                    var r = [new Symbol(1), new Symbol(1)];\n                    var sq = [new Symbol(1), new Symbol(1)];\n                    for (var i = 0; i < 2; i++) {\n                        var n = c[i];\n                        //get the prime factors and loop through each.\n                        pfactor(n).each(function (x) {\n                            x = Symbol.unwrapPARENS(x);\n                            var b = x.clone().toLinear();\n                            var p = Number(x.power);\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\n                        });\n                    }\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\n                }\n\n\n                //strip the multiplier since we already took the sqrt\n                symbol = symbol.toUnitMultiplier(true);\n                //if the symbol is one just return one and not the sqrt function\n                if (symbol.isOne()) {\n                    retval = symbol;\n                }\n                else if (even(symbol.power.toString())) {\n                    //just raise it to the 1/2\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\n                }\n                else {\n                    retval = _.symfunction(SQRT, [symbol]);\n                }\n\n                //put back the sign that was removed earlier\n                if (sign < 0)\n                    retval.power.negate();\n\n                if (m)\n                    retval = _.multiply(m, retval);\n\n                if (img)\n                    retval = _.multiply(img, retval);\n            }\n\n            if (is_negative && Settings.PARSE2NUMBER)\n                return _.parse(retval);\n\n            return retval;\n        }\n\n        /**\n         * The cube root function\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function cbrt(symbol) {\n            if(!symbol.isConstant(true)) {\n                var retval;\n\n                var n = symbol.power/3;\n                //take the cube root of the multplier\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1/3));\n                //strip the multiplier\n                var sym = symbol.toUnitMultiplier();\n\n                //simplify the power\n                if(isInt(n)) {\n                    retval = _.pow(sym.toLinear(), _.parse(n));\n                }\n                else {\n                    if(sym.group === CB) {\n                        retval = new Symbol(1);\n                        sym.each(function(x) {\n                            retval = _.multiply(retval, cbrt(x));\n                        });\n                    }\n                    else {\n                        retval = _.symfunction('cbrt', [sym]);\n                    }\n                }\n\n                return _.multiply(m, retval);\n            }\n            return nthroot(symbol, new Symbol(3));\n        }\n\n        function scientific(symbol, sigfigs) {\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\n            //display this\n            symbol.scientific = sigfigs || 10;\n            return symbol;\n        }\n\n        /**\n         *\n         * @param {Symbol} num - the number being raised\n         * @param {Symbol} p - the exponent\n         * @param {type} prec - the precision wanted\n         * @param {bool} asbig - true if a bigDecimal is wanted\n         * @returns {Symbol}\n         */\n        function nthroot(num, p, prec, asbig) {\n            //clone p and convert to a number if possible\n            p = evaluate(_.parse(p));\n\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\n            if(p.equals(0)) {\n                throw new UndefinedError('Unable to calculate nthroots of zero');\n            }\n\n            //Stop computation if it negative and even since we have an imaginary result\n            if(num < 0 && even(p))\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\n\n            //return non numeric values unevaluated\n            if(!num.isConstant(true)) {\n                return _.symfunction('nthroot', arguments);\n            }\n\n            //evaluate numeric values\n            if(num.group !== N) {\n                num = evaluate(num);\n            }\n\n            //default is to return a big value\n            if (typeof asbig === 'undefined')\n                asbig = true;\n\n            prec = prec || 25;\n\n            var sign = num.sign();\n            var retval;\n            var ans;\n\n            if(sign < 0) {\n                num = abs(num); //remove the sign\n            }\n\n            if (isInt(num) && p.isConstant()) {\n\n                if (num < 18446744073709551616) {\n                    //2^64\n                    ans = Frac.create(Math.pow(num, 1 / p));\n                }\n                else {\n                    ans = Math2.nthroot(num, p);\n                }\n\n                var retval;\n                if (asbig) {\n                    retval =  new Symbol(ans);\n                }\n                retval = new Symbol(ans.toDecimal(prec));\n\n                return _.multiply(new Symbol(sign), retval);\n            }\n        }\n\n        function pfactor(symbol) {\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\n            //More Big Number issues >:(\n            if (symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\n                return symbol;\n            //Fix issue #298\n            if (symbol.equals(Math.PI))\n                return new Symbol(Math.PI);\n            //evaluate the symbol to merge constants\n            symbol = evaluate(symbol.clone());\n\n\n            if (symbol.isConstant()) {\n                var retval = new Symbol(1);\n                var m = symbol.toString();\n                if (isInt(m)) {\n                    var factors = Math2.ifactor(m);\n                    for (var factor in factors) {\n                        var p = factors[factor];\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\n                    }\n                }\n                else {\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\n                }\n            }\n            else\n                retval = _.symfunction('pfactor', arguments);\n            return retval;\n        }\n\n        /**\n         * Get's the real part of a complex number. Return number if real\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function realpart(symbol) {\n            return symbol.realpart();\n        }\n\n        /**\n         * Get's the imaginary part of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function imagpart(symbol) {\n            return symbol.imagpart();\n        }\n\n        /**\n         * Computes the conjugate of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function conjugate(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if (re.isConstant() && im.isConstant())\n                return new Symbol(Math.atan2(im, re));\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the arugment of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function arg(symbol) {\n            var re = symbol.realpart();\n            var im = symbol.imagpart();\n            if (re.isConstant() && im.isConstant()) {\n                if(im.equals(0) && re.equals(-1)) {\n                    return _.parse('pi');\n                }\n                else if(im.equals(1) && re.equals(0)) {\n                    return _.parse('pi/2');\n                }\n                else if(im.equals(1) && re.equals(1)) {\n                    return _.parse('pi/4');\n                }\n                return new Symbol(Math.atan2(im, re));\n            }\n            return _.symfunction('atan2', [im, re]);\n        }\n\n        /**\n         * Returns the polarform of a complex number\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function polarform(symbol) {\n            var p, r, e, theta;\n            p = Symbol.toPolarFormArray(symbol);\n            theta = p[1];\n            r = p[0];\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\n            return _.multiply(r, e);\n        }\n\n        /**\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\n         * @param {Symbol} symbol\n         * @returns {Symbol}\n         */\n        function rectform(symbol) {\n            //TODO: e^((i*pi)/4)\n            var original = symbol.clone();\n            try {\n                var f, p, q, s, h, d, n;\n                f = decompose_fn(symbol, 'e', true);\n                p = _.divide(f.x.power, Symbol.imaginary());\n                q = evaluate(trig.tan(p));\n                s = _.pow(f.a, new Symbol(2));\n                d = q.getDenom(true);\n                n = q.getNum();\n                h = Symbol.hyp(n, d);\n                //check\n                if (h.equals(f.a)) {\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\n                }\n                else {\n                    return original;\n                }\n            }\n            catch (e) {\n                return original;\n            }\n        }\n\n        function symMinMax(f, args) {\n            args.map(function (x) {\n                x.numVal = evaluate(x).multiplier;\n            });\n            var l, a, b, a_val, b_val;\n            while (true) {\n                l = args.length;\n                if (l < 2)\n                    return args[0];\n                a = args.pop();\n                b = args[l - 2];\n                if (f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\n                    args.pop();\n                    args.push(a);\n                }\n            }\n        }\n\n        /**\n         * Returns maximum of a set of numbers\n         * @returns {Symbol}\n         */\n        function max() {\n            var args = [].slice.call(arguments);\n            if (allSame(args))\n                return args[0];\n            if (allNumbers(args))\n                return new Symbol(Math.max.apply(null, args));\n            if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('max', args);\n            return _.symfunction('max', args);\n        }\n\n        /**\n         * Returns minimum of a set of numbers\n         * @returns {Symbol}\n         */\n        function min() {\n            var args = [].slice.call(arguments);\n            if (allSame(args))\n                return args[0];\n            if (allNumbers(args))\n                return new Symbol(Math.min.apply(null, args));\n            if (Settings.SYMBOLIC_MIN_MAX && allConstants(args))\n                return symMinMax('min', args);\n            return _.symfunction('min', args);\n        }\n\n        /**\n         * Returns the sign of a number\n         * @param {Symbol} x\n         * @returns {Symbol}\n         */\n        function sign(x) {\n            if (x.isConstant(true))\n                return new Symbol(Math.sign(evaluate(x)));\n            return _.symfunction('sign', arguments);\n        }\n\n        function sort(symbol, opt) {\n            opt = opt ? opt.toString() : 'asc';\n            var getval = function (e) {\n                if (e.group === N)\n                    return e.multiplier;\n                if (e.group === FN) {\n                    if (e.fname === '')\n                        return getval(e.args[0]);\n                    return e.fname;\n                }\n                if (e.group === S)\n                    return e.power;\n\n                return e.value;\n            };\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\n            return new Vector(symbols.sort(function (a, b) {\n                var aval = getval(a),\n                        bval = getval(b);\n                if (opt === 'desc')\n                    return bval - aval;\n                return aval - bval;\n            }));\n        }\n\n        /**\n         * The log function\n         * @param {Symbol} symbol\n         * @param {Symbol} base\n         * @returns {Symbol}\n         */\n        function log(symbol, base) {\n            if(symbol.equals(1)) {\n                return new Symbol(0);\n            }\n\n            var retval;\n            if (symbol.fname === SQRT && symbol.multiplier.equals(1)) {\n                return _.divide(log(symbol.args[0]), new Symbol(2));\n            }\n\n            //log(0) is undefined so complain\n            if (symbol.equals(0)) {\n                throw new UndefinedError(Settings.LOG+'(0) is undefined!');\n            }\n\n            //deal with imaginary values\n            if (symbol.isImaginary()) {\n                return complex.evaluate(symbol, Settings.LOG);\n                /*\n                 var a = format('log(sqrt(({0})^2+({1})^2))-({2})*atan2(({1}),({0}))', symbol.imagpart(), symbol.realpart(), Settings.IMAGINARY),\n                 b = format('({0})*PI/2', Settings.IMAGINARY);\n\n                 return _.add(_.parse(a), _.parse(b));\n                 */\n            }\n\n            if (symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\n                /*\n                 var log_sym = Math2.bigLog(symbol.multiplier);\n                 var log_base = Math2.bigLog(base.multiplier);\n                 retval = new Symbol(log_sym.divide());\n                 */\n                var log_sym = Math.log(symbol);\n                var log_base = Math.log(base);\n                retval = new Symbol(log_sym / log_base);\n            }\n            else if (symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\n                symbol.power.negate();\n                //move the negative outside but keep the positive inside :)\n                retval = log(symbol).negate();\n            }\n            else if (symbol.value === 'e' && symbol.multiplier.equals(1)) {\n                var p = symbol.power;\n                retval = isSymbol(p) ? p : new Symbol(p);\n            }\n            else if (symbol.group === FN && symbol.fname === 'exp') {\n                var s = symbol.args[0];\n                if (symbol.multiplier.equals(1))\n                    retval = _.multiply(s, new Symbol(symbol.power));\n                else\n                    retval = _.symfunction(Settings.LOG, [symbol]);\n            }\n            else if (Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\n                var img_part;\n                if (symbol.multiplier.lessThan(0)) {\n                    symbol.negate();\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\n                }\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\n                if (img_part)\n                    retval = _.add(retval, img_part);\n            }\n            else {\n                var s;\n                if (!symbol.power.equals(1)) {\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\n                    symbol.toLinear();\n                }\n                //log(a,a) = 1 since the base is allowed to be changed.\n                //This was pointed out by Happypig375 in issue #280\n                if (arguments.length > 1 && allSame(arguments))\n                    retval = new Symbol(1);\n                else\n                    retval = _.symfunction(Settings.LOG, arguments);\n\n                if (s)\n                    retval = _.multiply(s, retval);\n            }\n            return retval;\n        }\n\n        /**\n         * Round a number up to s decimal places\n         * @param {Number} x\n         * @param {int} s - the number of decimal places\n         * @returns {undefined}\n         */\n        function round(x, s) {\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\n            if (x.isConstant() && sIsConstant) {\n                var v, e, exp, retval;\n                v = x;\n                //round the coefficient of then number but not the actual decimal value\n                //we know this because a negative number was passed\n                if (s && s.lessThan(0)) {\n                    s = abs(s);\n                    //convert the number to exponential form\n                    e = Number(x).toExponential().toString().split('e');\n                    //point v to the coefficient of then number\n                    v = e[0];\n                    //set the expontent\n                    exp = e[1];\n                }\n                //round the number to the requested precision\n                retval = new Symbol(nround(v, Number(s || 0)));\n                //if there's a exponent then put it back\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\n            }\n\n\n            return _.symfunction('round', arguments);\n        }\n\n        /**\n         * Gets the quadrant of the trig function\n         * @param {Frac} m\n         * @returns {Int}\n         */\n        function getQuadrant(m) {\n            var v = m % 2, quadrant;\n\n            if (v < 0)\n                v = 2 + v; //put it in terms of pi\n\n            if (v >= 0 && v <= 0.5)\n                quadrant = 1;\n            else if (v > 0.5 && v <= 1)\n                quadrant = 2;\n            else if (v > 1 && v <= 1.5)\n                quadrant = 3;\n            else\n                quadrant = 4;\n            return quadrant;\n        }\n\n        /*\n         * Serves as a bridge between numbers and bigNumbers\n         * @param {Frac|Number} n\n         * @returns {Symbol}\n         */\n        function bigConvert(n) {\n            if (!isFinite(n)) {\n                var sign = Math.sign(n);\n                var r = new Symbol(String(Math.abs(n)));\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\n                return r;\n            }\n            if (isSymbol(n))\n                return n;\n            if (typeof n === 'number') {\n                try {\n                    n = Frac.simple(n);\n                }\n                catch (e) {\n                    n = new Frac(n);\n                }\n            }\n\n            var symbol = new Symbol(0);\n            symbol.multiplier = n;\n            return symbol;\n        }\n        ;\n\n        function clean(symbol) {\n            // handle functions with numeric values\n            // handle denominator within denominator\n            // handle trig simplifications\n            var g = symbol.group, retval;\n            //Now let's get to work\n            if (g === CP) {\n                var num = symbol.getNum(),\n                        den = symbol.getDenom() || new Symbol(1),\n                        p = Number(symbol.power),\n                        factor = new Symbol(1);\n                if (Math.abs(p) === 1) {\n                    den.each(function (x) {\n                        if (x.group === CB) {\n                            factor = _.multiply(factor, clean(x.getDenom()));\n                        }\n                        else if (x.power.lessThan(0)) {\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\n                        }\n                    });\n\n                    var new_den = new Symbol(0);\n                    //now divide out the factor and add to new den\n                    den.each(function (x) {\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\n                    });\n\n                    factor.invert(); //invert so it can be added to the top\n                    var new_num;\n                    if (num.isComposite()) {\n                        new_num = new Symbol(0);\n                        num.each(function (x) {\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\n                        });\n                    }\n                    else\n                        new_num = _.multiply(factor, num);\n\n                    retval = _.divide(new_num, new_den);\n                }\n            }\n            else if (g === CB) {\n                retval = new Symbol(1);\n                symbol.each(function (x) {\n                    retval = _.multiply(retval, _.clean(x));\n                });\n            }\n            else if (g === FN) {\n                if (symbol.args.length === 1 && symbol.args[0].isConstant())\n                    retval = block('PARSE2NUMBER', function () {\n                        return _.parse(symbol);\n                    }, true);\n            }\n\n            if (!retval)\n                retval = symbol;\n\n            return retval;\n        }\n\n        /**\n         * Expands a symbol\n         * @param symbol\n         */\n        function expand(symbol) {\n            //deal with parenthesis\n            if (symbol.group === FN && symbol.fname === '') {\n                return _.expand(symbol.args[0]);\n            }\n\n            //TODO - some test need to be verified in order to implement this\n            /*\n             if(symbol.group === FN) {\n             symbol.args[0] = _.expand(symbol.args[0]);\n             symbol.updateHash();\n             return symbol;\n             }\n             */\n\n            if (!symbol.symbols)\n                return symbol; //nothing to do\n\n            var original = symbol.clone();\n            try {\n\n                if (!symbol.symbols)\n                    return symbol;\n\n                //expand all the symbols\n                for (var s in symbol.symbols) {\n                    var x = symbol.symbols[s];\n                    symbol.symbols[s] = expand(x);\n                }\n\n                symbol = _.parse(symbol);\n\n                var p = symbol.power,\n                        m = symbol.multiplier.clone(),\n                        pn = Number(p);\n                if (isInt(pn) && pn > 0 && symbol.isComposite()) {\n                    var f = new Symbol(0);\n                    //we loop through the f and make sure that it's fully expanded\n                    for (var x in symbol.symbols) {\n                        var sym = symbol.symbols[x];\n                        if (sym.power.greaterThan(1))\n                            sym = _.expand(sym);\n                        f = _.add(f, sym);\n                    }\n\n                    //assume (a+b)^3 = (a+b)(a+b)(a+b) = (b^2+2*a*b+a^2)(a+b)\n                    //we have n=p-1=2 iterations where p=3 in this case\n                    var n = pn - 1;\n                    //Initiate with the first term. Remember that we have p-1 iterations because\n                    //the first iteration is equal to P where p is the polynomial\n                    var result = f.clone(); //initiate this as the first term\n                    //the first loop is the top iterator and remains untouched. No sub-symbols\n                    //from this symbol are allowed to be touched\n                    for (var i = 0; i < n; i++) {\n                        var t = new Symbol(0);\n                        for (var x in f.symbols) {\n                            var a = f.symbols[x];\n                            //we now loop through the\n                            for (var y in result.symbols) {\n                                var b = _.multiply(a.clone(), result.symbols[y]);\n                                //the result must always be a composite. If not expand\n                                if (b.group === CB)\n                                    b = _.expand(b);\n                                t = _.add(t, b);\n                            }\n                        }\n                        ;\n                        result = t;\n                    }\n\n                    //put back the multiplier\n                    if (!m.equals(1)) {\n                        for (var s in result.symbols) {\n                            var x = result.symbols[s];\n                            x.multiplier = x.multiplier.multiply(m);\n                            if (x.isComposite())\n                                x.distributeMultiplier();\n                            symbol.symbols[s] = x;\n                        }\n                    }\n\n                    return result;\n                }\n                else if (symbol.group === CB) {\n                    //check if the symbol has composites\n                    var hascomposites = false,\n                            sp = symbol.power.clone(),\n                            sign = symbol.power.sign();\n\n                    for (var x in symbol.symbols) {\n                        var sub = symbol.symbols[x];\n                        if (sub.isComposite()) {\n                            hascomposites = true;\n                            break;\n                        }\n\n                        if (isSymbol(sub.power) || isSymbol(sp)) {\n                            sub.power = _.multiply(sub.power, Symbol(sp));\n                            sub.group = EX;\n                        }\n                        else\n                            sub.power = sub.power.multiply(sp);\n                    }\n\n                    symbol.toLinear();\n\n                    //I'm going to be super lazy here and take the easy way out. TODO: do this without re-parsing\n                    symbol = _.parse(symbol.text());\n\n                    if (!hascomposites)\n                        return symbol; //nothing to do here\n\n                    var result = new Symbol(0);\n                    var composites = [],\n                            non_composites = new Symbol(symbol.multiplier);\n\n                    //sort them out\n                    for (var s in symbol.symbols) {\n                        var x = symbol.symbols[s];\n\n                        if (x.group === EX)\n                            continue;\n                        if (x.isComposite()) {\n                            var p = x.power, isDenom = false;\n                            ;\n                            if (isInt(p)) {\n                                if (p < 0) {\n                                    x.power.negate();\n                                    isDenom = true;\n                                }\n                            }\n\n                            if (isDenom) {\n                                x.power.negate();\n                                non_composites = _.multiply(non_composites, x);\n                            }\n                            else\n                                composites.push(x);\n                        }\n                        else\n                            non_composites = _.multiply(non_composites, x);\n                    }\n\n                    //grab the first symbol since we'll loop over that one to begin\n                    result = composites.pop();\n\n                    while (composites.length) {\n                        var s = composites.pop();\n                        var t = new Symbol(0);\n                        result.each(function (x) {\n                            s.each(function (y) {\n                                var prod = _.multiply(x.clone(), y.clone());\n                                t = _.add(t, prod);\n                            });\n                        });\n\n                        result = t;\n                    }\n\n                    var finalResult = new Symbol(0);\n                    //put back the multiplier\n                    result.each(function (x) {\n                        finalResult = _.add(finalResult, expand(_.multiply(non_composites, x)));\n                    });\n                    //expand the power\n                    finalResult.power = finalResult.power.multiply(sp.abs());\n\n                    symbol = _.expand(finalResult);\n\n                    if (sign < 0)\n                        symbol.invert();\n                }\n            }\n            catch (e) {\n                return original;\n            }\n\n            return symbol;\n        }\n\n        /**\n         * Returns an identity matrix of nxn\n         * @param {Number} n\n         * @returns {Matrix}\n         */\n        function imatrix(n) {\n            return Matrix.identity(n);\n        }\n\n        /**\n         * Retrieves and item from a vector\n         * @param {Vector} vector\n         * @param {Number} index\n         * @returns {Vector|Symbol}\n         */\n        function vecget(vector, index) {\n            if (index.isConstant() && isInt(index))\n                return vector.elements[index];\n            return _.symfunction('vecget', arguments);\n        }\n\n        /**\n         * Removes duplicates from a vector\n         * @param {Vector} vector\n         * @param {Number} tolerance\n         * @returns {Vector}\n         */\n        function vectrim(vector, tolerance) {\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\n\n            vector = vector.clone();\n\n            tolerance = Number(tolerance);\n            //place algebraic solutions first\n            vector.elements.sort(function(a, b) {\n                return b.group - a.group;\n            });\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\n            vector.elements = removeDuplicates(vector.elements, function(a, b) {\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\n                return diff <= tolerance;\n            });\n\n            return vector;\n        }\n\n        /**\n         * Set a value for a vector at a given index\n         * @param {Vector} vector\n         * @param {Number} index\n         * @param {Symbol} value\n         * @returns {Vector}\n         */\n        function vecset(vector, index, value) {\n            if (!index.isConstant)\n                return _.symfunction('vecset', arguments);\n            vector.elements[index] = value;\n            return vector;\n        }\n\n        function matget(matrix, i, j) {\n            if (i.isConstant() && j.isConstant())\n                return matrix.elements[i][j];\n            return _.symfunction('matget', arguments);\n        }\n\n        function matgetrow(matrix, i) {\n            if (i.isConstant())\n                return new Matrix(matrix.elements[i]);\n            return _.symfunction('matgetrow', arguments);\n        }\n\n        function matsetrow(matrix, i, x) {\n            //handle symbolics\n            if (!i.isConstant())\n                return _.symfunction('matsetrow', arguments);\n            if (matrix.elements[i].length !== x.elements.length)\n                throw new DimensionError('Matrix row must match row dimensions!');\n            var M = matrix.clone();\n            M.elements[i] = x.clone().elements;\n            return M;\n        }\n\n        function matgetcol(matrix, col_index) {\n            //handle symbolics\n            if (!col_index.isConstant())\n                return _.symfunction('matgetcol', arguments);\n            col_index = Number(col_index);\n            var M = Matrix.fromArray([]);\n            matrix.each(function (x, i, j) {\n                if (j === col_index) {\n                    M.elements.push([x.clone()]);\n                }\n            });\n            return M;\n        }\n\n        function matsetcol(matrix, j, col) {\n            //handle symbolics\n            if (!j.isConstant())\n                return _.symfunction('matsetcol', arguments);\n            j = Number(j);\n            if (matrix.rows() !== col.elements.length)\n                throw new DimensionError('Matrix columns must match number of columns!');\n            col.each(function (x, i) {\n                matrix.set(i - 1, j, x.elements[0].clone());\n            });\n            return matrix;\n        }\n\n\n        function matset(matrix, i, j, value) {\n            matrix.elements[i][j] = value;\n            return matrix;\n        }\n\n        //the constructor for vectors\n        function vector() {\n            return new Vector([].slice.call(arguments));\n        }\n\n        //the constructor for matrices\n        function matrix() {\n            return Matrix.fromArray(arguments);\n        }\n\n        //the constructor for sets\n        function set() {\n            return Set.fromArray(arguments);\n        }\n\n        function determinant(symbol) {\n            if (isMatrix(symbol)) {\n                return symbol.determinant();\n            }\n            return symbol;\n        }\n\n        function size(symbol) {\n            var retval;\n            if (isMatrix(symbol))\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\n            else if(isVector(symbol) || isSet(symbol))\n                retval = new Symbol(symbol.elements.length);\n            else\n                err('size expects a matrix or a vector');\n            return retval;\n        }\n\n        function dot(vec1, vec2) {\n            if (isVector(vec1) && isVector(vec2))\n                return vec1.dot(vec2);\n            err('function dot expects 2 vectors');\n        }\n\n        function cross(vec1, vec2) {\n            if (isVector(vec1) && isVector(vec2))\n                return vec1.cross(vec2);\n            err('function cross expects 2 vectors');\n        }\n\n        function transpose(mat) {\n            if (isMatrix(mat))\n                return mat.transpose();\n            err('function transpose expects a matrix');\n        }\n\n        function invert(mat) {\n            if (isMatrix(mat))\n                return mat.invert();\n            err('invert expects a matrix');\n        }\n\n        //basic set functions\n        function union(set1, set2) {\n            return set1.union(set2);\n        }\n\n        function intersection(set1, set2) {\n            return set1.intersection(set2);\n        }\n\n        function contains(set1, e) {\n            return set1.contains(e);\n        }\n\n        function difference(set1, set2) {\n            return set1.difference(set2);\n        }\n\n        function intersects(set1, set2) {\n            return new Symbol(Number(set1.intersects(set2)));\n        }\n\n        function is_subset(set1, set2) {\n            return new Symbol(Number(set1.is_subset(set2)));\n        }\n\n        function print() {\n            arguments2Array(arguments).map(function(x) {\n                console.log(x.toString());\n            });\n        }\n\n        function testSQRT(symbol) {\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\n            if (!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\n                var sign = symbol.power.sign();\n                //don't devide the power directly. Notice the use of toString. This makes it possible\n                //to use a bigNumber library in the future\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\n                //place back the sign of the power\n                if (sign < 0)\n                    retval.invert();\n                return retval;\n            }\n            return symbol;\n        }\n\n        //try to reduce a symbol by pulling its power\n        function testPow(symbol) {\n            if (symbol.group === P) {\n                var v = symbol.value;\n\n                var fct = primeFactors(v)[0];\n\n                //safety\n                if(!fct) {\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\n                    return symbol;\n                }\n\n                var n = new Frac(Math.log(v) / Math.log(fct)),\n                    p = n.multiply(symbol.power);\n\n                //we don't want a more complex number than before\n                if (p.den > symbol.power.den)\n                    return symbol;\n\n                if (isInt(p))\n                    symbol = Symbol(Math.pow(fct, p));\n                else\n                    symbol = new Symbol(fct).setPower(p);\n            }\n\n            return symbol;\n        }\n\n        //Link the functions to the parse so they're available outside of the library.\n        //This is strictly for convenience and may be deprecated.\n        this.expand = expand;\n        this.round = round;\n        this.clean = clean;\n        this.sqrt = sqrt;\n        this.cbrt = cbrt;\n        this.abs = abs;\n        this.log = log;\n        this.rationalize = rationalize;\n        this.nthroot = nthroot;\n        this.arg = arg;\n        this.conjugate = conjugate;\n        this.imagpart = imagpart;\n        this.realpart = realpart;\n\n        //TODO:\n        //Utilize the function below instead of the linked function\n        this.getFunction = function(name) {\n            return functions[name][0];\n        };\n\n//Parser.methods ===============================================================\n        this.addPreprocessor = function (name, action, order, shift_cells) {\n            var names = preprocessors.names;\n            var actions = preprocessors.actions;\n            if ((typeof action !== 'function')) //the person probably forgot to specify a name\n                throw new Error('Incorrect parameters. Function expected!');\n            if (!order) {\n                names.push(name);\n                actions.push(action);\n            }\n            else {\n                if (shift_cells) {\n                    names.splice(order, 0, name);\n                    actions.splice(order, 0, action);\n                }\n                else {\n                    names[order] = name;\n                    actions[order] = action;\n                }\n            }\n        };\n\n        this.getPreprocessors = function () {\n            var preprocessors = {};\n            for (var i = 0, l = preprocessors.names.length; i < l; i++) {\n                var name = preprocessors.names[i];\n                preprocessors[name] = {\n                    order: i,\n                    action: preprocessors.actions[i]\n                };\n            }\n            return preprocessors;\n        };\n\n        this.removePreprocessor = function (name, shift_cells) {\n            var i = preprocessors.names.indexOf(name);\n            if (shift_cells) {\n                remove(preprocessors.names, i);\n                remove(preprocessors.actions, i);\n            }\n            else {\n                preprocessors.names[i] = undefined;\n                preprocessors.actions[i] = undefined;\n            }\n        };\n\n        //The loader for functions which are not part of Math2\n        this.mapped_function = function () {\n            var subs = {},\n                    params = this.params;\n            for (var i = 0; i < params.length; i++)\n                subs[params[i]] = arguments[i];\n\n            return _.parse(this.body, subs);\n        };\n        /**\n         * Adds two symbols\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.add = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with two symbols\n            if (aIsSymbol && bIsSymbol) {\n                //forward the adding of symbols with units to the Unit module\n                if (a.unit || b.unit) {\n                    return _.Unit.add(a, b);\n                }\n                //handle Infinity\n                //https://www.encyclopediaofmath.org/index.php/Infinity\n                if (a.isInfinity || b.isInfinity) {\n                    var aneg = a.multiplier.lessThan(0),\n                            bneg = b.multiplier.lessThan(0);\n\n                    if (a.isInfinity && b.isInfinity && aneg !== bneg) {\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\n                    }\n\n                    var inf = Symbol.infinity();\n                    if (bneg)\n                        inf.negate();\n                    return inf;\n                }\n\n                if (a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\n                    a.distributeMultiplier();\n                    b.distributeMultiplier();\n                }\n                //no need to waste time on zeroes\n                if (a.multiplier.equals(0))\n                    return b;\n                if (b.multiplier.equals(0))\n                    return a;\n\n                if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\n                    return result;\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        ap = a.power.toString(),\n                        bp = b.power.toString();\n\n                //always keep the greater group on the left.\n                if (g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\n                    return this.add(b, a);\n                }\n\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\n                 * because it doesn't know which one to prioritize. */\n                //correction to PL dilemma\n                if (g1 === CB && g2 === PL && a.value === b.value) {\n                    //swap\n                    var t = a;\n                    a = b;\n                    b = t;\n                    g1 = a.group;\n                    g2 = b.group;\n                    ap = a.power.toString();\n                    bp = b.power.toString();\n                }\n\n                var powEQ = ap === bp,\n                        v1 = a.value,\n                        v2 = b.value,\n                        aIsComposite = a.isComposite(),\n                        bIsComposite = b.isComposite(),\n                        h1, h2, result;\n\n                if (aIsComposite)\n                    h1 = text(a, 'hash');\n                if (bIsComposite)\n                    h2 = text(b, 'hash');\n\n                if (g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\n                    return this.add(b, a);\n                }\n\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\n                if (g1 === PL && g2 === PL) {\n                    v1 = h1;\n                    v2 = h2;\n                }\n\n                var PN = g1 === P && g2 === N,\n                        PNEQ = a.value === b.multiplier.toString(),\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\n\n                //equal values, equal powers\n                if (valEQ && powEQ && g1 === g2) {\n                    //make sure to convert N to something P can work with\n                    if (PN)\n                        b = b.convert(P);//CL\n\n                    //handle PL\n                    if (g1 === PL && (g2 === S || g2 === P)) {\n                        a.distributeMultiplier();\n                        result = a.attach(b);\n                    }\n                    else {\n                        result = a;//CL\n                        if (a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\n                            for (var s in b.symbols) {\n                                var x = b.symbols[s];\n                                result.attach(x);\n                            }\n                        }\n                        else\n                            result.multiplier = result.multiplier.add(b.multiplier);\n                    }\n                }\n                //equal values uneven powers\n                else if (valEQ && g1 !== PL) {\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\n                    if (g1 === CP && g2 === PL) {\n                        b.insert(a);\n                        result = b;\n                    }\n                    else {\n                        result = Symbol.shell(PL).attach([a, b]);\n                        //update the hash\n                        result.value = g1 === PL ? h1 : v1;\n                    }\n                }\n                else if (aIsComposite && a.isLinear()) {\n                    var canIterate = g1 === g2,\n                            bothPL = g1 === PL && g2 === PL;\n\n                    //we can only iterate group PL if they values match\n                    if (bothPL)\n                        canIterate = a.value === b.value;\n                    //distribute the multiplier over the entire symbol\n                    a.distributeMultiplier();\n\n                    if (b.isComposite() && b.isLinear() && canIterate) {\n                        b.distributeMultiplier();\n                        //CL\n                        for (var s in b.symbols) {\n                            var x = b.symbols[s];\n                            a.attach(x);\n                        }\n                        result = a;\n                    }\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\n                    else if (bothPL && a.value !== h2 || g1 === PL && !valEQ) {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n\n                    }\n                    else {\n                        result = a.attach(b);\n                    }\n                }\n                else {\n                    if (g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\n                        var m = b.multiplier.clone();\n                        b = sqrt(b.toUnitMultiplier().toLinear());\n                        b.multiplier = m;\n                    }\n                    //fix for issue #3 and #159\n                    if (a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\n                        result = _.add(expand(a), expand(b));\n                    }\n                    else {\n                        result = Symbol.shell(CP).attach([a, b]);\n                        result.updateHash();\n                    }\n                }\n\n                if (result.multiplier.equals(0))\n                    result = new Symbol(0);\n\n                //make sure to remove unnecessary wraps\n                if (result.length === 1) {\n                    var m = result.multiplier;\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(m);\n                }\n\n                return result;\n            }\n            else {\n                //keep symbols to the right\n                if (bIsSymbol && !aIsSymbol) {\n                    var t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var bIsMatrix = isMatrix(b);\n\n                if (aIsSymbol && bIsMatrix) {\n                    var M = new Matrix();\n                    b.eachElement(function (e, i, j) {\n                        M.set(i, j, _.add(a.clone(), e));\n                    });\n\n                    b = M\n                }\n                else {\n                    if (isMatrix(a) && bIsMatrix) {\n                        b = a.add(b);\n                    }\n                    else if (aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if (isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if (isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return _.add(b, a);\n                        }\n                        else if (isMatrix(a) && isVector(b)) {\n                            if (b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for (var j = 0; j < l; j++) {\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n                return b;\n            }\n\n        };\n        /**\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.subtract = function (a, b) {\n            var aIsSymbol = aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b), t;\n\n            if (aIsSymbol && bIsSymbol) {\n                if (a.unit || b.unit) {\n                    return _.Unit.subtract(a, b);\n                }\n                return this.add(a, b.negate());\n            }\n            else {\n                if (bIsSymbol && isVector(a)) {\n                    b = a.map(function (x) {\n                        return _.subtract(x, b.clone());\n                    });\n                }\n                else if (aIsSymbol && isVector(b)) {\n                    b = b.map(function (x) {\n                        return _.subtract(a.clone(), x);\n                    });\n                }\n                else if (isVector(a) && isVector(b)) {\n                    if (a.dimensions() === b.dimensions())\n                        b = a.subtract(b);\n                    else\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\n                }\n                else if (isMatrix(a) && isVector(b)) {\n                    if (b.elements.length === a.rows()) {\n                        var M = new Matrix(), l = a.cols();\n                        b.each(function (e, i) {\n                            var row = [];\n                            for (var j = 0; j < l; j++) {\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\n                            }\n                            M.elements.push(row);\n                        });\n                        return M;\n                    }\n                    else\n                        err('Dimensions must match!');\n                }\n                else if (isVector(a) && isMatrix(b)) {\n                    var M = b.clone().negate();\n                    return _.add(M, a);\n                }\n                else if (isMatrix(a) && isMatrix(b)) {\n                    b = a.subtract(b);\n                }\n                else if(isMatrix(a) && bIsSymbol) {\n                    var M = new Matrix();\n                    a.each(function(x, i, j) {\n                        M.set(i, j, _.subtract(x, b.clone()));\n                    });\n                    b = M;\n                }\n                else if(aIsSymbol && isMatrix(b)) {\n                    var M = new Matrix();\n                    b.each(function(x, i, j) {\n                        M.set(i, j, _.subtract(a.clone(), x));\n                    });\n                    b = M;\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the * operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.multiply = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            //we're dealing with function assignment here\n            if (aIsSymbol && b instanceof Collection) {\n                b.elements.push(a);\n                return b;\n            }\n            if (aIsSymbol && bIsSymbol) {\n                //if it has a unit then add it and return it right away.\n                if (b.isUnit) {\n                    var result = a.clone();\n                    a.unit = b;\n                    return result;\n                }\n                //if it has units then just forward that problem to the unit module\n                if (a.unit || b.unit) {\n                    return _.Unit.multiply(a, b);\n                }\n\n                //handle Infinty\n                if (a.isInfinity || b.isInfinity) {\n                    if (a.equals(0) || b.equals(0))\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\n                    //x/infinity\n                    if (b.power.lessThan(0)) {\n                        if (!a.isInfinity) {\n                            return new Symbol(0);\n                        }\n                        else {\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\n                        }\n                    }\n\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\n                            inf = Symbol.infinity();\n                    if (a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\n                        if (sign < 0)\n                            inf.negate();\n\n                        return inf;\n                    }\n                }\n                //the quickies\n                if (a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\n                    var retval = new Symbol(t);\n                    return retval;\n                }\n\n                //don't waste time\n                if (a.isOne()) {\n                    return b.clone();\n                }\n                if (b.isOne()) {\n                    return a.clone();\n                }\n\n                if (a.multiplier.equals(0) || b.multiplier.equals(0))\n                    return new Symbol(0);\n\n                if (b.group > a.group && !(b.group === CP))\n                    return this.multiply(b, a);\n                //correction for PL/CB dilemma\n                if (a.group === CB && b.group === PL && a.value === b.value) {\n                    var t = a;\n                    a = b;\n                    b = t;//swap\n                }\n\n                var g1 = a.group,\n                        g2 = b.group,\n                        bnum = b.multiplier.num,\n                        bden = b.multiplier.den;\n\n                if (g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\n                    //unwrap sqrt\n                    var a_pow = a.power;\n                    a = a.args[0].clone();\n                    a.setPower(new Frac(0.5).multiply(a_pow));\n                    g1 = a.group;\n                }\n                //simplify n/sqrt(n). Being very specific\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\n                    a = _.symfunction(SQRT,[b.clone()]);\n                    b = new Symbol(1);\n                };\n\n                var v1 = a.value,\n                        v2 = b.value,\n                        sign = new Frac(a.sign()),\n                        //since P is just a morphed version of N we need to see if they relate\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\n                        //don't multiply the multiplier of b since that's equal to the value of a\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\n                        result = a.clone().toUnitMultiplier();\n                b = b.clone().toUnitMultiplier(true);\n\n                //further simplification of sqrt\n                if (g1 === FN && g2 === FN) {\n                    var u = a.args[0].clone();\n                    var v = b.args[0].clone();\n                    if (a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\n\n                        var q = _.divide(u, v).invert();\n                        if (q.gt(1) && isInt(q)) {\n                            //b contains a factor a which can be moved to a\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\n                            b = new Symbol(1);\n                        }\n                    }\n                    //simplify factorial but only if\n                    //1 - It's division so b will have a negative power\n                    //2 - We're not dealing with factorials of numbers\n                    else if (a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\n                        //assume that n = positive\n                        var d = _.subtract(u.clone(), v.clone());\n\n                        //if it's not numeric then we don't know if we can simplify so just return\n                        if(!d.isConstant()) {\n                            b = new Symbol(1);\n                        }\n                        else {\n                            //there will never be a case where d == 0 since this will already have\n                            //been handled at the beginning of this function\n                            t = new Symbol(1);\n                            if(d < 0) {\n                                //If d is negative then the numerator is larger so expand that\n                                for(var i=0, n = Math.abs(d); i<=n; i++) {\n                                    var s = _.add(u.clone(), new Symbol(i));\n                                    t = _.multiply(t, s);\n                                }\n\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\n\n                                b = new Symbol(1);\n                            }\n                            else {\n                                //Otherwise the denominator is larger so expand that\n                                for(var i=0, n = Math.abs(d); i<=n; i++) {\n                                    var s = _.add(v.clone(), new Symbol(i));\n                                    t = _.multiply(t, s);\n                                }\n\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\n\n                                b = new Symbol(1);\n                            }\n                        }\n                    }\n                }\n\n\n                //if both are PL then their hashes have to match\n                if (v1 === v2 && g1 === PL && g1 === g2) {\n                    v1 = a.text('hash');\n                    v2 = b.text('hash');\n                }\n\n                //same issue with (x^2+1)^x*(x^2+1)\n                //EX needs an exception when multiplying because it needs to recognize\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\n                if (g2 === EX && b.previousGroup === PL && g1 === PL) {\n                    v1 = text(a, 'hash', EX);\n                }\n\n                if ((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\n                    var p1 = a.power,\n                            p2 = b.power,\n                            isSymbolP1 = isSymbol(p1),\n                            isSymbolP2 = isSymbol(p2),\n                            toEX = (isSymbolP1 || isSymbolP2);\n                    //TODO: this needs cleaning up\n                    if (g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\n                        result = new Symbol(0);\n                        a.each(function (x) {\n                            result = _.add(result, _.multiply(x, b.clone()));\n                        }, true);\n                    }\n                    else {\n                        //add the powers\n                        result.power = toEX ? _.add(\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\n\n                        //eliminate zero power values and convert them to numbers\n                        if (result.power.equals(0))\n                            result = result.convert(N);\n\n                        //properly convert to EX\n                        if (toEX)\n                            result.convert(EX);\n\n                        //take care of imaginaries\n                        if (a.imaginary && b.imaginary) {\n                            var isEven = even(result.power % 2);\n                            if (isEven) {\n                                result = new Symbol(1);\n                                m.negate();\n                            }\n                        }\n\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\n                        if (result.group !== EX && result.previousGroup)\n                            result.previousGroup = undefined;\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\n                        //the sign but this isn't true if they're equals symbols\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                }\n                else if (g1 === CB && a.isLinear()) {\n                    if (g2 === CB)\n                        b.distributeExponent();\n                    if (g2 === CB && b.isLinear()) {\n                        for (var s in b.symbols) {\n                            var x = b.symbols[s];\n                            result = result.combine(x);\n                        }\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\n                    }\n                    else {\n                        result.combine(b);\n                    }\n                }\n                else {\n                    //the multiplier was already handled so nothing left to do\n                    if (g1 !== N) {\n                        if (g1 === CB) {\n                            result.distributeExponent();\n                            result.combine(b);\n                        }\n                        else if (!b.isOne()) {\n                            var bm = b.multiplier.clone();\n                            b.toUnitMultiplier();\n                            result = Symbol.shell(CB).combine([result, b]);\n                            //transfer the multiplier to the outside\n                            result.multiplier = result.multiplier.multiply(bm);\n                        }\n                    }\n                    else {\n                        result = b.clone().toUnitMultiplier();\n                    }\n                }\n\n                if (result.group === P) {\n                    var logV = Math.log(result.value),\n                            n1 = Math.log(bnum) / logV,\n                            n2 = Math.log(bden) / logV,\n                            ndiv = m.num / bnum,\n                            ddiv = m.den / bden;\n                    //we don't want to divide by zero no do we? Strange things happen.\n                    if (n1 !== 0 && isInt(n1) && isInt(ndiv)) {\n                        result.power = result.power.add(new Frac(n1));\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\n                    }\n                    if (n2 !== 0 && isInt(n2) && isInt(ddiv)) {\n                        result.power = result.power.subtract(new Frac(n2));\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\n                    }\n                }\n\n                //unpack CB if length is only one\n                if (result.length === 1) {\n                    var t = result.multiplier;\n                    //transfer the multiplier\n                    result = firstObject(result.symbols);\n                    result.multiplier = result.multiplier.multiply(t);\n                }\n\n                //reduce square root\n                var ps = result.power.toString();\n                if (even(ps) && result.fname === SQRT) {\n                    //grab the sign of the symbol\n                    sign = sign * result.sign();\n                    var p = result.power;\n                    result = result.args[0];\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\n                    //flip it back to the correct sign\n                    if (sign < 0)\n                        result.negate()\n                }\n                else {\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\n                    if (result.group === CP && result.isImaginary())\n                        result.distributeMultiplier();\n                }\n\n                //back convert group P to a simpler group N if possible\n                if (result.group === P && isInt(result.power.toDecimal()))\n                    result = result.convert(N);\n\n                return result;\n            }\n            else {\n                //****** Matrices & Vector *****//\n                if (bIsSymbol && !aIsSymbol) { //keep symbols to the right\n                    t = a;\n                    a = b;\n                    b = t; //swap\n                    t = bIsSymbol;\n                    bIsSymbol = aIsSymbol;\n                    aIsSymbol = t;\n                }\n\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\n                if (aIsSymbol && isMatrixB) {\n                    var M = new Matrix();\n                    b.eachElement(function (e, i, j) {\n                        M.set(i, j, _.multiply(a.clone(), e));\n                    });\n\n                    b = M;\n                }\n                else {\n                    if (isMatrixA && isMatrixB) {\n                        b = a.multiply(b);\n                    }\n                    else if (aIsSymbol && isVector(b)) {\n                        b.each(function (x, i) {\n                            i--;\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\n                        });\n                    }\n                    else {\n                        if (isVector(a) && isVector(b)) {\n                            b.each(function (x, i) {\n                                i--;\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\n                            });\n                        }\n                        else if (isVector(a) && isMatrix(b)) {\n                            //try to convert a to a matrix\n                            return this.multiply(b, a);\n                        }\n                        else if (isMatrix(a) && isVector(b)) {\n                            if (b.elements.length === a.rows()) {\n                                var M = new Matrix(), l = a.cols();\n                                b.each(function (e, i) {\n                                    var row = [];\n                                    for (var j = 0; j < l; j++) {\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\n                                    }\n                                    M.elements.push(row);\n                                });\n                                return M;\n                            }\n                            else\n                                err('Dimensions must match!');\n                        }\n                    }\n                }\n\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the / operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.divide = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n\n            if (aIsSymbol && bIsSymbol) {\n                //forward to Unit division\n                if (a.unit || b.unit) {\n                    return _.Unit.divide(a, b);\n                }\n                var result;\n                if (b.equals(0))\n                    throw new DivisionByZero('Division by zero not allowed!');\n\n                if (a.isConstant() && b.isConstant()) {\n                    result = a.clone();\n                    result.multiplier = result.multiplier.divide(b.multiplier);\n                }\n                else {\n                    b.invert();\n                    result = _.multiply(a, b);\n                }\n                return result;\n            }\n            else {\n                //******* Vectors & Matrices *********//\n                var isVectorA = isVector(a), isVectorB = isVector(b);\n                if (aIsSymbol && isVectorB) {\n                    b = b.map(function (x) {\n                        return _.divide(a.clone(), x);\n                    });\n                }\n                else if (isVectorA && bIsSymbol) {\n                    b = a.map(function (x) {\n                        return _.divide(x, b.clone());\n                    });\n                }\n                else if (isVectorA && isVectorB) {\n                    if (a.dimensions() === b.dimensions()) {\n                        b = b.map(function (x, i) {\n                            return _.divide(a.elements[--i], x);\n                        });\n                    }\n                    else\n                        _.error('Cannot divide vectors. Dimensions do not match!');\n                }\n                else {\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\n                    if (isMatrixA && bIsSymbol) {\n                        var M = new Matrix();\n                        a.eachElement(function (x, i, j) {\n                            M.set(i, j, _.divide(x, b.clone()));\n                        });\n                        b = M;\n                    }\n                    else if(aIsSymbol && isMatrixB) {\n                        var M = new Matrix();\n                        b.eachElement(function (x, i, j) {\n                            M.set(i, j, _.divide(a.clone(), x));\n                        });\n                        b = M;\n                    }\n                    else if (isMatrixA && isMatrixB) {\n                        var M = new Matrix();\n                        if (a.rows() === b.rows() && a.cols() === b.cols()) {\n                            a.eachElement(function (x, i, j) {\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\n                            });\n                            b = M;\n                        }\n                        else {\n                            _.error('Dimensions do not match!');\n                        }\n                    }\n                    else if (isMatrixA && isVectorB) {\n                        if (a.cols() === b.dimensions()) {\n                            var M = new Matrix();\n                            a.eachElement(function (x, i, j) {\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\n                            });\n                            b = M;\n                        }\n                        else {\n                            _.error('Unable to divide matrix by vector.');\n                        }\n                    }\n                }\n                return b;\n            }\n        };\n        /**\n         * Gets called when the parser finds the ^ operator. See this.add\n         * @param {Symbol} a\n         * @param {Symbol} b\n         * @returns {Symbol}\n         */\n        this.pow = function (a, b) {\n            var aIsSymbol = isSymbol(a),\n                    bIsSymbol = isSymbol(b);\n            if (aIsSymbol && bIsSymbol) {\n                //it has units then it's the Unit module's problem\n                if (a.unit || b.unit) {\n                    return _.Unit.pow(a, b);\n                }\n                //handle infinity\n                if (a.isInfinity || b.isInfinity) {\n                    if (a.isInfinity && b.isInfinity)\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\n\n                    if (a.isConstant() && b.isInfinity) {\n                        if (a.equals(0)) {\n                            if (b.lessThan(0))\n                                throw new UndefinedError('0^Infinity is undefined!');\n                            return new Symbol(0);\n                        }\n                        if (a.equals(1))\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\n                        //a^-oo\n                        if (b.lessThan(0))\n                            return new Symbol(0);\n                        //a^oo\n                        if (!a.lessThan(0))\n                            return Symbol.infinity();\n                    }\n\n                    if (a.isInfinity && b.isConstant()) {\n                        if (b.equals(0))\n                            throw new UndefinedError(a + '^0 is undefined!');\n                        if (b.lessThan(0))\n                            return new Symbol(0);\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\n                    }\n                }\n\n                var aIsZero = a.equals(0);\n                var bIsZero = b.equals(0);\n                if (aIsZero && bIsZero)\n                    throw new UndefinedError('0^0 is undefined!');\n                //return 0 right away if possible\n                if (aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\n                    return new Symbol(0);\n\n                if (bIsZero)\n                    return new Symbol(1);\n\n                var bIsConstant = b.isConstant(),\n                        aIsConstant = a.isConstant(),\n                        bIsInt = b.isInteger(),\n                        m = a.multiplier,\n                        result = a.clone();\n                if (aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\n                    throw new UndefinedError('Division by zero is not allowed!');\n\n                //compute imaginary numbers right away\n                if (Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\n                    var k, re, im;\n                    k = Math.PI * b;\n                    re = new Symbol(Math.cos(k));\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\n                    return _.add(re, im);\n                }\n\n                //imaginary number under negative nthroot or to the n\n                if (Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\n                    var re, im, r, theta, nre, nim;\n                    re = a.realpart();\n                    im = a.imagpart();\n                    if (re.isConstant('all') && im.isConstant('all')) {\n                        theta = new Symbol(Math.atan2(im, re) * b);\n                        r = _.pow(Symbol.hyp(re, im), b);\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\n                        nim = _.multiply(r, _.trig.sin(theta));\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\n                    }\n                }\n\n                /*\n                 if(a.isImaginary() && bIsConstant && b.multiplier.num.abs().equals(1) && !b.multiplier.den.equals(1)) {\n                 var sign = b.sign();\n                 b = abs(b);\n                 var p, re, im, theta, n, ai, bi, di, ei, ii, th;\n                 p = Symbol.toPolarFormArray(a);\n                 theta = _.multiply(b.clone(), arg(a));\n                 di = _.pow(p[0], b);\n                 ai = _.trig.cos(theta.clone());\n                 bi = _.trig.sin(theta);\n\n                 if(sign < 0) {\n                 re = _.divide(ai, di.clone());\n                 im = _.divide(bi, di);\n                 }\n                 else {\n                 re = _.multiply(ai, di.clone());\n                 im = _.multiply(bi, di);\n                 }\n                 return _.add(re, _.multiply(im, Symbol.imaginary()));\n                 }\n                 */\n\n                //take care of the symbolic part\n                result.toUnitMultiplier();\n                //simpifly sqrt\n                if (result.group === FN && result.fname === SQRT && !bIsConstant) {\n                    var s = result.args[0];\n                    s.multiplyPower(new Symbol(0.5));\n                    s.multiplier.multiply(result.multiplier);\n                    s.multiplyPower(b);\n                    result = s;\n                }\n                else {\n                    var sign = m.sign();\n                    //handle cases such as (-a^3)^(1/4)\n                    if (evenFraction(b) && sign < 0) {\n                        //swaperoo\n                        //first put the sign back on the symbol\n                        result.negate();\n                        //wrap it in brackets\n                        result = _.symfunction(PARENTHESIS, [result]);\n                        //move the sign back the exterior and let nerdamer handle the rest\n                        result.negate();\n                    }\n\n                    result.multiplyPower(b);\n                }\n\n                if (aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\n                        var c;\n                        //remove the sign\n                        if (sign < 0) {\n                            a.negate();\n                            if (b.multiplier.den.equals(2))\n                                //we know that the numerator has to be odd and therefore it's i\n                                c = new Symbol(Settings.IMAGINARY);\n                            else if (isInt(b.multiplier)) {\n                                if (even(b.multiplier))\n                                    c = new Symbol(1);\n                                else\n                                    c = new Symbol(-1);\n                            }\n                            else if (!even(b.multiplier.den)) {\n                                c = new Symbol(Math.pow(sign, b.multiplier.num));\n                            }\n                            else {\n                                c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            }\n                        }\n\n                        result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\n\n                        //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\n                        //put the back sign\n                        if (c)\n                            result = _.multiply(result, c);\n                }\n                else if (bIsInt && !m.equals(1)) {\n                    var abs_b = b.abs();\n                    // Provide fall back to JS until big number implementation is improved\n                    if(abs_b.gt(Settings.MAX_EXP)) {\n                        if(b.sign() < 0)\n                            return new Symbol(0);\n                        return Symbol.infinity();\n                    }\n                    else {\n                        var p = b.multiplier.toDecimal();\n                        var sgn = Math.sign(p);\n                        p = Math.abs(p);\n                        var multiplier = new Frac(1);\n                        multiplier.num = m.num.pow(p);\n                        multiplier.den = m.den.pow(p);\n                        if (sgn < 0)\n                            multiplier.invert();\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\n                        result.multiplier = result.multiplier.multiply(multiplier);\n                    }\n                }\n                else {\n                    var sign = a.sign();\n                    if (b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\n                        if (b.multiplier.den.equals(2)) {\n                            var i = new Symbol(Settings.IMAGINARY);\n                            a.negate();//remove the sign\n                            //if the power is negative then i is negative\n                            if (b.lessThan(0)) {\n                                i.negate();\n                                b.negate();//remove the sign from the power\n                            }\n                            //pull the power normally and put back the imaginary\n                            result = _.multiply(_.pow(a, b), i);\n                        }\n                        else {\n//                            if(a.equals(-1)) {\n//                                var theta = _.multiply(b, _.parse('pi'));\n//                                result = evaluate(_.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta))));\n//                            }\n//                            else {\n                            var aa = a.clone();\n                            aa.multiplier.negate();\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\n                            var r = _.divide(_a, _b);\n                            result = _.multiply(result, r);\n//                            }\n                        }\n                    }\n                    else if (Settings.PARSE2NUMBER && b.isImaginary()) {\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\n                        var re, im, aa, a1, b1, c1;\n                        aa = a.clone().toLinear();\n                        re = b.realpart();\n                        im = b.imagpart();\n                        a1 = _.pow(aa.clone(), re);\n                        b1 = trig.cos(_.multiply(im.clone(), log(aa.clone())));\n                        c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\n                        result = _.multiply(a1, _.add(b1, c1));\n                        result = _.expand(_.parse(result));\n                    }\n                    else {\n                        //b is a symbol\n                        var neg_num = a.group === N && sign < 0,\n                                num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\n                                den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\n\n                        //eliminate imaginary if possible\n                        if (a.imaginary) {\n                            if (bIsInt) {\n                                var s, p, n;\n                                s = Math.sign(b);\n                                p = abs(b);\n                                n = p % 4;\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\n                                if (n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\n                                    result.negate();\n                                }\n                            }\n                            else {\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\n                                        tn = Math.pow(-1, nr.num);\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\n                            }\n                        }\n                        //ensure that the sign is carried by the symbol and not the multiplier\n                        //this enables us to check down the line if the multiplier can indeed be transferred\n                        if (sign < 0 && !neg_num)\n                            result.negate();\n\n                        //retain the absolute value\n                        if (bIsConstant && a.group !== EX) {\n                            var evenr = even(b.multiplier.den),\n                                    evenp = even(a.power),\n                                    n = result.power.toDecimal(),\n                                    evennp = even(n);\n                            if (evenr && evenp && !evennp) {\n                                if (n === 1)\n                                    result = _.symfunction(ABS, [result]);\n                                else if (!isInt(n)) {\n                                    var p = result.power;\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\n                                }\n                                else {\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\n                                            result.clone().setPower(new Frac(n - 1)));\n                                }\n                                //quick workaround. Revisit\n                                if (Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\n                                    result = result.args[0];\n                            }\n                        }\n                        //multiply out sqrt\n                        if(b.equals(2) && result.group === CB) {\n                            var _result = new Symbol(1);\n                            result.each(function(sym) {\n                                _result = _.multiply(_result, _.pow(sym, b));\n                            });\n                            result = _result;\n                        }\n                    }\n                }\n\n                result = testSQRT(result);\n\n                //don't multiply until we've tested the remaining symbol\n                if (num && den)\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\n\n                //reduce square root\n                if (result.fname === SQRT) {\n                    var isEX = result.group === EX;\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\n                    if (even(t)) {\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\n                                m = result.multiplier;\n                        result = _.pow(result.args[0], pt);\n                        result.multiplier = result.multiplier.multiply(m);\n                    }\n                }\n                //detect Euler's identity\n                else if (!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\n                        && result.power.contains(Settings.IMAGINARY)) {\n                    var theta = b.stripVar(Settings.IMAGINARY);\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\n//                    //we have a match\n//                    var m1 = result.multiplier,\n//                            m2 = result.power.multiplier;\n//                    result = new Symbol(even(m2.num) ? m1 : m1.negate());\n//                    result = _.pow(result, new Symbol(m2.den).invert());\n                }\n\n                return result;\n            }\n            else {\n                if (isVector(a) && bIsSymbol) {\n                    a = a.map(function (x) {\n                        return _.pow(x, b.clone());\n                    });\n                }\n                else if (isMatrix(a) && bIsSymbol) {\n                    var M = new Matrix();\n                    a.eachElement(function (x, i, j) {\n                        M.set(i, j, _.pow(x, b.clone()));\n                    });\n                    a = M;\n                }\n                else if(aIsSymbol && isMatrix(b)) {\n                    var M = new Matrix();\n                    b.eachElement(function (x, i, j) {\n                        M.set(i, j, _.pow(a.clone(), x));\n                    });\n                    a = M;\n                }\n                return a;\n            }\n        };\n        //gets called when the parser finds the , operator.\n        //Commas return a Collector object which roughly an array\n        this.comma = function (a, b) {\n            if (!(a instanceof Collection))\n                a = Collection.create(a);\n            a.append(b);\n            return a;\n        };\n        //link to modulus\n        this.mod = function (a, b) {\n            return mod(a, b);\n        };\n        //used to slice elements from arrays\n        this.slice = function (a, b) {\n            return new Slice(a, b);\n        };\n        //the equality setter\n        this.equals = function (a, b) {\n            //equality can only be set for group S so complain it's not\n            if (a.group !== S && !a.isLinear())\n                err('Cannot set equality for ' + a.toString());\n            VARS[a.value] = b.clone();\n            return b;\n        };\n        //percent\n        this.percent = function (a) {\n            return _.divide(a, new Symbol(100));\n        };\n        //set variable\n        this.assign = function (a, b) {\n            if (a instanceof Collection && b instanceof Collection) {\n                a.elements.map(function (x, i) {\n                    return _.assign(x, b.elements[i]);\n                });\n                return Vector.fromArray(b.elements);\n            }\n            if(a.parent) {\n                //it's referring to the parent instead. The current item can be discarded\n                var e = a.parent;\n                e.elements[e.getter] = b;\n                delete e.getter;\n                return e;\n            }\n\n            if (a.group !== S)\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\n            VARS[a.value] = b;\n            return b;\n        };\n        this.function_assign = function (a, b) {\n            var f = a.elements.pop();\n            return setFunction(f, a.elements, b);\n        };\n        //function to quickly convert bools to Symbols\n        var bool2Symbol = function (x) {\n            return new Symbol(x === true ? 1 : 0);\n        };\n        //check for equality\n        this.eq = function (a, b) {\n            return bool2Symbol(a.equals(b));\n        };\n        //checks for greater than\n        this.gt = function (a, b) {\n            return bool2Symbol(a.gt(b));\n        };\n        //checks for greater than equal\n        this.gte = function (a, b) {\n            return bool2Symbol(a.gte(b));\n        };\n        //checks for less than\n        this.lt = function (a, b) {\n            return bool2Symbol(a.lt(b));\n        };\n        //checks for less than equal\n        this.lte = function (a, b) {\n            return bool2Symbol(a.lte(b));\n        };\n        //wraps the factorial\n        this.factorial = function (a) {\n            return this.symfunction(FACTORIAL, [a]);\n        };\n        //wraps the double factorial\n        this.dfactorial = function (a) {\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\n        };\n    }\n    ;\n\n    /* \"STATIC\" */\n    //converts a number to a fraction.\n    var Fraction = {\n        /**\n         * Converts a decimal to a fraction\n         * @param {number} value\n         * @param {object} opts\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        convert: function (value, opts) {\n            var frac;\n            if (value === 0) {\n                frac = [0, 1];\n            }\n            else {\n                if (value < 1e-6 || value > 1e20) {\n                    var qc = this.quickConversion(Number(value));\n                    if (qc[1] <= 1e20) {\n                        var abs = Math.abs(value);\n                        var sign = value / abs;\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\n                        frac[0] = frac[0] * sign;\n                    }\n                    else {\n                        frac = qc;\n                    }\n                }\n                else {\n                    frac = this.fullConversion(value);\n                }\n            }\n            return frac;\n        },\n        /**\n         * If the fraction is too small or too large this gets called instead of fullConversion method\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        quickConversion: function (dec) {\n            var x = (dec.toExponential() + '').split('e');\n            var d = x[0].split('.')[1];// get the number of places after the decimal\n            var l = (d ? d.length : 0)-parseInt(x[1]); // maybe the coefficient is an integer;\n            //call Math.round to avoid rounding error\n            return [Math.round(Math.pow(10, l) * x[0]), Math.pow(10, Math.abs(x[1]) + l)];\n        },\n        /**\n         * Returns a good approximation of a fraction. This method gets called by convert\n         * http://mathforum.org/library/drmath/view/61772.html\n         * Decimal To Fraction Conversion - A Simpler Version\n         * Dr Peterson\n         * @param {number} dec\n         * @returns {Array} - an array containing the denominator and the numerator\n         */\n        fullConversion: function (dec) {\n            var done = false;\n            //you can adjust the epsilon to a larger number if you don't need very high precision\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\n            while (!done) {\n                n++;\n                if (n > 10000) {\n                    done = true;\n                }\n                var a = Math.floor(q);\n                var num = n1 + a * n2;\n                var den = d1 + a * d2;\n                var e = (q - a);\n                if (e < epsilon) {\n                    done = true;\n                }\n                q = 1 / e;\n                n1 = n2;\n                d1 = d2;\n                n2 = num;\n                d2 = den;\n                if (Math.abs(num / den - dec) < epsilon || n > 30) {\n                    done = true;\n                }\n            }\n            return [num, den];\n        }\n    };\n    //Depends on Fraction\n\n    //The latex generator\n    var LaTeX = {\n        parser: (function () {\n            //create a parser and strip it from everything except the items that you need\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\n            var parser = new Parser();\n            for (var x in parser) {\n                if (keep.indexOf(x) === -1)\n                    delete parser[x];\n            }\n            //declare the operators\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\',\n                action: 'slash',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            });\n            parser.setOperator({\n                precedence: 8,\n                operator: '\\\\,',\n                action: 'slash_comma',\n                prefix: true,\n                postfix: false,\n                leftAssoc: true,\n                operation: function (e) {\n                    return e; //bypass the slash\n                }\n            });\n            //have braces not map to anything. We want them to be return as-is\n            var brackets = parser.getBrackets();\n            brackets['{'].maps_to = undefined;\n            return parser;\n        })(),\n        space: '~',\n        dot: ' \\\\cdot ',\n        //grab a list of supported functions but remove the excluded ones found in exclFN\n\n        latex: function (symbol, option) {\n            //it might be an array\n            if (symbol.clone) {\n                symbol = symbol.clone(); //leave original as-is\n            }\n            if (symbol instanceof _.classes.Collection)\n                symbol = symbol.elements;\n\n            if (isArray(symbol)) {\n                var LaTeXArray = [];\n                for (var i = 0; i < symbol.length; i++) {\n                    var sym = symbol[i];\n                    //This way I can generate LaTeX on an array of strings.\n                    if (!isSymbol(sym))\n                        sym = _.parse(sym);\n                    LaTeXArray.push(this.latex(sym, option));\n                }\n                return this.brackets(LaTeXArray.join(', '), 'square');\n            }\n\n            else if (isMatrix(symbol)) {\n                var TeX = '\\\\begin{pmatrix}\\n';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    var rowTeX = [],\n                            e = symbol.elements[i];\n                    for (var j = 0; j < e.length; j++) {\n                        rowTeX.push(this.latex(e[j], option));\n                    }\n                    TeX += rowTeX.join(' & ');\n                    if (i < symbol.elements.length - 1) {\n                        TeX += '\\\\\\\\\\n';\n                    }\n                }\n                TeX += '\\\\end{pmatrix}';\n                return TeX;\n            }\n\n            else if (isVector(symbol)) {\n                var TeX = '\\\\left[';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\right]';\n                return TeX;\n            }\n\n            else if(isSet(symbol)) {\n                var TeX = '\\\\{';\n                for (var i = 0; i < symbol.elements.length; i++) {\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\n                }\n                TeX += '\\\\}';\n                return TeX;\n            }\n\n            symbol = symbol.clone();\n            var decimal = (option === 'decimal' || option === 'decimals'),\n                    power = symbol.power,\n                    invert = isNegative(power),\n                    negative = symbol.multiplier.lessThan(0);\n\n            if (symbol.group === P && decimal) {\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\n            }\n            else {\n                symbol.multiplier = symbol.multiplier.abs();\n\n                //if the user wants the result in decimal format then return it as such by placing it at the top part\n                var m_array;\n\n                if (decimal) {\n                    var m = String(symbol.multiplier.toDecimal());\n                    //if(String(m) === '1' && !decimal) m = '';\n                    m_array = [m, ''];\n                }\n                else {\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\n                }\n                //get the value as a two part array\n                var v_array = this.value(symbol, invert, option, negative),\n                        p;\n                //make it all positive since we know whether to push the power to the numerator or denominator already.\n                if (invert)\n                    power.negate();\n                //the power is simple since it requires no additional formatting. We can get it to a\n                //string right away. pass in true to neglect unit powers\n                if (decimal) {\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\n                    if (String(p) === '1')\n                        p = '';\n                }\n                //get the latex representation\n                else if (isSymbol(power))\n                    p = this.latex(power, option);\n                //get it as a fraction\n                else\n                    p = this.formatFrac(power, true);\n                //use this array to specify if the power is getting attached to the top or the bottom\n                var p_array = ['', ''],\n                        //stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\n                        index = invert ? 1 : 0;\n                p_array[index] = p;\n\n                //special case group P and decimal\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\n\n                return retval.replace(/\\+\\-/gi, '-');\n            }\n\n        },\n        //greek mapping\n        greek: {\n            alpha: '\\\\alpha',\n            beta: '\\\\beta',\n            gamma: '\\\\gamma',\n            delta: '\\\\delta',\n            epsilon: '\\\\epsilon',\n            zeta: '\\\\zeta',\n            eta: '\\\\eta',\n            theta: '\\\\theta',\n            iota: '\\\\iota',\n            kappa: '\\\\kappa',\n            lambda: '\\\\lambda',\n            mu: '\\\\mu',\n            nu: '\\\\nu',\n            xi: '\\\\xi',\n            omnikron: '\\\\omnikron',\n            pi: '\\\\pi',\n            rho: '\\\\rho',\n            sigma: '\\\\sigma',\n            tau: '\\\\tau',\n            upsilon: '\\\\upsilon',\n            phi: '\\\\phi',\n            chi: '\\\\chi',\n            psi: '\\\\psi',\n            omega: '\\\\omega',\n            Gamma: '\\\\Gamma',\n            Delta: '\\\\Delta',\n            Epsilon: '\\\\Epsilon',\n            Theta: '\\\\Theta',\n            Lambda: '\\\\Lambda',\n            Xi: '\\\\Xi',\n            Pi: '\\\\Pi',\n            Sigma: '\\\\Sigma',\n            Phi: '\\\\Phi',\n            Psi: '\\\\Psi',\n            Omega: '\\\\Omega'\n        },\n        symbols: {\n            arccos: '\\\\arccos',\n            cos: '\\\\cos',\n            csc: '\\\\csc',\n            exp: '\\\\exp',\n            ker: '\\\\ker',\n            limsup: '\\\\limsup',\n            min: '\\\\min',\n            sinh: '\\\\sinh',\n            arcsin: '\\\\arcsin',\n            cosh: '\\\\cosh',\n            deg: '\\\\deg',\n            gcd: '\\\\gcd',\n            lg: '\\\\lg',\n            ln: '\\\\ln',\n            Pr: '\\\\Pr',\n            sqrt: '\\\\sqrt',\n            sup: '\\\\sup',\n            arctan: '\\\\arctan',\n            cot: '\\\\cot',\n            det: '\\\\det',\n            hom: '\\\\hom',\n            lim: '\\\\lim',\n            log: '\\\\log',\n            LN:  '\\\\LN',\n            sec: '\\\\sec',\n            tan: '\\\\tan',\n            arg: '\\\\arg',\n            coth: '\\\\coth',\n            dim: '\\\\dim',\n            inf: '\\\\inf',\n            liminf: '\\\\liminf',\n            max: '\\\\max',\n            sin: '\\\\sin',\n            tanh: '\\\\tanh'\n        },\n        //get the raw value of the symbol as an array\n        value: function (symbol, inverted, option, negative) {\n            var group = symbol.group,\n                    previousGroup = symbol.previousGroup,\n                    v = ['', ''],\n                    index = inverted ? 1 : 0;\n            /*if(group === N) //do nothing since we want to return top & bottom blank; */\n            if (symbol.isInfinity) {\n                v[index] = '\\\\infty';\n            }\n            else if (group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\n                var value = symbol.value;\n                if (value.replace)\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\n                //split it so we can check for instances of alpha as well as alpha_b\n                var t_varray = String(value).split('_');\n                var greek = this.greek[t_varray[0]];\n                if (greek) {\n                    t_varray[0] = greek;\n                    value = t_varray.join('_');\n                }\n                var symbol = this.symbols[t_varray[0]];\n                if (symbol) {\n                    t_varray[0] = symbol;\n                    value = t_varray.join('_');\n                }\n                v[index] = value;\n            }\n            else if (group === FN || previousGroup === FN) {\n                var name,\n                        input = [],\n                        fname = symbol.fname;\n                //collect the arguments\n                for (var i = 0; i < symbol.args.length; i++) {\n                    var arg = symbol.args[i], item;\n                    if (typeof arg === 'string')\n                        item = arg;\n                    else {\n                        item = this.latex(arg, option);\n                    }\n                    input.push(item);\n                }\n\n                if (fname === SQRT) {\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\n                }\n                else if (fname === ABS) {\n                    v[index] = this.brackets(input.join(','), 'abs');\n                }\n                else if (fname === PARENTHESIS) {\n                    v[index] = this.brackets(input.join(','), 'parens');\n                }\n                else if (fname === 'limit') {\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\n                }\n                else if (fname === 'integrate') {\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\n                }\n                else if (fname === 'defint') {\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\n                }\n                else if (fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\n                    var arg = symbol.args[0];\n                    if (arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\n                        input[0] = this.brackets(input[0]);\n                    }\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\n                }\n                else if (fname === 'floor') {\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\n                }\n                else if (fname === 'ceil') {\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\n                }\n                //capture log(a, b)\n                else if (fname === Settings.LOG && input.length > 1) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\n                }\n                //capture log(a, b)\n                else if (fname === Settings.LOG10) {\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\n                }\n                else if (fname === 'sum') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if (fname === 'product') {\n                    var a = input[0],\n                            b = input[1],\n                            c = input[2],\n                            d = input[3];\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\n                }\n                else if (fname === 'nthroot') {\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\n                }\n                else if (fname === 'mod') {\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\n                }\n                else if (fname === 'realpart') {\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\n                }\n                else if (fname === 'imagpart') {\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\n                }\n                else {\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\n                    if (symbol.isConversion)\n                        v[index] = name + this.brackets(input.join(''), 'parens');\n                    else\n                        v[index] = name + this.brackets(input.join(','), 'parens');\n                }\n            }\n            else if (symbol.isComposite()) {\n                var collected = symbol.collectSymbols().sort(\n                        group === CP || previousGroup === CP ?\n                        function (a, b) {\n                            return b.group - a.group;\n                        } :\n                        function (a, b) {\n                            var x = isSymbol(a.power) ? -1 : a.power;\n                            var y = isSymbol(b.power) ? -1 : b.power;\n                            return y - x;\n                        }\n                ),\n                        symbols = [],\n                        l = collected.length;\n                for (var i = 0; i < l; i++) {\n                    symbols.push(LaTeX.latex(collected[i], option));\n                }\n                var value = symbols.join('+');\n\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\n            }\n            else if (group === CB || previousGroup === EX || previousGroup === CB) {\n                if (group === CB)\n                    symbol.distributeExponent();\n                //this almost feels a little like cheating but I need to know if I should be wrapping the symbol\n                //in brackets or not. We'll do this by checking the value of the numerator and then comparing it\n                //to whether the symbol value is \"simple\" or not.\n                var denominator = [],\n                        numerator = [];\n                //generate a profile\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\n                var setBrackets = function (container, map, counter) {\n                    if (counter > 1 && map.length > 0) {\n                        var l = map.length;\n                        for (var i = 0; i < l; i++) {\n                            var idx = map[i], item = container[idx];\n                            if (!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\n                                container[idx] = LaTeX.brackets(item, 'parens');\n                            }\n                        }\n                    }\n                    return container;\n                };\n\n                //generate latex for each of them\n                symbol.each(function (x) {\n                    var isDenom = isNegative(x.power),\n                            laTex;\n\n                    if (isDenom) {\n                        laTex = LaTeX.latex(x.invert(), option);\n                        den_c++;\n                        if (x.isComposite()) {\n                            if (symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            den_map.push(denominator.length); //make a note of where the composite was found\n                        }\n\n                        denominator.push(laTex);\n                    }\n                    else {\n                        laTex = LaTeX.latex(x, option);\n                        num_c++;\n                        if (x.isComposite()) {\n                            if (symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\n                                laTex = LaTeX.brackets(laTex, 'parens');\n                            num_map.push(numerator.length);   //make a note of where the composite was found\n                        }\n                        numerator.push(laTex);\n                    }\n                });\n\n                //apply brackets\n                setBrackets(numerator, num_map, num_c);\n                v[0] = numerator.join(this.dot); //collapse the numerator into one string\n\n                setBrackets(denominator, den_map, den_c);\n                v[1] = denominator.join(this.dot);\n            }\n\n            return v;\n        },\n        set: function (m, v, p, combine_power) {\n            var isBracketed = function (v) {\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\n            };\n            //format the power if it exists\n            if (p)\n                p = this.formatP(p);\n            //group CB will have to be wrapped since the power applies to both it's numerator and denominator\n            if (combine_power) {\n                //POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\n                //the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\n                //of a case where this isn't true\n                var tp = p[0];\n                p[0] = ''; //temporarily make p blank\n            }\n\n            //merge v and p. Not that v MUST be first since the order matters\n            v = this.merge(v, p);\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\n            //filters\n            //if the top has a variable but the numerator is one drop it\n            if (vn && Number(mn) === 1)\n                mn = '';\n            //if denominator is 1 drop it always\n            if (Number(md) === 1)\n                md = '';\n            //prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\n\n            //prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\n            //format the power if it exists\n            //make it a fraction if both top and bottom exists\n            if (top && bottom) {\n                var frac = this.frac(top, bottom);\n                if (combine_power && tp)\n                    frac = this.brackets(frac) + tp;\n                return frac;\n            }\n            //otherwise only the top exists so return that\n            else\n                return top;\n        },\n        merge: function (a, b) {\n            var r = [];\n            for (var i = 0; i < 2; i++)\n                r[i] = a[i] + b[i];\n            return r;\n        },\n        //joins together two strings if both exist\n        join: function (n, d, glue) {\n            if (!n && !d)\n                return '';\n            if (n && !d)\n                return n;\n            if (d && !n)\n                return d;\n            return n + glue + d;\n        },\n        formatP: function (p_array) {\n            for (var i = 0; i < 2; i++) {\n                var p = p_array[i];\n                if (p)\n                    p_array[i] = '^' + this.braces(p);\n            }\n            return p_array;\n        },\n        /**\n         * formats the fractions accordingly.\n         * @param {Frac} f\n         * @param {bool} is_pow\n         */\n        formatFrac: function (f, is_pow) {\n            var n = f.num.toString(),\n                    d = f.den.toString();\n            //no need to have x^1\n            if (is_pow && n === '1' && d === '1')\n                return '';\n            //no need to have x/1\n            if (d === '1')\n                return n;\n            return this.frac(n, d);\n        },\n        frac: function (n, d) {\n            return '\\\\frac' + this.braces(n) + this.braces(d);\n        },\n        braces: function (e) {\n            return '{' + e + '}';\n        },\n        brackets: function (e, typ) {\n            typ = typ || 'parens';\n            var bracketTypes = {\n                parens: ['(', ')'],\n                square: ['[', ']'],\n                brace: ['{', '}'],\n                abs: ['|', '|'],\n                angle: ['\\\\langle', '\\\\rangle']\n            };\n            var bracket = bracketTypes[typ];\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\n        },\n        /**\n         * Removes extreneous tokens\n         * @param {Tokens[]} tokens\n         * @returns {Tokens[]}\n         */\n        filterTokens: function (tokens) {\n            var filtered = [];\n            //the items that need to be disposed\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\n            for (var i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                if (isArray(token))\n                    filtered.push(LaTeX.filterTokens(token));\n                else if (d.indexOf(token.value) === -1)\n                    filtered.push(token);\n            }\n            return filtered;\n        },\n        /*\n         * Parses tokens from LaTeX string. Does not do any error checking\n         * @param {Tokens[]} rpn\n         * @returns {String}\n         */\n        parse: function (raw_tokens) {\n            var i, l;\n            var retval = '';\n            var tokens = this.filterTokens(raw_tokens);\n            var replace = {\n                'cdot': '',\n                'times': '',\n                'infty': 'Infinity'\n            };\n            //get the next token\n            var next = function () {\n                return tokens[++i];\n            };\n            var parse_next = function () {\n                return LaTeX.parse(next());\n            };\n            var get = function (token) {\n                if (token in replace)\n                    return replace[token];\n                return token;\n            };\n\n            //start parsing the tokens\n            for (i = 0, l = tokens.length; i < l; i++) {\n                var token = tokens[i];\n                //fractions\n                if (token.value === 'frac') {\n                    //parse and wrap it in brackets\n                    var n = parse_next();\n                    var d = parse_next();\n                    retval += n + '/' + d;\n                }\n                else if (token.value in LaTeX.symbols) {\n                    retval += token.value + parse_next();\n                }\n                else if (token.value === 'int') {\n                    var f = parse_next();\n                    //skip the comma\n                    i++;\n                    //get the variable of integration\n                    var dx = next().value;\n                    dx = get(dx.substring(1, dx.length));\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\n                }\n                else if (token.value === 'mathrm') {\n                    var f = tokens[++i][0].value;\n                    retval += f + parse_next();\n                }\n                //sum and product\n                else if (token.value === 'sum_' || token.value === 'prod_') {\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\n                    var nxt = next();\n                    i++; //skip the caret\n                    var end = parse_next();\n                    var f = parse_next();\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\n                }\n                else if (token.value === 'lim_') {\n                    var nxt = next();\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\n                }\n                else {\n                    if(Array.isArray(token)) {\n                        retval += get(LaTeX.parse(token));\n                    }\n                    else\n                        retval += get(token.value.toString());\n                }\n            }\n            return inBrackets(retval);\n        }\n    };\n//Vector =======================================================================\n    function Vector(v) {\n        if (isVector(v))\n            this.elements = v.items.slice(0);\n        else if (isArray(v))\n            this.elements = v.slice(0);\n        else\n            this.elements = [].slice.call(arguments);\n    }\n    /*\n     * Generates a pre-filled array\n     * @param {type} n\n     * @param {type} val\n     * @returns {unresolved}\n     */\n    Vector.arrayPrefill = function (n, val) {\n        var a = [];\n        val = val || 0;\n        for (var i = 0; i < n; i++)\n            a[i] = val;\n        return a;\n    };\n    /**\n     * Generate a vector from and array\n     * @param {type} a\n     * @returns {unresolved}\n     */\n    Vector.fromArray = function (a) {\n        var v = new Vector();\n        v.elements = a;\n        return v;\n    };\n\n    /**\n     * Convert a Set to a Vector\n     * @param {Set} set\n     * @returns {Vector}\n     */\n    Vector.fromSet = function(set) {\n        return Vector.fromArray(set.elements);\n    };\n\n    //Ported from Sylvester.js\n    Vector.prototype = {\n        custom: true,\n        // Returns element i of the vector\n        e: function (i) {\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\n        },\n\n        set: function (i, val) {\n            if (!isSymbol(val))\n                val = new Symbol(val);\n            this.elements[i] = val;\n        },\n\n        // Returns the number of elements the vector has\n        dimensions: function () {\n            return this.elements.length;\n        },\n\n        // Returns the modulus ('length') of the vector\n        modulus: function () {\n            return block('SAFE', function () {\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is equal to the argument\n        eql: function (vector) {\n            var n = this.elements.length;\n            var V = vector.elements || vector;\n            if (n !== V.length) {\n                return false;\n            }\n            do {\n                if (Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > Settings.PRECISION) {\n                    return false;\n                }\n            }\n            while (--n);\n            return true;\n        },\n\n        // Returns a clone of the vector\n        clone: function () {\n            var V = new Vector(),\n                    l = this.elements.length;\n            for (var i = 0; i < l; i++) {\n                //Rule: all items within the vector must have a clone method.\n                V.elements.push(this.elements[i].clone());\n            }\n            if (this.getter) {\n                V.getter = this.getter.clone();\n            }\n            return V;\n        },\n\n        // Maps the vector to another vector according to the given function\n        map: function (fn) {\n            var elements = [];\n            this.each(function (x, i) {\n                elements.push(fn(x, i));\n            });\n\n            return new Vector(elements);\n        },\n\n        // Calls the iterator for each element of the vector in turn\n        each: function (fn) {\n            var n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                fn(this.elements[i], i + 1);\n            }\n            while (--n);\n        },\n\n        // Returns a new vector created by normalizing the receiver\n        toUnitVector: function () {\n            return block('SAFE', function () {\n                var r = this.modulus();\n                if (r.valueOf() === 0) {\n                    return this.clone();\n                }\n                return this.map(function (x) {\n                    return _.divide(x, r);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the angle between the vector and the argument (also a vector)\n        angleFrom: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var n = this.elements.length;\n                if (n !== V.length) {\n                    return null;\n                }\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\n                // Work things out in parallel to save time\n                this.each(function (x, i) {\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\n                    mod1 = _.add(mod1, _.multiply(x, x));//will not conflict in safe block\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));//will not conflict in safe block\n                });\n                mod1 = _.pow(mod1, new Symbol(0.5));\n                mod2 = _.pow(mod2, new Symbol(0.5));\n                var product = _.multiply(mod1, mod2);\n                if (product.valueOf() === 0) {\n                    return null;\n                }\n                var theta = _.divide(dot, product);\n                var theta_val = theta.valueOf();\n                if (theta_val < -1) {\n                    theta = -1;\n                }\n                if (theta_val > 1) {\n                    theta = 1;\n                }\n                return new Symbol(Math.acos(theta));\n            }, undefined, this);\n        },\n\n        // Returns true iff the vector is parallel to the argument\n        isParallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (angle <= Settings.PRECISION);\n        },\n\n        // Returns true iff the vector is antiparallel to the argument\n        isAntiparallelTo: function (vector) {\n            var angle = this.angleFrom(vector).valueOf();\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Settings.PRECISION);\n        },\n\n        // Returns true iff the vector is perpendicular to the argument\n        isPerpendicularTo: function (vector) {\n            var dot = this.dot(vector);\n            return (dot === null) ? null : (Math.abs(dot) <= Settings.PRECISION);\n        },\n\n        // Returns the result of adding the argument to the vector\n        add: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if (this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.add(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of subtracting the argument from the vector\n        subtract: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                if (this.elements.length !== V.length) {\n                    return null;\n                }\n                return this.map(function (x, i) {\n                    return _.subtract(x, V[i - 1]);\n                });\n            }, undefined, this);\n        },\n\n        // Returns the result of multiplying the elements of the vector by the argument\n        multiply: function (k) {\n            return this.map(function (x) {\n                return x.clone() * k.clone();\n            });\n        },\n\n        x: function (k) {\n            return this.multiply(k);\n        },\n\n        // Returns the scalar product of the vector with the argument\n        // Both vectors must have equal dimensionality\n        dot: function (vector) {\n            return block('SAFE', function () {\n                var V = vector.elements || vector;\n                var product = new Symbol(0), n = this.elements.length;\n                if (n !== V.length) {\n                    return null;\n                }\n                do {\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\n                }\n                while (--n);\n                return product;\n            }, undefined, this);\n        },\n\n        // Returns the vector product of the vector with the argument\n        // Both vectors must have dimensionality 3\n        cross: function (vector) {\n            var B = vector.elements || vector;\n            if (this.elements.length !== 3 || B.length !== 3) {\n                return null;\n            }\n            var A = this.elements;\n            return block('SAFE', function () {\n                return new Vector([\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\n                ]);\n            }, undefined, this);\n        },\n\n        // Returns the (absolute) largest element of the vector\n        max: function () {\n            var m = 0, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if (Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\n                    m = this.elements[i];\n                }\n            }\n            while (--n);\n            return m;\n        },\n        magnitude: function() {\n            var magnitude = new Symbol(0);\n            this.each(function(e) {\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\n            });\n            return _.sqrt(magnitude);\n        },\n        // Returns the index of the first match found\n        indexOf: function (x) {\n            var index = null, n = this.elements.length, k = n, i;\n            do {\n                i = k - n;\n                if (index === null && this.elements[i].valueOf() === x.valueOf()) {\n                    index = i + 1;\n                }\n            }\n            while (--n);\n            return index;\n        },\n        text: function (x) {\n            return text(this);\n        },\n        toString: function () {\n            return this.text();\n        },\n        latex: function (option) {\n            var tex = [];\n            for (var i = 0; i < this.elements.length; i++) {\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\n            }\n            return '[' + tex.join(', ') + ']';\n        }\n    };\n\n//Matrix =======================================================================\n    function Matrix() {\n        var m = arguments,\n                l = m.length, i, el = [];\n        if (isMatrix(m)) { //if it's a matrix then make a clone\n            for (i = 0; i < l; i++) {\n                el.push(m[i].slice(0));\n            }\n        }\n        else {\n            var row, lw, rl;\n            for (i = 0; i < l; i++) {\n                row = m[i];\n                if (isVector(row))\n                    row = row.elements;\n                if (!isArray(row))\n                    row = [row];\n                rl = row.length;\n                if (lw && lw !== rl)\n                    err('Unable to create Matrix. Row dimensions do not match!');\n                el.push(row);\n                lw = rl;\n            }\n        }\n        this.elements = el;\n    }\n    Matrix.identity = function (n) {\n        var m = new Matrix();\n        for (var i = 0; i < n; i++) {\n            m.elements.push([]);\n            for (var j = 0; j < n; j++) {\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\n            }\n        }\n        return m;\n    };\n    Matrix.fromArray = function (arr) {\n        function F(args) {\n            return Matrix.apply(this, args);\n        }\n        F.prototype = Matrix.prototype;\n\n        return new F(arr);\n    };\n    Matrix.zeroMatrix = function (rows, cols) {\n        var m = new Matrix();\n        for (var i = 0; i < rows; i++) {\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\n        }\n        return m;\n    };\n    Matrix.prototype = {\n        //needs be true to let the parser know not to try to cast it to a symbol\n        custom: true,\n        get: function (row, column) {\n            if (!this.elements[row])\n                return undefined;\n            return this.elements[row][column];\n        },\n        map: function(f, raw_values) {\n            var M = new Matrix();\n            this.each(function(e, i, j) {\n                M.set( i, j, f.call(M, e), raw_values);\n            });\n            return M;\n        },\n        set: function (row, column, value, raw) {\n            if (!this.elements[row])\n                this.elements[row] = [];\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\n        },\n        cols: function () {\n            return this.elements[0].length;\n        },\n        rows: function () {\n            return this.elements.length;\n        },\n        row: function (n) {\n            if (!n || n > this.cols())\n                return [];\n            return this.elements[n - 1];\n        },\n        col: function (n) {\n            var nr = this.rows(),\n                    col = [];\n            if (n > this.cols() || !n)\n                return col;\n            for (var i = 0; i < nr; i++) {\n                col.push(this.elements[i][n - 1]);\n            }\n            return col;\n        },\n        eachElement: function (fn) {\n            var nr = this.rows(),\n                    nc = this.cols(), i, j;\n            for (i = 0; i < nr; i++) {\n                for (j = 0; j < nc; j++) {\n                    fn.call(this, this.elements[i][j], i, j);\n                }\n            }\n        },\n        //ported from Sylvester.js\n        determinant: function () {\n            if (!this.isSquare()) {\n                return null;\n            }\n            var M = this.toRightTriangular();\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\n            do {\n                i = k - n + 1;\n                det = _.multiply(det, M.elements[i][i]);\n            }\n            while (--n);\n            return det;\n        },\n        isSquare: function () {\n            return this.elements.length === this.elements[0].length;\n        },\n        isSingular: function () {\n            return this.isSquare() && this.determinant() === 0;\n        },\n        augment: function (m) {\n            var r = this.rows(), rr = m.rows();\n            if (r !== rr)\n                err(\"Cannot augment matrix. Rows don't match.\");\n            for (var i = 0; i < r; i++) {\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\n            }\n\n            return this;\n        },\n        clone: function () {\n            var r = this.rows(), c = this.cols(),\n                    m = new Matrix();\n            for (var i = 0; i < r; i++) {\n                m.elements[i] = [];\n                for (var j = 0; j < c; j++) {\n                    var symbol = this.elements[i][j];\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\n                }\n            }\n            return m;\n        },\n        //ported from Sylvester.js\n        invert: function () {\n            if (!this.isSquare())\n                err('Matrix is not square!');\n            return block('SAFE', function () {\n                var ni = this.elements.length, ki = ni, i, j;\n                var imatrix = Matrix.identity(ni);\n                var M = this.augment(imatrix).toRightTriangular();\n                var np, kp = M.elements[0].length, p, els, divisor;\n                var inverse_elements = [], new_element;\n                // Matrix is non-singular so there will be no zeros on the diagonal\n                // Cycle through rows from last to first\n                do {\n                    i = ni - 1;\n                    // First, normalise diagonal elements to 1\n                    els = [];\n                    np = kp;\n                    inverse_elements[i] = [];\n                    divisor = M.elements[i][i];\n                    do {\n                        p = kp - np;\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\n                        els.push(new_element);\n                        // Shuffle of the current row of the right hand side into the results\n                        // array as it will not be modified by later runs through this loop\n                        if (p >= ki) {\n                            inverse_elements[i].push(new_element);\n                        }\n                    }\n                    while (--np);\n                    M.elements[i] = els;\n                    // Then, subtract this row from those above it to\n                    // give the identity matrix on the left hand side\n                    for (j = 0; j < i; j++) {\n                        els = [];\n                        np = kp;\n                        do {\n                            p = kp - np;\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\n                        }\n                        while (--np);\n                        M.elements[j] = els;\n                    }\n                }\n                while (--ni);\n                return Matrix.fromArray(inverse_elements);\n            }, undefined, this);\n        },\n        //ported from Sylvester.js\n        toRightTriangular: function () {\n            return block('SAFE', function () {\n                var M = this.clone(), els, fel, nel,\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\n                do {\n                    i = k - n;\n                    fel = M.elements[i][i];\n                    if (fel.valueOf() === 0) {\n                        for (var j = i + 1; j < k; j++) {\n                            nel = M.elements[j][i];\n                            if (nel && nel.valueOf() !== 0) {\n                                els = [];\n                                np = kp;\n                                do {\n                                    p = kp - np;\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\n                                }\n                                while (--np);\n                                M.elements[i] = els;\n                                break;\n                            }\n                        }\n                    }\n                    var fel = M.elements[i][i];\n                    if (fel.valueOf() !== 0) {\n                        for (j = i + 1; j < k; j++) {\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\n                            els = [];\n                            np = kp;\n                            do {\n                                p = kp - np;\n                                // Elements with column numbers up to an including the number\n                                // of the row that we're subtracting can safely be set straight to\n                                // zero, since that's the point of this routine and it avoids having\n                                // to loop over and correct rounding errors later\n                                els.push(p <= i ? new Symbol(0) :\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\n                            }\n                            while (--np);\n                            M.elements[j] = els;\n                        }\n                    }\n                }\n                while (--n);\n\n                return M;\n            }, undefined, this);\n        },\n        transpose: function () {\n            var rows = this.elements.length, cols = this.elements[0].length;\n            var M = new Matrix(), ni = cols, i, nj, j;\n\n            do {\n                i = cols - ni;\n                M.elements[i] = [];\n                nj = rows;\n                do {\n                    j = rows - nj;\n                    M.elements[i][j] = this.elements[j][i].clone();\n                }\n                while (--nj);\n            }\n            while (--ni);\n            return M;\n        },\n        // Returns true if the matrix can multiply the argument from the left\n        canMultiplyFromLeft: function (matrix) {\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\n            // this.columns should equal matrix.rows\n            return (this.elements[0].length === l);\n        },\n        sameSize: function (matrix) {\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\n        },\n        multiply: function (matrix) {\n            return block('SAFE', function () {\n                var M = matrix.elements || matrix;\n                if (!this.canMultiplyFromLeft(M)) {\n                    if (this.sameSize(matrix)) {\n                        var MM = new Matrix();\n                        var rows = this.rows();\n                        for (var i = 0; i < rows; i++) {\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\n                            MM.elements[i] = e.elements;\n                        }\n                        return MM;\n                    }\n                    return null;\n                }\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\n                do {\n                    i = ki - ni;\n                    elements[i] = [];\n                    nj = kj;\n                    do {\n                        j = kj - nj;\n                        sum = new Symbol(0);\n                        nc = cols;\n                        do {\n                            c = cols - nc;\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\n                        }\n                        while (--nc);\n                        elements[i][j] = sum;\n                    }\n                    while (--nj);\n                }\n                while (--ni);\n                return Matrix.fromArray(elements);\n            }, undefined, this);\n        },\n        add: function (matrix, callback) {\n            var M = new Matrix();\n            if (this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        subtract: function (matrix, callback) {\n            var M = new Matrix();\n            if (this.sameSize(matrix)) {\n                this.eachElement(function (e, i, j) {\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\n                    if(callback) {\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\n                    }\n                    M.set(i, j, result);\n                });\n            }\n            return M;\n        },\n        negate: function () {\n            this.each(function (e) {\n                return e.negate();\n            });\n            return this;\n        },\n        toVector: function () {\n            if (this.rows() === 1 || this.cols() === 1) {\n                var v = new Vector();\n                v.elements = this.elements;\n                return v;\n            }\n            return this;\n        },\n        toString: function (newline, to_decimal) {\n            var l = this.rows(),\n                    s = [];\n            newline = newline === undefined ? '\\n' : newline;\n            for (var i = 0; i < l; i++) {\n                s.push('[' + this.elements[i].map(function (x) {\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\n                    return x !== undefined ? v : '';\n                }).join(',') + ']');\n            }\n            return 'matrix' + inBrackets(s.join(','));\n        },\n        text: function () {\n            return 'matrix(' + this.elements.toString('') + ')';\n        },\n        latex: function (option) {\n            var cols = this.cols(), elements = this.elements;\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\n                var tex = [];\n                for (var row in elements) {\n                    var row_tex = [];\n                    for (var i = 0; i < cols; i++) {\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\n                    }\n                    tex.push(row_tex.join(' & '));\n                }\n                return tex.join(' \\\\cr ');\n            });\n        }\n    };\n    //aliases\n    Matrix.prototype.each = Matrix.prototype.eachElement;\n\n\n    function Set(set) {\n        this.elements = [];\n        //if the first object isn't an array, convert it to one.\n        if(!isVector(set))\n            set = Vector.fromArray(arguments);\n\n        if(set) {\n            var elements = set.elements;\n            for(var i=0, l=elements.length; i<l; i++) {\n                this.add(elements[i]);\n            }\n        }\n    }\n\n    Set.fromArray = function (arr) {\n        function F(args) {\n            return Set.apply(this, args);\n        }\n        F.prototype = Set.prototype;\n\n        return new F(arr);\n    };\n\n    Set.prototype = {\n        add: function(x) {\n            if(!this.contains(x))\n                this.elements.push(x.clone());\n        },\n        contains: function(x) {\n            for(var i=0; i<this.elements.length; i++) {\n                var e = this.elements[i];\n                if(x.equals(e))\n                    return true;\n            }\n            return false;\n        },\n        each: function(f) {\n            var elements = this.elements;\n            var set = new Set();\n            for(var i=0, l=elements.length; i<l; i++) {\n                var e = elements[i];\n                f.call(this, e, set, i);\n            }\n            return set;\n        },\n        clone: function() {\n            var set = new Set();\n            this.each(function(e) {\n                set.add(e.clone());\n            });\n            return set;\n        },\n        union: function(set) {\n            var _union = this.clone();\n            set.each(function(e) {\n                _union.add(e);\n            });\n\n            return _union;\n        },\n        difference: function(set) {\n            var diff = this.clone();\n            set.each(function(e) {\n                diff.remove(e);\n            });\n            return diff;\n        },\n        remove: function(element) {\n            for(var i=0, l=this.elements.length; i<l; i++) {\n                var e = this.elements[i];\n                if(e.equals(element)) {\n                    remove(this.elements, i);\n                    return true;\n                }\n            }\n            return false;\n        },\n        intersection: function(set) {\n            var _intersection = new Set();\n            var A = this;\n            set.each(function(e) {\n                if(A.contains(e)) {\n                    _intersection.add(e);\n                };\n            });\n\n            return _intersection;\n        },\n        intersects: function(set) {\n            return this.intersection(set).elements.length > 0;\n        },\n        is_subset: function(set) {\n            var elements = set.elements;\n            for(var i=0, l=elements.length; i<l; i++) {\n                if(!this.contains(elements[i])) {\n                    return false;\n                }\n            }\n            return true;\n        },\n        toString: function() {\n            return '{'+this.elements.join(',')+'}';\n        }\n    };\n\n//build ========================================================================\n    var Build = {\n        dependencies: {\n            _rename: {\n                'Math2.factorial': 'factorial'\n            },\n            factorial: {\n                'Math2.gamma': Math2.gamma\n            },\n            gamma_incomplete: {\n                'Math2.factorial': Math2.factorial\n            },\n            Li: {\n                'Math2.Ei': Math2.Ei,\n                'Math2.bigLog': Math2.bigLog,\n                'Frac': Frac\n            },\n            Ci: {\n                'Math2.factorial': Math2.factorial\n            },\n            Ei: {\n                'Math2.factorial': Math2.factorial\n            },\n            Si: {\n                'Math2.factorial': Math2.factorial\n            },\n            Shi: {\n                'Math2.factorial': Math2.factorial\n            },\n            Chi: {\n                'isInt': isInt,\n                'nround': nround,\n                'Math2.num_integrate': Math2.num_integrate\n            },\n            factor: {\n                'Math2.ifactor': Math2.ifactor,\n                'Symbol': Symbol\n            },\n            num_integrate: {\n                'Math2.simpson': Math2.simpson,\n                'nround': nround\n            },\n            fib: {\n                'even': even\n            }\n        },\n        /* Some functions need to be made numeric safe. Build checks if there's a\n         * reformat option and calls that instead when compiling the function string.\n         */\n        reformat: {\n            //this simply extends the build function\n            diff: function(symbol, deps) {\n                var f = 'var f = '+Build.build(symbol.args[0].toString())+';';\n                deps[1] += 'var diff = '+Math2.diff.toString()+';';\n                deps[1] += f;\n\n                return ['diff(f)('+symbol.args[1].toString()+')', deps];\n            }\n        },\n        getProperName: function(f) {\n            var map = {\n                continued_fraction: 'continuedFraction'\n            };\n            return map[f] || f;\n        },\n        //assumes that dependences are at max 2 levels\n        compileDependencies: function(f, deps) {\n            //grab the predefined dependiences\n            var dependencies = Build.dependencies[f];\n\n            //the dependency string\n            var dep_string = deps && deps[1] ? deps[1] : '';\n\n            //the functions to be replaced\n            var replacements = deps && deps[0] ? deps[0] : {};\n\n            //loop through them and add them to the list\n            for(var x in dependencies) {\n                if(typeof dependencies[x] === 'object')\n                    continue; //skip object\n                var components = x.split('.'); //Math.f becomes f\n                //if the function isn't part of an object then reference the function itself\n                dep_string += 'var '+(components.length > 1 ? components[1] : components[0])+'='+dependencies[x]+';';\n                replacements[x] = components.pop();\n            }\n\n            return [replacements, dep_string];\n        },\n        getArgsDeps: function(symbol, dependencies) {\n            var args = symbol.args;\n            for(var i=0; i<args.length; i++) {\n                symbol.args[i].each(function(x) {\n                    if(x.group === FN)\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\n                });\n            }\n            return dependencies;\n        },\n        build: function (symbol, arg_array) {\n            symbol = block('PARSE2NUMBER', function () {\n                return _.parse(symbol);\n            }, true);\n            var args = variables(symbol);\n            var supplements = [];\n            var dependencies = [];\n            var ftext = function (symbol, xports) {\n                xports = xports || [];\n                var c = [],\n                        group = symbol.group,\n                        prefix = '';\n\n                var ftext_complex = function (group) {\n                    var d = group === CB ? '*' : '+',\n                            cc = [];\n\n                    for (var x in symbol.symbols) {\n                        var sym = symbol.symbols[x],\n                                ft = ftext(sym, xports)[0];\n                        //wrap it in brackets if it's group PL or CP\n                        if (sym.isComposite())\n                            ft = inBrackets(ft);\n                        cc.push(ft);\n                    }\n                    var retval = cc.join(d);\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\n                    return retval;\n                },\n                ftext_function = function (bn) {\n                    var retval;\n                    if (bn in Math)\n                        retval = 'Math.' + bn;\n                    else {\n                        bn = Build.getProperName(bn);\n                        if (supplements.indexOf(bn) === -1) { //make sure you're not adding the function twice\n                            //Math2 functions aren't part of the standard javascript\n                            //Math library and must be exported.\n                            xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\n                            supplements.push(bn);\n                        }\n                        retval = bn;\n                    }\n                    retval = retval + inBrackets(symbol.args.map(function (x) {\n                        return ftext(x, xports)[0];\n                    }).join(','));\n\n                    return retval;\n                };\n\n                //the multiplier\n                if (group === N)\n                    c.push(symbol.multiplier.toDecimal());\n                else if (symbol.multiplier.equals(-1))\n                    prefix = '-';\n                else if (!symbol.multiplier.equals(1))\n                    c.push(symbol.multiplier.toDecimal());\n                //the value\n                var value;\n\n                if (group === S || group === P)\n                    value = symbol.value;\n                else if (group === FN) {\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\n                    if(Build.reformat[symbol.fname]) {\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\n                        dependencies = components[1];\n                        value = components[0];\n                    }\n                    else {\n                        value =  ftext_function(symbol.fname);\n                    }\n\n                }\n                else if (group === EX) {\n                    var pg = symbol.previousGroup;\n                    if (pg === N || pg === S)\n                        value = symbol.value;\n                    else if (pg === FN) {\n                        value = ftext_function(symbol.fname);\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\n                    }\n                    else\n                        value = ftext_complex(symbol.previousGroup);\n                }\n                else {\n                    value = ftext_complex(symbol.group);\n                }\n\n                if (symbol.group !== N && !symbol.power.equals(1)) {\n                    var pow = ftext(_.parse(symbol.power));\n                    xports.push(pow[1]);\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\n                }\n\n                if (value)\n                    c.push(prefix + value);\n\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\n            };\n            if (arg_array) {\n                for (var i = 0; i < args.length; i++) {\n                    var arg = args[i];\n                    if (arg_array.indexOf(arg) === -1)\n                        err(arg + ' not found in argument array');\n                }\n                args = arg_array;\n            }\n\n            var f_array = ftext(symbol);\n\n            //make all the substitutions;\n            for(var x in dependencies[0]) {\n                var alias = dependencies[0][x];\n                f_array[1] = f_array[1].replace(x, alias);\n                dependencies[1] = dependencies[1].replace(x, alias);\n            }\n\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\n\n            return f;\n        }\n    };\n\n\n//finalize =====================================================================\n    /* FINALIZE */\n    (function () {\n        reserveNames(_.CONSTANTS);\n        reserveNames(_.functions);\n        _.initConstants();\n        //bug fix for error but needs to be revisited\n        if (!_.error)\n            _.error = err;\n\n        //Store the log and log10 functions\n        Settings.LOG_FNS = {\n            log: _.functions['log'],\n            log10: _.functions['log10']\n        };\n\n    })();\n\n    /* END FINALIZE */\n\n//Core =========================================================================\n    var Utils = {\n        allSame: allSame,\n        allNumeric: allNumeric,\n        arguments2Array: arguments2Array,\n        arrayAddSlices: arrayAddSlices,\n        arrayClone: arrayClone,\n        arrayMax: arrayMax,\n        arrayMin: arrayMin,\n        arrayUnique: arrayUnique,\n        arraySum: arraySum,\n        block: block,\n        build: Build.build,\n        clearU: clearU,\n        comboSort: comboSort,\n        compare: compare,\n        convertToVector: convertToVector,\n        customError: customError,\n        customType: customType,\n        decompose_fn: decompose_fn,\n        each: each,\n        evaluate: evaluate,\n        even: even,\n        evenFraction: evenFraction,\n        fillHoles: fillHoles,\n        firstObject: firstObject,\n        format: format,\n        generatePrimes: generatePrimes,\n        getCoeffs: getCoeffs,\n        getU: getU,\n        importFunctions: importFunctions,\n        inBrackets: inBrackets,\n        isArray: isArray,\n        isExpression: isExpression,\n        isFraction: isFraction,\n        isInt: isInt,\n        isMatrix: isMatrix,\n        isNegative: isNegative,\n        isNumericSymbol: isNumericSymbol,\n        isPrime: isPrime,\n        isReserved: isReserved,\n        isSymbol: isSymbol,\n        isVariableSymbol: isVariableSymbol,\n        isVector: isVector,\n        keys: keys,\n        nroots: nroots,\n        remove: remove,\n        reserveNames: reserveNames,\n        range: range,\n        round: nround,\n        sameSign: sameSign,\n        scientificToDecimal: scientificToDecimal,\n        separate: separate,\n        stringReplace: stringReplace,\n        text: text,\n        validateName: validateName,\n        variables: variables,\n        warn: warn\n    };\n\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\n    //to be used.\n    var C = {\n        groups: Groups,\n        Symbol: Symbol,\n        Expression: Expression,\n        Frac: Frac,\n        Vector: Vector,\n        Matrix: Matrix,\n        Parser: Parser,\n        Fraction: Fraction,\n        Math2: Math2,\n        LaTeX: LaTeX,\n        Utils: Utils,\n        PARSER: _,\n        PARENTHESIS: PARENTHESIS,\n        Settings: Settings,\n        err: err,\n        bigInt: bigInt,\n        bigDec: bigDec,\n        exceptions: exceptions\n    };\n\n//libExports ===================================================================\n    /**\n     *\n     * @param {String} expression the expression to be evaluated\n     * @param {Object} subs the object containing the variable values\n     * @param {Integer} location a specific location in the equation list to\n     * insert the evaluated expression\n     * @param {String} option additional options\n     * @returns {Expression}\n     */\n    var libExports = function (expression, subs, option, location) {\n        //is the user declaring a function?\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\n        if (fndec)\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\n\n        //var variable, fn, args;\n        //convert any expression passed in to a string\n        if (expression instanceof Expression)\n            expression = expression.toString();\n\n        var multi_options = isArray(option),\n                expand = 'expand',\n                numer = multi_options ? option.indexOf('numer') !== -1 : option === 'numer';\n        if ((multi_options ? option.indexOf(expand) !== -1 : option === expand)) {\n            expression = format('{0}({1})', expand, expression);\n        }\n        var e = block('PARSE2NUMBER', function () {\n            return _.parse(expression, subs);\n        }, numer || Settings.PARSE2NUMBER);\n\n        if (location) {\n            EXPRESSIONS[location - 1] = e;\n        }\n        else {\n            EXPRESSIONS.push(e);\n        }\n\n        /*\n         if(variable) libExports.setVar(variable, e);\n         if(fn) libExports.setFunction(fn, args, e);\n         */\n\n        return new Expression(e);\n    };\n    /**\n     * Converts expression into rpn form\n     * @param {String} expression\n     * @returns {Token[]}\n     */\n    libExports.rpn = function (expression) {\n        return _.tokenize(_.toRPN(expression));\n    };\n\n    /**\n     * Generates LaTeX from expression string\n     * @param {String} e\n     * @param {object} opt\n     * @returns {String}\n     */\n    libExports.convertToLaTeX = function (e, opt) {\n        return _.toTeX(e, opt);\n    };\n\n    /**\n     * Converts latex to text - Very very very basic at the moment\n     * @param {String} e\n     * @returns {String}\n     */\n    libExports.convertFromLaTeX = function (e) {\n        var txt = LaTeX.parse(_.tokenize(e));\n        return new Expression(_.parse(txt));\n    };\n\n    /**\n     * Get the version of nerdamer or a loaded add-on\n     * @param {String} add_on - The add-on being checked\n     * @returns {String} returns the version of nerdamer\n     */\n    libExports.version = function (add_on) {\n        if (add_on) {\n            try {\n                return C[add_on].version;\n            }\n            catch (e) {\n                return \"No module named \" + add_on + \" found!\";\n            }\n        }\n        return version;\n    };\n\n    /**\n     * Get nerdamer generated warnings\n     * @returns {String[]}\n     */\n    libExports.getWarnings = function () {\n        return WARNINGS;\n    };\n\n    /**\n     *\n     * @param {String} constant The name of the constant to be set\n     * @param {mixed} value The value of the constant\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setConstant = function (constant, value) {\n        validateName(constant);\n        if (!isReserved(constant)) {\n            //fix for issue #127\n            if (value === 'delete' || value === '') {\n                delete _.CONSTANTS[constant];\n            }\n            else {\n                if (isNaN(value))\n                    throw new NerdamerTypeError('Constant must be a number!');\n                _.CONSTANTS[constant] = value;\n            }\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a previously set constant\n     * @param {type} constant\n     * @returns {String}\n     */\n    libExports.getConstant = function (constant) {\n        return String(_.constant[constant]);\n    };\n\n    /**\n     *\n     * @param {String} name The name of the function\n     * @param {Array} params_array A list containing the parameter name of the functions\n     * @param {String} body The body of the function\n     * @returns {Boolean} returns true if succeeded and falls on fail\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\n     */\n    libExports.setFunction = setFunction;\n\n    /**\n     *\n     * @returns {C} Exports the nerdamer core functions and objects\n     */\n    libExports.getCore = function () {\n        return C;\n    };\n\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\n\n    /**\n     *\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\n     * @returns {String|Array}\n     */\n    libExports.reserved = function (asArray) {\n        if (asArray) {\n            return RESERVED;\n        }\n        return RESERVED.join(', ');\n    };\n\n    /**\n     *\n     * @param {Integer} equation_number the number of the equation to clear.\n     * If 'all' is supplied then all equations are cleared\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\n        if (equation_number === 'all') {\n            EXPRESSIONS = [];\n        }\n        else if (equation_number === 'last') {\n            EXPRESSIONS.pop();\n        }\n        else if (equation_number === 'first') {\n            EXPRESSIONS.shift();\n        }\n        else {\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\n        }\n        return this;\n    };\n\n    /**\n     * Alias for nerdamer.clear('all')\n     */\n    libExports.flush = function () {\n        this.clear('all');\n        return this;\n    };\n\n    /**\n     *\n     * @param {Boolean} asObject\n     * @param {Boolean} asLaTeX\n     * @param {String|String[]} option\n     * @returns {Array}\n     */\n    libExports.expressions = function (asObject, asLaTeX, option) {\n        var result = asObject ? {} : [];\n        for (var i = 0; i < EXPRESSIONS.length; i++) {\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\n            asObject ? result[i + 1] = eq : result.push(eq);\n        }\n        return result;\n    };\n\n    //the method for registering modules\n    libExports.register = function (obj) {\n        var core = this.getCore();\n\n        if (isArray(obj)) {\n            for (var i = 0; i < obj.length; i++) {\n                if (obj)\n                    this.register(obj[i]);\n            }\n        }\n        else if (obj && Settings.exclude.indexOf(obj.name) === -1) {\n            //make sure all the dependencies are available\n            if (obj.dependencies) {\n                for (var i = 0; i < obj.dependencies.length; i++)\n                    if (!core[obj.dependencies[i]])\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\n            }\n            //if no parent object is provided then the function does not have an address and cannot be called directly\n            var parent_obj = obj.parent,\n                    fn = obj.build.call(core); //call constructor to get function\n            if (parent_obj) {\n                if (!core[parent_obj])\n                    core[obj.parent] = {};\n\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\n                //attach the function to the core\n                ref_obj[obj.name] = fn;\n            }\n            if (obj.visible)\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\n\n        }\n    };\n\n    /**\n     * @param {String} name variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validateName = validateName;\n\n    /**\n     * @param {String} varname variable name\n     * @returns {boolean} validates if the profided string is a valid variable name\n     */\n    libExports.validVarName = function (varname) {\n        try {\n            validateName(varname);\n            return RESERVED.indexOf(varname) === -1;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n\n    /**\n     *\n     * @returns {Array} Array of functions currently supported by nerdamer\n     */\n    libExports.supported = function () {\n        return keys(_.functions);\n    };\n\n    /**\n     *\n     * @returns {Number} The number equations/expressions currently loaded\n     */\n    libExports.numEquations = libExports.numExpressions = function () {\n        return EXPRESSIONS.length;\n    };\n    /* END EXPORTS */\n\n    /**\n     *\n     * @param {String} v variable to be set\n     * @param {String} val value of variable. This can be a variable expression or number\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.setVar = function (v, val) {\n        validateName(v);\n        //check if it's not already a constant\n        if (v in _.CONSTANTS)\n            err('Cannot set value for constant ' + v);\n        if (val === 'delete' || val === '')\n            delete VARS[v];\n        else {\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\n        }\n        return this;\n    };\n\n    /**\n     * Returns the value of a set variable\n     * @param {type} v\n     * @returns {varies}\n     */\n    libExports.getVar = function (v) {\n        return VARS[v];\n    };\n    /**\n     * Clear the variables from the VARS object\n     * @returns {Object} Returns the nerdamer object\n     */\n    libExports.clearVars = function () {\n        VARS = {};\n        return this;\n    };\n\n    /**\n     *\n     * @param {Function} loader\n     * @returns {nerdamer}\n     */\n    libExports.load = function (loader) {\n        loader.call(this);\n        return this;\n    };\n\n    /**\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\n     * @param {String|String[]} option\n     * @returns {Object} Returns an object with the variables\n     */\n    libExports.getVars = function (output, option) {\n        output = output || 'text';\n        var variables = {};\n        if (output === 'object')\n            variables = VARS;\n        else {\n            for (var v in VARS) {\n                if (output === 'latex') {\n                    variables[v] = VARS[v].latex(option);\n                }\n                else if (output === 'text') {\n                    variables[v] = VARS[v].text(option);\n                }\n            }\n        }\n        return variables;\n    };\n\n    /**\n     * Set the value of a setting\n     * @param {String} setting The setting to be changed\n     * @param {boolean} value\n     */\n    libExports.set = function (setting, value) {\n        //current options:\n        //PARSE2NUMBER, suppress_errors\n        if (typeof setting === 'object')\n            for (var x in setting) {\n                libExports.set(x, setting[x]);\n            }\n\n        var disallowed = ['SAFE'];\n        if (disallowed.indexOf(setting) !== -1)\n            err('Cannot modify setting: ' + setting);\n\n        if (setting === 'PRECISION')\n            bigDec.set({precision: value});\n        else if(setting === 'USE_LN' && value === true) {\n            //set log as LN\n            Settings.LOG = 'LN';\n            //set log10 as log\n            Settings.LOG10 = 'log';\n            //point the functions in the right direction\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\n            //the log10 function must be explicitly set\n            _.functions['log'][0] = function(x) {\n                if(x.isConstant())\n                    return new Symbol(Math.log10(x));\n                return _.symfunction(Settings.LOG10, [x]);\n            };\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\n\n            //remove log10\n            delete _.functions['log10'];\n        }\n        else\n            Settings[setting] = value;\n    };\n\n    /**\n     * Get the value of a setting\n     * @param {type} setting\n     * @returns {undefined}\n     */\n    libExports.get = function (setting) {\n        return Settings[setting];\n    };\n\n    /**\n     * This functions makes internal functions available externally\n     * @param {bool} override Override the functions when calling api if it exists\n     */\n    libExports.api = function (override) {\n        //Map internal functions to external ones\n        var linker = function (fname) {\n            return function () {\n                var args = [].slice.call(arguments);\n                for (var i = 0; i < args.length; i++)\n                    args[i] = _.parse(args[i]);\n                return new Expression(block('PARSE2NUMBER', function () {\n                    return _.callfunction(fname, args);\n                }));\n            };\n        };\n        //perform the mapping\n        for (var x in _.functions)\n            if (!(x in libExports) || override)\n                libExports[x] = linker(x);\n    };\n\n    libExports.replaceFunction = function (name, fn, num_args) {\n        var existing = _.functions[name];\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\n    };\n\n    libExports.setOperator = function (operator, shift) {\n        _.setOperator(operator, shift);\n    };\n\n    libExports.getOperator = function(operator) {\n        return _.getOperator(operator);\n    };\n\n    libExports.aliasOperator = function(operator, withOperator) {\n        _.aliasOperator(operator, withOperator);\n    };\n\n    libExports.tree = function (expression) {\n        return _.tree(_.toRPN(_.tokenize(expression)));\n    };\n\n    libExports.htmlTree = function (expression, indent) {\n        var tree = this.tree(expression);\n\n        return '<div class=\"tree\">\\n' +\n                '    <ul>\\n' +\n                '        <li>\\n' +\n                tree.toHTML(3, indent) + '\\n' +\n                '        </li>\\n' +\n                '    </ul>\\n' +\n                '</div>';\n    };\n\n    libExports.addPeeker = function(name, f) {\n        if(_.peekers[name])\n            _.peekers[name].push(f);\n    };\n\n    libExports.removePeeker = function(name, f) {\n        remove(_.peekers[name], f);\n    };\n\n    libExports.parse = function(e) {\n        return String(e).split(';').map(function(x) {\n            return _.parse(x);\n        });\n    };\n\n    libExports.api();\n\n    return libExports; //Done\n//imports ======================================================================\n})({\n    //https://github.com/peterolson/BigInteger.js\n    bigInt: (function(){\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function karatsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(karatsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev();var b=nPrev;var r=0;var d;var t;var i;var x;while(b.isEven()){b=b.divide(2);r++;}next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\n        return bigInt;\n    })()\n});\n\nif ((typeof module) !== 'undefined') {\n    module.exports = nerdamer;\n};"],"sourceRoot":""}