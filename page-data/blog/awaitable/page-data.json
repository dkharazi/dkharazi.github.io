{"componentChunkName":"component---src-templates-blog-js","path":"/blog/awaitable","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Creating Custom Awaitable Objects","date":"2020-06-04"},"html":"<p>The goal of the <a href=\"https://docs.python.org/3/library/asyncio.html\" target=\"_blank\" rel=\"nofollow\">asyncio</a> module is to implement asynchronous programming in Python. It achieves concurrency by using evented I/O and cooperative multitasking, whereas a module like <code class=\"language-text\">multithreading</code> achieves concurrency by focusing on threading and pre-emptive multitasking. The asyncio module focuses on coroutines, which makes this form of concurrent programming arguably more complicated than other modules, such as <code class=\"language-text\">multiprocessing</code> and <code class=\"language-text\">multithreading</code>.</p>\n<p>When looking through the asyncio documentation, I never found any great examples that involved building custom awaitables and running them as tasks. Since so much of asyncio depends on building its own non-blocking functions specific to asyncio, this seemed strange to me. By running custom awaitables as task, we can achieve both increased flexibility and concurrency. This seems to be a very powerful component of asyncio, at least for some of my use cases.</p>\n<h2>Motivating the Await Expression</h2>\n<p>In Python 3.3, the <code class=\"language-text\">yield from</code> expression was introduced to wait for coroutines in asyncio applications. In Python 3.5, the <a href=\"https://www.python.org/dev/peps/pep-0492/#await-expression\" target=\"_blank\" rel=\"nofollow\">await expression</a> was introduced to replace the old <code class=\"language-text\">yield from</code> syntax in asyncio. It was introduced for multiple reasons and included various behavioral changes.</p>\n<p>Compared to the <code class=\"language-text\">yield from</code> expression, the <code class=\"language-text\">await</code> syntax enforces a clearer role for coroutines. Specifically, <code class=\"language-text\">yield from</code> could accept a generator or coroutine, whereas <code class=\"language-text\">await</code> strictly accepts a coroutine.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Python 3.4 and older</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>               <span class=\"token comment\"># subroutine?</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> foobar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># generator? coroutine?</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Python 3.5</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>         <span class=\"token comment\"># coroutine!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> foobar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># coroutine!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h2>Introducing Awaitable Objects</h2>\n<p>In asyncio, coroutines are considered an <em>awaitable</em> object. There seem to be three types of awaitable objects:</p>\n<ul>\n<li>A coroutine</li>\n<li>An asyncio <code class=\"language-text\">Task</code></li>\n<li>An asyncio <code class=\"language-text\">Future</code></li>\n</ul>\n<p>A <code class=\"language-text\">Future</code> object acts as a placeholder for data that hasn't yet been calculated or fetched. A <code class=\"language-text\">Task</code> is a wrapper for a coroutine and a subclass of <code class=\"language-text\">Future</code>. Specifically, it wraps coroutines to schedule them for execution. A <code class=\"language-text\">Task</code> is a high-level awaitable object, whereas a <code class=\"language-text\">Future</code> is a low-level awaitable object. Normally, there <a href=\"https://docs.python.org/3/library/asyncio-task.html#awaitables\" target=\"_blank\" rel=\"nofollow\">isn't a need</a> to create a <code class=\"language-text\">Future</code> object at the application level code. For these reasons, let's only focus on coroutines.</p>\n<p>Generally, coroutines implement the <code class=\"language-text\">__await__</code> special method, which return an iterator. There are a few other ways to define an awaitable object. However, each method involves defining or invoking an object with an <code class=\"language-text\">__await__</code> method. Therefore, if we want to define our own custom awaitable object, we need to define a class with an <code class=\"language-text\">__await__</code> special method. For a more in-depth analysis of awaitables and futures, refer to <a href=\"https://lucumr.pocoo.org/2016/10/30/i-dont-understand-asyncio/\" target=\"_blank\" rel=\"nofollow\">this post</a>.</p>\n<h2>Defining an Awaitable Object</h2>\n<p>An asyncio application begins to get interesting once we start creating tasks. In asyncio, the <code class=\"language-text\">create_task()</code> function runs coroutines concurrently as asyncio <code class=\"language-text\">Tasks</code>. In this section, we'll create a task that schedules a custom awaitable coroutine.</p>\n<p>The code below creates a custom awaitable object <code class=\"language-text\">RandomSleeper</code>. It sleeps for 5 to 10 seconds and returns a message after waking up. It also notifies us before falling asleep. This behavior is captured in the <code class=\"language-text\">async def</code> function, which creates a coroutine object. Notice, the <code class=\"language-text\">RandomSleeper</code> class must include the <code class=\"language-text\">__await__</code> special method in order to be <code class=\"language-text\">awaited</code>.</p>\n<p>As a reminder, an <code class=\"language-text\">async def</code> expression only creates a coroutine object once it has been awaited. Since we're interested in creating tasks, we need to create a <code class=\"language-text\">nap</code> function, which strictly awaits the custom awaitable <code class=\"language-text\">RandomSleeper</code> object. By doing this, the <code class=\"language-text\">nap</code> function returns a coroutine, which can be passed into our <code class=\"language-text\">main()</code> function.</p>\n<p>The <code class=\"language-text\">main()</code> function represents an <a href=\"https://docs.python.org/3/library/asyncio-eventloop.html\" target=\"_blank\" rel=\"nofollow\">event loop</a>, which awaits the coroutines returned by the <code class=\"language-text\">nap()</code> function. The main function runs these coroutines as tasks by passing them into the <code class=\"language-text\">create_task()</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> asyncio\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> random\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RandomSleeper</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__await__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>snooze<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__await__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">snooze</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         sleep <span class=\"token operator\">=</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         msg <span class=\"token operator\">=</span> <span class=\"token string\">'Sleeping for {} seconds!'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>sleep<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         msg <span class=\"token operator\">=</span> <span class=\"token string\">'What a short {} second nap!'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         msg <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>sleep<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>sleep<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">nap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> RandomSleeper<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         t1 <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>create_task<span class=\"token punctuation\">(</span>nap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         t2 <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>create_task<span class=\"token punctuation\">(</span>nap<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> t1<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> t2<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nSleeping <span class=\"token keyword\">for</span> <span class=\"token number\">6</span> seconds!\nSleeping <span class=\"token keyword\">for</span> <span class=\"token number\">10</span> seconds!\nWhat a short <span class=\"token number\">6</span> second nap!\nWhat a short <span class=\"token number\">10</span> second nap!\nSleeping <span class=\"token keyword\">for</span> <span class=\"token number\">9</span> seconds!\nSleeping <span class=\"token keyword\">for</span> <span class=\"token number\">5</span> seconds!\nWhat a short <span class=\"token number\">9</span> second nap!\nWhat a short <span class=\"token number\">5</span> second nap!</code></pre></div>\n<p>Notice, the two tasks <code class=\"language-text\">t1</code> and <code class=\"language-text\">t2</code> run concurrently in the event loop. Meaning, we're able to run our custom awaitable <code class=\"language-text\">RandomSleeper</code> concurrently by running its associated coroutines as tasks. Specifically, <code class=\"language-text\">t1</code> and <code class=\"language-text\">t2</code> are run simultaneously (roughly), and <code class=\"language-text\">t1</code> waits for <code class=\"language-text\">t2</code> to finish running before returning.</p>"}},"pageContext":{"slug":"awaitable"}},"staticQueryHashes":["2961437231","3159585216"]}