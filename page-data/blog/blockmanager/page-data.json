{"componentChunkName":"component---src-templates-blog-js","path":"/blog/blockmanager","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Internal Structure of Pandas DataFrames","date":"2020-05-15"},"html":"<p>A <code class=\"language-text\">DataFrame</code> object relies on underlying data structures to improve performance of row-oriented and column-oriented operations. One of these data structures includes the BlockManager. The BlockManager is a core architectural component that is an internal storage object in Pandas. Implying, it is not included in the Pandas documentation.</p>\n<p>As the internals of Pandas continues to expand, microperformance suffers. In this case, microperformance refers to the performance of many small operations taking 1 microsecond. In particular, fairly simple oeprations, such as indexing, may pass through multiple internal layers before hitting its operation. As a result, the performance of certain operations aren't always consistent and reliable. For these two reasons alone, the BlockManager is quite important to understand when dealing with the performance of many operations in Pandas.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#what-is-a-blockmanager\">What is a BlockManager</a></li>\n<li><a href=\"#illustrating-the-blockmanager\">Illustrating the BlockManager</a></li>\n<li><a href=\"#illustrating-the-role-of-the-blockmanager\">Illustrating the Role of the BlockManager</a></li>\n<li><a href=\"#benefit-of-the-blockmanager\">Benefit of the BlockManager</a></li>\n<li><a href=\"#disadvantages-of-the-blockmanager\">Disadvantages of the BlockManager</a></li>\n<li><a href=\"#roadmap-for-the-blockmanager\">Roadmap for the BlockManager</a></li>\n</ul>\n<h2>What is a BlockManager</h2>\n<p>In Pandas versions 0.1 and 0.2, the data in a <code class=\"language-text\">DataFrame</code> was stored in a <code class=\"language-text\">dict</code>. Since then, it has evolved into something much more complicated, but is still implemented in pure Python. Now, a <code class=\"language-text\">DataFrame</code> in memory roughly represents:</p>\n<ul>\n<li>Some metadata</li>\n<li>A collection of NumPy arrays for each column</li>\n</ul>\n<p>This structure was introduced when the BlockManager was introduced, which manages these NumPy arrays. The reason for making this change to the structure of a <code class=\"language-text\">DataFrame</code> was to support column-oriented operations that were very slow without a BlockManager.</p>\n<p>A BlockManager is fairly self-explanatory. It manages blocks, where an individual block refers to data stored as a NumPy ndarray object. The BlockManager is a memory management object that manages the internal columns of data inside a <code class=\"language-text\">DataFrame</code>. Each axis is capable of reshaping the blocks to a new set of labels. The BlockManager consolidates any blocks together with similar data types. It can also accept new blocks without copying data.</p>\n<h2>Illustrating the BlockManager</h2>\n<p>We may want to view the internals of a <code class=\"language-text\">DataFrame</code> to gain a better understanding of how the data is actually being stored. Accessing the <code class=\"language-text\">_data</code> attribute yields the BlockManager of a <code class=\"language-text\">DataFrame</code>. It also lists the specific blocks handled by the BlockManager.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">)</span>\n   c1 c2  c3\n<span class=\"token number\">0</span>   <span class=\"token number\">1</span>  a  <span class=\"token number\">10</span>\n<span class=\"token number\">1</span>   <span class=\"token number\">2</span>  b  <span class=\"token number\">20</span>\n<span class=\"token number\">2</span>   <span class=\"token number\">3</span>  c  <span class=\"token number\">30</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span>\nBlockManager\nItems<span class=\"token punctuation\">:</span> Index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span>\nAxis <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> RangeIndex<span class=\"token punctuation\">(</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stop<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nIntBlock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> int64\nObjectBlock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span></code></pre></div>\n<h2>Illustrating the Role of the BlockManager</h2>\n<p>As briefly described earlier, the BlockManager is responsible for consolidating any blocks together with similar data types. It does this by calling the <code class=\"language-text\">consolidate()</code> method.</p>\n<p>The BlockManager doesn't consolidate blocks of similar data types when new blocks are added. Instead, the BlockManager does this automatically in the initial stages of many <code class=\"language-text\">DataFrame</code> operations. This notion may seem abstract at first, but can be easily observed by adding a new block to the BlockManager.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> df<span class=\"token punctuation\">[</span><span class=\"token string\">'c4'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">)</span>\nBlockManager\nItems<span class=\"token punctuation\">:</span> Index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span>\nAxis <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> RangeIndex<span class=\"token punctuation\">(</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stop<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nIntBlock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> int64\nObjectBlock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span>\nIntBlock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> int64</code></pre></div>\n<p>Notice, there are two separate IntBlocks after adding a new column of ints to the <code class=\"language-text\">DataFrame</code>. By calling the <code class=\"language-text\">consolidate()</code> method, we'll see consolidation of blocks of similar data types. Meaning, we'll see the two IntBlocks consolidated into one IntBlock.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> df<span class=\"token punctuation\">.</span>_data<span class=\"token punctuation\">.</span>consolidate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nBlockManager\nItems<span class=\"token punctuation\">:</span> Index<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'c1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c2'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c4'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span><span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span>\nAxis <span class=\"token number\">1</span><span class=\"token punctuation\">:</span> RangeIndex<span class=\"token punctuation\">(</span>start<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> stop<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> step<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nIntBlock<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> int64\nObjectBlock<span class=\"token punctuation\">:</span> <span class=\"token builtin\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token punctuation\">:</span> <span class=\"token builtin\">object</span></code></pre></div>\n<p>Now, every block is consolidated based on its data type. At a high level, we can think of each <code class=\"language-text\">DataFrame</code> method calling the <code class=\"language-text\">consolidate()</code> method before running its operation. In truth, it is more complicated than this. Specifically, the <code class=\"language-text\">consolidate()</code> method is only called in operations that directly benefit from consolidation.</p>\n<p>For a more detailed analysis about consolidation and when it happens, refer to <a href=\"https://uwekorn.com/2020/05/24/the-one-pandas-internal.html\" target=\"_blank\" rel=\"nofollow\">this post</a>. For a more detailed explanation of the BlockManager, refer to <a href=\"https://wesmckinney.com/blog/a-roadmap-for-rich-scientific-data-structures-in-python/\" target=\"_blank\" rel=\"nofollow\">this article</a> written by Wes McKinney, who introduced the BlockManager.</p>\n<h2>Benefit of the BlockManager</h2>\n<p>The BlockManager introduced a columnar structure to the <code class=\"language-text\">DataFrame</code>. Like any other columnar store, it provides significant performance boosts for column-oriented operations. Furthermore, it provides significant performance boosts to column-oriented operations on many different columns. For example, the BlockManager improves the speed of vector-like operations, such as summing two columns together. </p>\n<h2>Disadvantages of the BlockManager</h2>\n<p>Although the BlockManager was a necessary addition to the Pandas project, it creates a negative impact on performance in certain circumstances. There are four general areas that are negatively impacted by the BlockManager:</p>\n<ul>\n<li>Code complexity</li>\n<li>Loss of user visibility to memory use</li>\n<li>Unavoidable consolidation</li>\n<li>Microperformance issues</li>\n</ul>\n<p>Since the BlockManager introduced blocks to the Pandas architecture, writing new code becomes more complex, since there needs to be careful construction of the block structure. Although this boosts the performance of complicated algorithms, such as joins, writing code for algorithms becomes more complicated.</p>\n<p>Large datasets are usually read into a <code class=\"language-text\">DataFrame</code> object <em>naively</em>. Consequently, there is a memory-doubling effect that can lead to memory errors. When Pandas was written in 2011, the creators of Pandas weren't thinking about analyzing many gigabytes or terabytes of data. Now, <a href=\"https://wesmckinney.com/blog/apache-arrow-pandas-internals/\" target=\"_blank\" rel=\"nofollow\">the rule of thumb</a> for reading in a <code class=\"language-text\">DataFrame</code> object is to have 5-10 times as much available RAM as the size of the data.</p>\n<p>As stated previously, consolidation happens in methods that directly benefit from it. As a result, consolidation can lead to performance and memory overhead for fairly common operations. For example, calling <code class=\"language-text\">read_csv()</code> may require consolidation after completion.</p>\n<p>Again, the BlockManager was a necessary addition. It fixed a lot of performance issues. However, there is a proposition to replace the BlockManager, which would require a significant inversion of the internal architecture to involve more native code and less interpreted Python.</p>\n<h2>Roadmap for the BlockManager</h2>\n<p>Currently, Pandas architecturally is structured around the following:</p>\n<ul>\n<li>CPython implementation of internal data structures</li>\n<li>Cython implementation of algorithms</li>\n</ul>\n<p>In the future, there may be effort to <a href=\"https://github.com/pydata/pandas-design/blob/a0f1d32094f5030cc06ec09c8582b5a7b7798065/source/internal-architecture.rst#building-libpandas-in-c1114-for-lowest-level-implementation-tier\" target=\"_blank\" rel=\"nofollow\">create a native library</a>, where the data structures, logical types, and memory management is assembled using a native API. By replacing the BlockManager with native code, Pandas would receive the following benefits:</p>\n<ul>\n<li>Simpler code</li>\n<li>Easier extensibility with new logical types</li>\n<li>Possibly better performance than the current implementation</li>\n<li>Improved user-control over the memory layout</li>\n<li>Improved microperformance</li>\n</ul>\n<p>For more information about the use cases and drawbacks of the BlockManager, refer to the <a href=\"https://github.com/pydata/pandas-design/blob/a0f1d32094f5030cc06ec09c8582b5a7b7798065/source/internal-architecture.rst#what-is-blockmanager-and-why-does-it-exist\" target=\"_blank\" rel=\"nofollow\">design docs</a> and <a href=\"https://pandas.pydata.org/docs/development/roadmap.html#block-manager-rewrite\" target=\"_blank\" rel=\"nofollow\">roadmap docs</a>, which was written by Wes McKinney after developing the BlockManager.</p>"}},"pageContext":{"slug":"blockmanager"}},"staticQueryHashes":["2961437231","3159585216"]}