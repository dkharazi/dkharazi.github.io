{"componentChunkName":"component---src-templates-entry-js","path":"/notes/de/etl/hbase","result":{"data":{"markdownRemark":{"frontmatter":{"title":"HBase"},"html":"<h3>Describing HBase</h3>\n<ul>\n<li>As a reminder, HDFS is a file system</li>\n<li>HBase is a database</li>\n<li>Specifically, it is a distributed NoSQL database</li>\n<li>It is built on top of (but separate from) HDFS</li>\n<li>HBase is used for providing real-time, read/write access to HDFS</li>\n<li>Roughly, we can think of HBase as the database form of the unstructured file system that is HDFS</li>\n<li>A server on which a <code class=\"language-text\">NameNode</code> lives is called a <strong>master server</strong></li>\n<li>A server on which a <code class=\"language-text\">DataNode</code> lives is called a <strong>region server</strong></li>\n</ul>\n<p><img src=\"/fb7f98ecfa2ae6bfc8b485d337db2629/hbase.png\" alt=\"hbaseregions\"></p>\n<h3>Defining the Components of HBase</h3>\n<ol>\n<li>HMaster Nodes</li>\n<li>Region Servers</li>\n<li>ZooKeeper Nodes</li>\n</ol>\n<h3>Describing HBase HMaster Nodes</h3>\n<ul>\n<li>\n<p>HMaster nodes are responsible for:</p>\n<ul>\n<li>Coordinating region servers in the cluster</li>\n<li>Negotiating load balancing across region servers</li>\n<li>Executive administrative operations</li>\n<li>Maintaining the state of its cluster</li>\n<li>Monitoring the state of its cluster</li>\n</ul>\n</li>\n<li>These nodes are not included in the region servers</li>\n<li>Meaning, they are not part of the actual data storage</li>\n<li>Instead, they manage and monitor the state of hadoop clusters</li>\n</ul>\n<h3>Describing Region Servers</h3>\n<ul>\n<li>\n<p>Region servers are responsible for:</p>\n<ul>\n<li>Handling a subset of the table's data</li>\n</ul>\n</li>\n<li>These are nodes that host data and process I/O requests</li>\n</ul>\n<h3>Describing ZooKeeper Nodes</h3>\n<ul>\n<li>\n<p>Zookeeper nodes are responsible for:</p>\n<ul>\n<li>Coordinating between the HMaster nodes and region servers</li>\n<li>Coordinate data retrieval from region servers</li>\n<li>Monitoring any session timeouts</li>\n<li>Monitoring the statuses of nodes in the cluster by checking for <em>heartbeats</em></li>\n</ul>\n</li>\n</ul>\n<h3>Motivating use cases of HBase over HDFS</h3>\n<ul>\n<li>\n<p>Hadoop is basically <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> things</p>\n<ul>\n<li>A file system (i.e. HDFS)</li>\n<li>A computation framework (i.e. MapReduce)</li>\n<li>A management bridge (i.e. YARN)</li>\n</ul>\n</li>\n<li>\n<p>HDFS is used for:</p>\n<ul>\n<li>Storing huge amounts of data</li>\n<li>Ensuring the data is distributed</li>\n<li>Ensuring the data is redundant</li>\n</ul>\n</li>\n<li>HDFS is good for sequential data access (reads/writes)</li>\n<li>\n<p>However, it is not good for random data access (reads/writes)</p>\n<ul>\n<li>This is because it is only a file system</li>\n</ul>\n</li>\n<li>HBase is good for real-time, random data access</li>\n</ul>\n<h3>Comparing HBase to HDFS</h3>\n<ul>\n<li>HBase stores both structued and unstructured data</li>\n<li>HDFS also stores structured and unstructured data</li>\n<li>\n<p>Both provide multiple mechanisms to access data:</p>\n<ul>\n<li>Shell</li>\n<li>APIs</li>\n</ul>\n</li>\n<li>HBase stores data as key/value pairs in a columnar fashion</li>\n<li>HDFS stores data as flat files</li>\n<li>\n<p>HDFS supports the following:</p>\n<ul>\n<li>Optimized for streaming access of large files</li>\n<li>Follows write-once, read-many ideology</li>\n<li>Doesn't support random read/write</li>\n</ul>\n</li>\n<li>\n<p>HBase supports the following:</p>\n<ul>\n<li>Stores key/value pairs in columnar fashion</li>\n<li>Provides a flexible data model</li>\n<li>Supports random read/write</li>\n<li>Provides low latency access to small amounts of data from large datasets</li>\n</ul>\n</li>\n<li>\n<p>To summarize:</p>\n<ul>\n<li>HDFS is used for offline batch-processing</li>\n<li>HBase is used for real-time reads and writes</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://hbase.apache.org/book.html\" target=\"_blank\" rel=\"nofollow\">HBase Documentation</a></li>\n<li><a href=\"https://www.quora.com/What-is-the-difference-between-HBASE-and-HDFS-2\" target=\"_blank\" rel=\"nofollow\">Difference between HBase and HDFS</a></li>\n<li><a href=\"https://stackoverflow.com/a/52326774/12777044\" target=\"_blank\" rel=\"nofollow\">Architecture of HBase and HDFS</a></li>\n<li><a href=\"https://stackoverflow.com/a/16930049/12777044\" target=\"_blank\" rel=\"nofollow\">Comparison between HBase and HDFS</a></li>\n<li><a href=\"https://dbvisit.com/blog/real-time-vs-batch\" target=\"_blank\" rel=\"nofollow\">Real Time and Batch Data Access</a></li>\n</ul>"}},"pageContext":{"slug":"de/etl/hbase","previousSlug":"de/etl/hdfs_architecture","nextSlug":"de/etl/mapreduce","previousTitle":"HDFS Architecture","nextTitle":"MapReduce"}},"staticQueryHashes":[]}