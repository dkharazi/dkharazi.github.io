{"componentChunkName":"component---src-templates-entry-js","path":"/notes/de/other/kafka","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Kafka"},"html":"<h3>Describing Use-Cases for Event Streaming</h3>\n<ul>\n<li>\n<p>Processing payments and financial transactions in real-time</p>\n<ul>\n<li>E.g. stock exchanges, banks, and insurances</li>\n</ul>\n</li>\n<li>\n<p>Tracking and monitoring trucks, fleets, and shipments in real-time</p>\n<ul>\n<li>E.g. logistics and the automotive industry</li>\n</ul>\n</li>\n<li>\n<p>Continuously capturing and analyzing sensor data from IoT devices</p>\n<ul>\n<li>E.g. factories and wind parks</li>\n</ul>\n</li>\n<li>\n<p>Collecting and immediately reacting to customer orders</p>\n<ul>\n<li>E.g. orders in retail, the travel industry, and mobile applications</li>\n</ul>\n</li>\n<li>Monitoring patients in hospital care</li>\n<li>Connecting, storing, and making available data produced by different areas of the company</li>\n<li>Serving as the foundation for data platforms, event-driven architectures, and microservices</li>\n</ul>\n<h3>Defining Terminology for Kafka</h3>\n<ul>\n<li>An <em>event</em> is a message and can be thought of as a file in a filesystem</li>\n<li>A <em>producer</em> is a user application that publishes the event</li>\n<li>A <em>consumer</em> is a user application that reads the event</li>\n<li>\n<p>A <em>topic</em> is the location to which events are stored</p>\n<ul>\n<li>In RabbitMQ, this is similar to a queue</li>\n<li>A topic can be thought of as a folder in a filesystem, where the events are the files associated to that folder</li>\n<li>For example, a topic could be called <code class=\"language-text\">payments</code> and the messages published by the producers would represent the files in that <code class=\"language-text\">payments</code> folder</li>\n<li>The consumers could then go and read those files in that <code class=\"language-text\">payments</code> folder by subscribing to the <code class=\"language-text\">payments</code> topic</li>\n</ul>\n</li>\n</ul>\n<h3>Comparing Kafka's Pub/Sub Architecture with RPC</h3>\n<ul>\n<li>\n<p>If a user makes a request and expects an immediate and meaningful response, then the request-response model might be preferred</p>\n<ul>\n<li>Use Kafka if the user making the request typically <strong>is not interested</strong> in a response (besides a response that the message has been sent)</li>\n<li>Use REST if the user making the request typically <strong>is interested</strong> in a response (not a response that the message has been sent, but instead a response that is meaninful to the user e.g. some computed result)</li>\n</ul>\n</li>\n<li>\n<p>If the user expects a forward-flow of data and doesn't expect a response back, then Kafka might be preferred</p>\n<ul>\n<li>Data is sent to Kafka and is usually sent to multiple topics (i.e. order, inventory, etc.) until landing in the database</li>\n<li>Once the response is sent back to the user for REST, then the response is over and stored in a database</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://kafka.apache.org/documentation/\" target=\"_blank\" rel=\"nofollow\">Kafka Documentation</a></li>\n<li><a href=\"https://www.rabbitmq.com/tutorials/tutorial-six-python.html\" target=\"_blank\" rel=\"nofollow\">Creating a Pub-Sub System for a Request-Response Pattern</a></li>\n<li><a href=\"https://stackoverflow.com/a/57909743/12777044\" target=\"_blank\" rel=\"nofollow\">Post comparing Kafka Messaging and REST Calling</a></li>\n<li><a href=\"https://supunbhagya.medium.com/request-driven-vs-event-driven-microservices-7b1fe40dccde\" target=\"_blank\" rel=\"nofollow\">Article comparing Request-Driven and Event-Driven Microservices</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DXTHb9TqJOs&#x26;ab_channel=HusseinNasser\" target=\"_blank\" rel=\"nofollow\">Video about Publish-Subsribe and Request-Response Patterns</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=FMhbR_kQeHw&#x26;ab_channel=GauravSen\" target=\"_blank\" rel=\"nofollow\">Video defining the Publisher-Subscriber Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=rJHTK2TfZ1I&#x26;ab_channel=GauravSen\" target=\"_blank\" rel=\"nofollow\">Video defining Event-Driven Systems</a></li>\n</ul>"}},"pageContext":{"slug":"de/other/kafka","previousSlug":"de/other/mq","nextSlug":null,"previousTitle":"RabbitMQ","nextTitle":null}},"staticQueryHashes":[]}