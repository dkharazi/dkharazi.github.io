{"componentChunkName":"component---src-templates-entry-js","path":"/notes/fn/rec/hybrid","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Hybrid Filtering Methods"},"html":"<h3>Defining Hybrid Recommendation Methods</h3>\n<ul>\n<li>An ideal recommender should be dynamic and flexible to a wide range of effects</li>\n<li>\n<p>As a result, it should include multiple data sources and handle:</p>\n<ul>\n<li>User-item interactions</li>\n<li>Item content similarities</li>\n<li>Etc.</li>\n</ul>\n</li>\n<li>Most methods can only use one type of data and capture a particular effect</li>\n<li>For example, vanilla collaborative filtering is only focused on data from a rating matrix, and it doesn't focus on item or user content</li>\n<li>Alternatively, content-based filtering focuses only on item or user content, and it doesn't focus on data from a rating matrix</li>\n<li>Each method has its pros and cons but can compliment each other if we combine them, which is done using a <em>hybrid</em> method</li>\n</ul>\n<h3>Relating Hybrid Methods to Ensemble Learning</h3>\n<ul>\n<li>The problem of hybrid recommenders is closely related to ensemble learning</li>\n<li>Specifically, we're creating and combining multiple classification/regression models</li>\n<li>By doing this, we can improve the overall accuracy (compared to using a single learning algorithm)</li>\n</ul>\n<h3>Defining a Hybrid Model using Switching</h3>\n<ul>\n<li>Switching is one of the most basic hybrid methods</li>\n<li>Specifically, it refers to combining recommendation algorithms together and switching between them depending on a condition</li>\n<li>\n<p>For example, we could use a collaborative filtering method for items with ratings</p>\n<ul>\n<li>Then, we could use a content-based filtering model for items without ratings</li>\n<li>Since collaborative filtering works well with ratings</li>\n<li>But, collaborative filtering doesn't work well without ratings (i.e. cold-start problem)</li>\n</ul>\n</li>\n<li>\n<p>Although switching mitigates the cold-start problem, it's a somewhat rudimentary solution</p>\n<ul>\n<li>This is because it's based on an arbitrary rule (rather than an optimization framework)</li>\n</ul>\n</li>\n</ul>\n<h3>Describing a Hybrid Model using Blending</h3>\n<ul>\n<li>\n<p>Blending involves combining estimates of multiple recommenders</p>\n<ul>\n<li>These estimates are rating estimates for a given user and item</li>\n<li>The multiple recommenders should be training on the same user-item rating matrix</li>\n<li>Estimates are combined to create a more accurate rating</li>\n</ul>\n</li>\n<li>\n<p>Blending can be done by:</p>\n<ul>\n<li>An arbitrary rule (similar to switching)</li>\n<li>Or by a regression model (by optimization)</li>\n</ul>\n</li>\n<li>Recall, each recommender has its own unique pros and cons</li>\n<li>\n<p>By blending ratings from individual models together, we're optimizing a final regression model</p>\n<ul>\n<li>Our hope is for this final model to know when to switch on or off from models that don't benefit us in a particular scenario</li>\n<li>The thinking is this will produce a better final rating compared to an individual model</li>\n</ul>\n</li>\n<li>\n<p>Roughly, switching and blending have a similar goal</p>\n<ul>\n<li>However, switching relies on more heuristic rules</li>\n<li>\n<p>Whereas, blending tries to use optimization to find the ideal points when to switch on and off</p>\n<ul>\n<li>It does this by blending ratings together</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Describing Blending Methods</h3>\n<ul>\n<li>\n<p>Blending allows us to determine how we should wait weight ratings from each individual model</p>\n<ul>\n<li>The linear combination of weights and ratings from individual models equals the final rating</li>\n</ul>\n</li>\n<li>\n<p>The blend of individual models can include dozens of recommendation models including:</p>\n<ul>\n<li>Neighborhood-based</li>\n<li>Latent factor models</li>\n<li>Mixed models</li>\n</ul>\n</li>\n<li>\n<p>The individual models can be trained on the entire training set</p>\n<ul>\n<li>Or, this set can be divided into subsets randomly</li>\n<li>Or, it can be divided using some criteria</li>\n<li>Then, the individual models can be trained on specific bins of training data</li>\n</ul>\n</li>\n<li>We can use a regression model to calculate the final rating</li>\n<li>However, the best results are obtained using neural nets or gradient boosted trees</li>\n</ul>\n<h3>Illustrating Tested Blending Methods</h3>\n<ul>\n<li>Many different models were trained and tested on the Netflix set</li>\n<li>Various blending algorithms include linear, kernel, polynomial regression, bagged decision trees, and artificial neural networks</li>\n<li>An ANN with a single hidden layer achieves the lowest RMSE</li>\n<li>\n<p>An advantage of using ANNs for blending is their excellent accuracy and fast prediction time</p>\n<ul>\n<li>Specifically, a few seconds for thousands of testing samples)</li>\n</ul>\n</li>\n<li>This is at the cost of a long training time (hours for millions of training examples)</li>\n<li>The pseudocode for a blending method can be the following:</li>\n</ul>\n<p><img src=\"/f70d4a5a702e5dd688786915b578e417/pseudorec.svg\" alt=\"pseudocoderecs\"></p>\n<h3>Defining a Hybrid Model using Feature Augmentation</h3>\n<ul>\n<li>Recommenders with feature augmentation is another hybrid design</li>\n<li>\n<p>It's a method where several recommenders are chained together</p>\n<ul>\n<li>Specifically, they're chained so predictions produced by one recommender are consumed by another recommender as input</li>\n</ul>\n</li>\n<li>Roughly, we can think of this as <em>chaining</em> multiple recommenders together before the final blending layer</li>\n</ul>\n<h3>Illustrating a Use-Case for Feature Augmentation</h3>\n<ul>\n<li>Typically, we'll do this to reformulate features so downstream models can use them as inputs</li>\n<li>One use-case includes using the output of collaborative filtering as inputs of a content-based recommender</li>\n<li>This includes creating similarity features using collaborative filtering to use as new features in a content-based model</li>\n<li>For example, a content-based model can use features like <em>similar products</em> or <em>similar customers</em></li>\n<li>These features could be created using similarity measured computed using collaborative filtering</li>\n<li>Here, first we're generating new features with a collaborative filtering model</li>\n<li>Then, we're consuming these features in a downstream content-based classifier</li>\n</ul>\n<h3>Illustrating Another Use-Case for Feature Augmentation</h3>\n<ul>\n<li>Alternatively, another use-case includes using the output of content-based filtering as inputs of a collaborative filtering recommender</li>\n<li>This includes imputing missing values in a rating matrix for collaborative filtering using the output generated by content-based features</li>\n<li>For example, a collaborative filtering model can only accept ratings</li>\n<li>\n<p>So, we can use input features like <em>age</em> or <em>gender</em> into a content-based model to output a rating</p>\n<ul>\n<li>Which, has information about age/gender baked into the rating</li>\n</ul>\n</li>\n<li>Then, we can replace missing ratings with our new ratings from the content-based model</li>\n</ul>\n<h3>Selecting the Right Hybrid Recommender</h3>\n<ul>\n<li>When selecting a recommender, we should consider how our recommendations are meant to be presented</li>\n<li>Specifically, recommendations from different models shouldn't always be blended together</li>\n<li>For example, recommendations on a site may best be presented as separate categories</li>\n<li>Meaning, one recommender may refer to part of the page including <em>top rated items</em> for a user</li>\n<li>Another recommender may refer to a different part of the page including <em>similar items</em> for a given user</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://algorithmicweb.files.wordpress.com/2018/07/algorithmic-marketing-ai-for-marketing-operations-r1-7g.pdf\" target=\"_blank\" rel=\"nofollow\">Textbook about Algorithmic Marketing</a></li>\n<li><a href=\"https://arxiv.org/pdf/1901.01418.pdf\" target=\"_blank\" rel=\"nofollow\">Paper about Hybrid Methods and Blending</a></li>\n<li><a href=\"https://www.netflixprize.com/assets/GrandPrize2009_BPC_BigChaos.pdf\" target=\"_blank\" rel=\"nofollow\">Netflix Prize using Blending</a></li>\n</ul>"}},"pageContext":{"slug":"fn/rec/hybrid","previousSlug":"fn/rec/modelcollab","nextSlug":"fn/rec/context","previousTitle":"Model-Based Collab Filtering","nextTitle":"Contextual Recommendations"}},"staticQueryHashes":[]}