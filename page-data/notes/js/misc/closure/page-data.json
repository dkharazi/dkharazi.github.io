{"componentChunkName":"component---src-templates-entry-js","path":"/notes/js/misc/closure","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Function Closures"},"html":"<h3>Defining a Closure</h3>\n<ul>\n<li>A closure refers to an inner function within an outer function</li>\n<li>Specifically, a closure is the combination of a function enclosed within its surrounding state</li>\n<li>Here, the surrounding environment refers to the lexical environment</li>\n<li>In other words, a closure provides an inner function with access to the scope of an outer function</li>\n<li>Closures are created when a function is created (at function creation time)</li>\n</ul>\n<h3>Describing Lexical Environments</h3>\n<ul>\n<li>Nested functions have access to variables declared in their outer scope</li>\n<li>Lexical scoping refers to using the location where a variable is declared</li>\n<li>This is done to determine where that variable is available</li>\n<li>Lexical scoping describes how the parser resolves variable names when functions are nested</li>\n<li>Roughly, a lexical environment and function scope can be used interchangeably</li>\n</ul>\n<h3>Describing a Closure</h3>\n<ul>\n<li>\n<p>A closure is the combination of:</p>\n<ul>\n<li>A function</li>\n<li>The lexical environment that function was declared in</li>\n</ul>\n</li>\n<li>This lexical environment consists of any local variables that are in-scope</li>\n</ul>\n<h3>Illustrating Closures</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// name is a local variable</span>\n    <span class=\"token comment\">// created by makeFunc</span>\n    <span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Mozilla'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// displayName is a closure</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">displayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// use variable declared</span>\n        <span class=\"token comment\">// in the parent function</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> displayName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> myFunc <span class=\"token operator\">=</span> <span class=\"token function\">makeFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Another Example of Closures</h3>\n<ul>\n<li>Here, <code class=\"language-text\">makeAdder</code> is a function factory</li>\n<li>Also, <code class=\"language-text\">add5</code> and <code class=\"language-text\">add10</code> are both closures</li>\n<li>They share the same function body definition</li>\n<li>\n<p>However, they store different lexical environments</p>\n<ul>\n<li>The lexical environment of <code class=\"language-text\">add5</code> assigns <code class=\"language-text\">x</code> as 5</li>\n<li>The lexical environment of <code class=\"language-text\">add10</code> assigns <code class=\"language-text\">x</code> as 10</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">makeAdder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> add5 <span class=\"token operator\">=</span> <span class=\"token function\">makeAdder</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// closure</span>\n<span class=\"token keyword\">var</span> add10 <span class=\"token operator\">=</span> <span class=\"token function\">makeAdder</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// another closure</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add5</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 7</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add10</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"nofollow\">JavaScriptFunction Closures</a></li>\n</ul>"}},"pageContext":{"slug":"js/misc/closure","previousSlug":"js/misc/factory","nextSlug":"js/misc/curry","previousTitle":"Factory Function","nextTitle":"Currying"}},"staticQueryHashes":[]}