{"componentChunkName":"component---src-templates-entry-js","path":"/notes/js/misc/eventloop","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Event Loop"},"html":"<h3>Motivating the Event Loop in JavaScript</h3>\n<ul>\n<li>There are many differences between how Python and JavaScript handle events</li>\n<li>However, there are many similar components that are roughly comparable</li>\n<li>Personally, it helps knowing both models in order to build a broader understanding of the general architecture of event loops</li>\n<li>\n<p>The following is the general interaction between:</p>\n<ul>\n<li>The JavaScript engine</li>\n<li>The event loop</li>\n<li>Any WebAPIs</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/d9d2f7dec0f206cc8c4e1d7df352b130/eventloop.png\" alt=\"EventLoop\"></p>\n<h3>Describing the Heap</h3>\n<ul>\n<li>\n<p>The heap is memory set aside for dynamic allocation</p>\n<ul>\n<li>The stack is memory set aside for static allocation</li>\n<li>The stack stores primitives, like ints and strings</li>\n<li>The heap stores objects</li>\n<li>Primitives usually involve stack memory allocation, since we usually know how large they will be</li>\n<li>Objects usually involve dynamic memory allocation, since they usually change in size throughout the code</li>\n</ul>\n</li>\n<li>\n<p>There's no enforced pattern to the allocation and deallocation of blocks from the heap</p>\n<ul>\n<li>This is different from the call stack</li>\n</ul>\n</li>\n<li>We can allocate a block at any time and free it at any time</li>\n<li>Each thread gets a call stack</li>\n<li>On the other hand, there's typically only one heap for the application</li>\n</ul>\n<h3>Describing the Call Stack</h3>\n<ul>\n<li>The call stack is a LIFO queue (Last In, First Out)</li>\n<li>\n<p>JavaScript has a single call stack that does the following:</p>\n<ul>\n<li>Keeps track of what function we're currently executing</li>\n<li>Keeps track of what function is to be executed after</li>\n</ul>\n</li>\n<li>When a function is about to be executed, it is added to the call stack</li>\n<li>Next, if a function calls another function, then the called function will be on the top of the call stack</li>\n</ul>\n<h3>Describing the Event Table</h3>\n<ul>\n<li>Every time an async function gets called, it is added to the event table</li>\n<li>For example, calling <code class=\"language-text\">setTimeout()</code> will get added to the event table immediately</li>\n<li>The event table is a data structure that tracks what functions should be called after a function finishes executing</li>\n<li>In other words, it knows that a certain function should be triggered after an event</li>\n<li>\n<p>The following are examples of events:</p>\n<ul>\n<li>Timeout</li>\n<li>Click</li>\n<li>Mouse movement</li>\n</ul>\n</li>\n<li>Once that event occurs, the event is added to the event queue</li>\n<li>\n<p>Note, the event table doesn't do the following:</p>\n<ul>\n<li>Executes functions</li>\n<li>Adds them to the call stack</li>\n</ul>\n</li>\n<li>\n<p>It's only purpose is to do the following:</p>\n<ul>\n<li>Tracks events</li>\n<li>Sends events to the event queue</li>\n</ul>\n</li>\n</ul>\n<h3>Describing the Event Queue</h3>\n<ul>\n<li>The event queue is a data structure similar to the call stack</li>\n<li>However, the event queue is more designated for asynchronous functions (i.e. events)</li>\n<li>The event queue is a FIFO queue (First in, First out)</li>\n<li>By doing this, the event queue stores the order in which functions should be executed</li>\n<li>As stated previously, the event queue receives function calls from the event table</li>\n<li>\n<p>It is responsible for the following:</p>\n<ul>\n<li>Storing functions for the event loop to monitor</li>\n<li>Informing the event loop when there are events available</li>\n</ul>\n</li>\n</ul>\n<h3>Describing the Event Loop</h3>\n<ul>\n<li>The event loop is a constantly running process that checks if the call stack is empty</li>\n<li>Imagine the event loop is a clock</li>\n<li>Every time the clock ticks, it looks at the call stack</li>\n<li>And, if it is empty, it looks into the event queue</li>\n<li>If there is an event in the event queue, then the event loop sends the event to the call stack to be executed</li>\n<li>Otherwise, nothing happens</li>\n</ul>\n<h3>Blocking the Event Loop</h3>\n<ul>\n<li>The even loop will be blocked if code takes too long to be executed in the call stack</li>\n<li>This is because events will build up in the event queue, but the event loop will never move them to the call stack (since it's full)</li>\n<li>Specifically, this is because JavaScript is single-threaded</li>\n<li>However, nearly all of the I/O primitives in JavaScript are non-blocking</li>\n<li>Meaning, JavaScript code with primitives won't face the problem mentioned above</li>\n<li>\n<p>The following are examples of I/O primitives:</p>\n<ul>\n<li>Network requests</li>\n<li>Node.js filesystem operations</li>\n</ul>\n</li>\n<li>This is why JavaScript is based so much on callbacks (i.e. code has a small chance of being blocked)</li>\n</ul>\n<hr>\n<h3>tldr</h3>\n<ul>\n<li>\n<p>The call stack is responsible for the following</p>\n<ul>\n<li>Tracking what function are currently being executed</li>\n<li>Tracking what function is to be executed afterwards</li>\n</ul>\n</li>\n<li>\n<p>The event table is responsible for the following:</p>\n<ul>\n<li>Tracking events</li>\n<li>Sending events to the event queue</li>\n</ul>\n</li>\n<li>\n<p>The event queue is responsible for the following:</p>\n<ul>\n<li>Storing functions for the event loop to monitor</li>\n<li>Informing the event loop when there are events available</li>\n</ul>\n</li>\n<li>The event loop is a constantly running process that checks if the call stack is empty</li>\n<li>\n<p>The event loop does the following:</p>\n<ol>\n<li>Checks to see if there is space to push to the call stack</li>\n<li>If there is space, it looks if there is an event in the event queue</li>\n<li>If there is an event, then it sends the event to the call stack</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40\" target=\"_blank\" rel=\"nofollow\">Understanding the Event Loop</a></li>\n<li><a href=\"https://flaviocopes.com/javascript-event-loop/\" target=\"_blank\" rel=\"nofollow\">Defining the Event Loop in JavaScript</a></li>\n<li><a href=\"https://stackoverflow.com/a/80113/12777044\" target=\"_blank\" rel=\"nofollow\">Difference between the Stack and Heap</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop\" target=\"_blank\" rel=\"nofollow\">Defining the Event Loop in JavaScript</a></li>\n<li><a href=\"https://felixgerschau.com/javascript-event-loop-call-stack/\" target=\"_blank\" rel=\"nofollow\">Visualizing the Event Loop</a></li>\n</ul>"}},"pageContext":{"slug":"js/misc/eventloop","previousSlug":"js/misc/module","nextSlug":null,"previousTitle":"Module System","nextTitle":null}},"staticQueryHashes":[]}