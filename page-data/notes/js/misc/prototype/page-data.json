{"componentChunkName":"component---src-templates-entry-js","path":"/notes/js/misc/prototype","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Prototype"},"html":"<h3>Defining Prototypes in JavaScript</h3>\n<ul>\n<li>JavaScript is an object-based language based on prototypes</li>\n<li>JavaScript isn't class-based for creating and managing its objects</li>\n<li>A prototype-based language does not make the distinction between classes and instances</li>\n<li>Instead, it just simply has objects</li>\n</ul>\n<h3>Properties of Prototype-based JavaScript</h3>\n<ul>\n<li>All objects can inherit from another object</li>\n<li>Classes and instances are distinct entities</li>\n<li>Prototypes define and create a set of objects with constructor functions</li>\n<li>Objects are created using the <code class=\"language-text\">new</code> operator</li>\n<li>A resulting object hierarchy is constructed by assigning an objects as the prototype associated with a constructor function</li>\n<li>Objects inherit properties by following the prototype chain</li>\n<li>\n<p>An initial set of properties is specified by either:</p>\n<ul>\n<li>A constructor function</li>\n<li>A prototype</li>\n</ul>\n</li>\n<li>\n<p>Properties can be added and removed dynamically to individual objects</p>\n<ul>\n<li>They can also be added to an entire set of objects dynamically</li>\n</ul>\n</li>\n<li>Objects just see a prototype as property</li>\n</ul>\n<h3>Creating Objects with Constructors</h3>\n<ul>\n<li>By convention, constructors are meant to be capitalized functions</li>\n<li>Constructors are called with the <code class=\"language-text\">new</code> operator to create an object</li>\n<li>\n<p>Calling <code class=\"language-text\">new Constructor()</code> does the following:</p>\n<ul>\n<li>Creates a new object</li>\n<li>Assigns the object to the <code class=\"language-text\">this</code> value in the constructor</li>\n<li>Reserves the <code class=\"language-text\">prototype</code> property for internal use</li>\n<li>\n<p>The new object is implicitly returned by the constructor</p>\n<ul>\n<li>This is why constructors don't have return statements</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Anything defined in the constructor's prototype becomes available to instances</p>\n<ul>\n<li>Specifically, by calling the <code class=\"language-text\">new</code> operator on the constructor</li>\n</ul>\n</li>\n<li>Assigning properties in a constructor will create a global variable</li>\n</ul>\n<h3>Illustrating Object Creation with Constructors</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// constructor function</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">a</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'a'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'b'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nPerson<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// person object</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// works</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// works</span>\ntest<span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span>\ntest<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// error</span></code></pre></div>\n<h3>Use Cases for Constructors</h3>\n<ul>\n<li>\n<p>Define properties in constructors when:</p>\n<ul>\n<li>Defining properties based on arguments of constructor function</li>\n<li>Defining public methods with access to private variables</li>\n</ul>\n</li>\n<li>\n<p>Define methods on the prototype property when:</p>\n<ul>\n<li>Defining dynamic methods and properties based on arguments from constructor function</li>\n<li>\n<p>Needing better performance</p>\n<ul>\n<li>Each method has to be created every time the constructor function runs</li>\n<li>Methods on the prototype chain are created once and then <em>inherited</em> by each instance</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Illustrating Use Cases for Constructors</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Properties defined within constructor</span>\n<span class=\"token comment\">// based on arguments</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Methods defined within constructor</span>\n<span class=\"token comment\">// using private variables</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> prefix <span class=\"token operator\">=</span> <span class=\"token string\">'hello '</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> prefix <span class=\"token operator\">+</span> a<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">b</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> prefix <span class=\"token operator\">+</span> a <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Methods defined in prototype</span>\n<span class=\"token comment\">// for dynamic functions</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">c</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Illustrating Comparison of Constructors and Prototypes</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Accessing constructor from object instances</span>\nobj1<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object  <span class=\"token comment\">// true</span>\nobj2<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> SomeConstructor  <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// Accessing prototype from object instances</span>\n<span class=\"token comment\">// ...with a Constructor</span>\nmike<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype  <span class=\"token comment\">// true</span>\nmike<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype  <span class=\"token comment\">// true</span>\n\n<span class=\"token comment\">// ...and with a Factory</span>\nmike<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span>Prototype  <span class=\"token comment\">// true</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/4508498/12777044\" target=\"_blank\" rel=\"nofollow\">Use Cases of Prototypes</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model\" target=\"_blank\" rel=\"nofollow\">Details of Object Model</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"nofollow\">Inheritance and the Prototype Chain</a></li>\n<li><a href=\"https://stackoverflow.com/a/37999611/12777044\" target=\"_blank\" rel=\"nofollow\">JavaScript Constructors and Prototypes</a></li>\n<li><a href=\"https://stackoverflow.com/a/36492127/12777044\" target=\"_blank\" rel=\"nofollow\">JavaScript Constructors and Factories</a></li>\n<li><a href=\"https://medium.com/@chamikakasun/javascript-factory-functions-vs-constructor-functions-585919818afe\" target=\"_blank\" rel=\"nofollow\">Details about JavaScript Prototypes</a></li>\n<li><a href=\"https://stackoverflow.com/a/12175459/12777044\" target=\"_blank\" rel=\"nofollow\">Comparing Prototypes and ES6 Object Literals</a></li>\n</ul>"}},"pageContext":{"slug":"js/misc/prototype","previousSlug":null,"nextSlug":"js/misc/factory","previousTitle":null,"nextTitle":"Factory Function"}},"staticQueryHashes":[]}