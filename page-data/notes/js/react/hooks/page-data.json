{"componentChunkName":"component---src-templates-entry-js","path":"/notes/js/react/hooks","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Hooks"},"html":"<h3>Defining Hooks in React</h3>\n<ul>\n<li>Hooks are an addition to React in version 16.8</li>\n<li>They allow us to use React features without writing a class</li>\n<li>Previously, we could only access state using class components</li>\n<li>With hooks, we can access state using functional components</li>\n<li>Thus, hooks don't work inside of class components</li>\n</ul>\n<h3>Motivating Hooks in React</h3>\n<ul>\n<li>\n<p>Avoiding the whole confusion with <code class=\"language-text\">this</code> keyword</p>\n<ul>\n<li>With hooks, stateful logic is accessible with functional components</li>\n<li>Class components require a certain level of knowledge about the <code class=\"language-text\">this</code> keyword in JavaScript</li>\n<li>Due to the behavior of <code class=\"language-text\">this</code>, we must bind event handlers</li>\n<li>Classes don't minify very well</li>\n</ul>\n</li>\n<li>\n<p>Reusing stateful component logic can be difficult</p>\n<ul>\n<li>The HOC and render props patterns address this problem</li>\n<li>These patterns require restructuring our components</li>\n<li>This restructuring can cause our code to look awkward, since we wrap our components with other components</li>\n<li>So, there's a need to improve sharing stateful logic</li>\n<li>With hooks, we can reuse stateful logic without creating and wrapping additional components</li>\n</ul>\n</li>\n<li>\n<p>Organizing complex scenarios as functional components</p>\n<ul>\n<li>Without hooks, related code isn't organized in one place</li>\n<li>With hooks, we can create components for complex scenarios (e.g. data fetching, event subscribing, etc.)</li>\n<li>For example, fetching happens in <code class=\"language-text\">componentDidMount</code> and <code class=\"language-text\">componentDidUpdate</code> without hooks</li>\n<li>Also, event listeners are set up in <code class=\"language-text\">componentDidMount</code> and <code class=\"language-text\">componentDidUpdate</code> without hooks</li>\n<li>Because of stateful logic, we can't break components into smaller ones</li>\n</ul>\n</li>\n</ul>\n<h3>Rules for Hooks</h3>\n<ul>\n<li>Only call hooks at the top level</li>\n<li>Meaning, don't call hooks inside loops, conditions, etc.</li>\n<li>Only call hooks from React functions</li>\n<li>Meaning, call them from within funcitonal components in React</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=cF2lQ_gZeA8&#x26;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&#x26;index=44\" target=\"_blank\" rel=\"nofollow\">Video about the Basics of Hooks</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-intro.html\" target=\"_blank\" rel=\"nofollow\">Introducing Hooks in React Docs</a></li>\n</ul>"}},"pageContext":{"slug":"js/react/hooks","previousSlug":"js/react/context","nextSlug":"js/react/usestate","previousTitle":"Context","nextTitle":"The useState Hook"}},"staticQueryHashes":[]}