{"componentChunkName":"component---src-templates-entry-js","path":"/notes/js/react/mounting-lifecycle","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Mounting Lifecycle Methods"},"html":"<h3>Introducing Lifecycle Methods</h3>\n<ul>\n<li>A React component goes through several stages in its lifecycle</li>\n<li>React provides built-in methods for overriding particular stages in a component's lifecycle</li>\n<li>These lifecycle methods are only available to class components</li>\n<li>Lifecycle-like behavior can be implemented in functional components using hooks</li>\n<li>\n<p>Lifecycle methods can be classified into into four categories:</p>\n<ul>\n<li>Mounting methods</li>\n<li>Updating methods</li>\n<li>Unmounting methods</li>\n<li>Error handling methods</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/d53a2b3e3dd924931c3589371d0cfbcf/reactlifecycle.svg\" alt=\"ReactLifecycle\"></p>\n<h3>Introducing Mounting Lifecycle Methods</h3>\n<ul>\n<li>Mounting lifecycle methods are called when an instance of a component is created</li>\n<li>Thus, they're created when a component is inserted into the DOM</li>\n<li>\n<p>There are four mounting methods:</p>\n<ul>\n<li><code class=\"language-text\">constructor</code></li>\n<li><code class=\"language-text\">getDerivedStateFromProps</code></li>\n<li><code class=\"language-text\">render</code></li>\n<li><code class=\"language-text\">componentDidMount</code></li>\n</ul>\n</li>\n</ul>\n<h3>Defining the <code class=\"language-text\">constructor(props)</code> Method</h3>\n<ul>\n<li>The constructor is a mounting method</li>\n<li>It is a function that gets invoked when a new component is created</li>\n<li>\n<p>It is used for:</p>\n<ul>\n<li>Initializing state</li>\n<li>Binding the event handlers to components</li>\n</ul>\n</li>\n<li>Constructors should not cause side effects</li>\n<li>For example, HTTP requests shouldn't be made within a constructor method</li>\n<li>Constructors require the <code class=\"language-text\">super(props)</code> function to be called</li>\n<li>The constructor is the only place where we can directly overwrite <code class=\"language-text\">this.state</code> with fields</li>\n<li>In all other scenarios, we must use <code class=\"language-text\">this.setState</code></li>\n</ul>\n<h3>Defining <code class=\"language-text\">getDerivedStateFromProps(props, state)</code></h3>\n<ul>\n<li>This method is rarely used compared to other mounting methods</li>\n<li>It is invoked when the state of a component depends on changes in props over time</li>\n<li>For example, we could use this method when the inital state of a component depends on the props passed to the component</li>\n<li>It is used for setting the state to some value based on the props</li>\n<li>This method is static, meaning it doesn't have access to <code class=\"language-text\">this</code></li>\n</ul>\n<h3>Defining the <code class=\"language-text\">render()</code> Method</h3>\n<ul>\n<li>It is the only required mounting method in a class component</li>\n<li>\n<p>It is used for:</p>\n<ul>\n<li>Reading props and state</li>\n<li>Returning JSX</li>\n</ul>\n</li>\n<li>\n<p>It shouldn't do any of the following:</p>\n<ul>\n<li>Change the state of a component</li>\n<li>Interact with DOM</li>\n<li>Make AJAX calls</li>\n</ul>\n</li>\n<li>When a component a executes a lifecycle method, any lifecycle methods belonging to its children components are executed too</li>\n</ul>\n<h3>Defining the <code class=\"language-text\">componentDidMount()</code> Method</h3>\n<ul>\n<li>This method is invoked once during the lifecycle of a component</li>\n<li>It is invoked immediately after the component and its children component all have been rendered to the DOM</li>\n<li>\n<p>It is used for:</p>\n<ul>\n<li>Causing side effects</li>\n<li>Like interacting with the DOM</li>\n<li>Or performing any AJAX calls to load data</li>\n</ul>\n</li>\n</ul>\n<h3>Order of Execution for Two Mounting Components</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ParentComponent: constructor\nParentComponent: getDerivedStateFromProps\nParentComponent: render\nChildComponent:  constructor\nChildComponent:  getDerivedStateFromProps\nChildComponent:  render\nChildComponent:  componentDidMount\nParentComponent: componentDidMount</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"youtube.com/watch?v=qnN_FuFNq2g&#x26;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&#x26;index=22\">Video about Lifecycle Methods in React</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=KDXZibVdiEI&#x26;list=PLC3y8-rFHvwgg3vaYJgHGnModB54rxOk3&#x26;index=23\" target=\"_blank\" rel=\"nofollow\">Video about Component Mounting in React</a></li>\n<li><a href=\"https://reactjs.org/docs/state-and-lifecycle.html\" target=\"_blank\" rel=\"nofollow\">Lifecycle Methods in React Docs</a></li>\n<li><a href=\"https://stackoverflow.com/a/44506265/12777044\" target=\"_blank\" rel=\"nofollow\">Current State of Lifecycle Methods and Hooks</a></li>\n<li><a href=\"https://programmingwithmosh.com/javascript/react-lifecycle-methods/\" target=\"_blank\" rel=\"nofollow\">Illustrating Lifecycle Methods</a></li>\n<li><a href=\"https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\" target=\"_blank\" rel=\"nofollow\">Diagram of React Lifecycle Methods</a></li>\n</ul>"}},"pageContext":{"slug":"js/react/mounting-lifecycle","previousSlug":"js/react/form","nextSlug":"js/react/updating-lifecycle","previousTitle":"Basics of Form Handling","nextTitle":"Updating Lifecycle Methods"}},"staticQueryHashes":[]}