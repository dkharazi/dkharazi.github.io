{"componentChunkName":"component---src-templates-entry-js","path":"/notes/js/this/explicit","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Explicit Binding"},"html":"<h3>Describing Explicit Binding</h3>\n<ul>\n<li>\n<p>Explicit binding occurs when any of the following are used on a function</p>\n<ul>\n<li><code class=\"language-text\">.call()</code></li>\n<li><code class=\"language-text\">.apply()</code></li>\n<li><code class=\"language-text\">.bind()</code></li>\n</ul>\n</li>\n<li>This is <em>explicit</em> because we're explicitely passing the <code class=\"language-text\">this</code> contect to <code class=\"language-text\">.call()</code>, <code class=\"language-text\">.apply()</code>, or <code class=\"language-text\">.bind()</code></li>\n</ul>\n<h3>Describing the <code class=\"language-text\">call</code> Method</h3>\n<ul>\n<li>The <code class=\"language-text\">.call()</code> method is used for passing the <code class=\"language-text\">this</code> keyword as an argument</li>\n<li>\n<p>Use cases include:</p>\n<ul>\n<li>Calling a function on a set of objects</li>\n<li>Calling a function on multiple objects simultaneously</li>\n<li>Many more</li>\n</ul>\n</li>\n</ul>\n<h3>Describing the <code class=\"language-text\">apply</code> Method</h3>\n<ul>\n<li>The <code class=\"language-text\">.apply()</code> method works almost the same as <code class=\"language-text\">.call()</code></li>\n<li>\n<p>However, <code class=\"language-text\">.apply()</code> passes in any array of parameters for any optional arguments following the <code class=\"language-text\">this</code> keyword</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// call</span>\n<span class=\"token function\">myFunc</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>thisContext<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>// apply\nmyFunc.apply(thisContext, [param1, param2, ...]);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">### Illustrating Explicit Binding\n```js\nfunction add(obj) {\n    return obj.x + obj.y;\n}\n\nclass Num {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  minus() {\n    return y - x;\n  }\n}\n\n// One use case\nlet n = [new Num(10,20), new Num(30,40)];\nfor (let i of n) {\n    console.log(add(i));\n}\n// 30\n// 70\n\n// Another use case\nlet n = new Num(10,20);\nconsole.log(Num.prototype.add(10,20));  // NaN\nconsole.log(Num.prototype.add.call(n));  // 30</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://gist.github.com/zcaceres/2a4ac91f9f42ec0ef9cd0d18e4e71262\" target=\"_blank\" rel=\"nofollow\">Context for this Keyword</a></li>\n</ul>"}},"pageContext":{"slug":"js/this/explicit","previousSlug":"js/this/implicit","nextSlug":"js/this/default","previousTitle":"Implicit Binding","nextTitle":"Default Binding"}},"staticQueryHashes":[]}