{"componentChunkName":"component---src-templates-entry-js","path":"/notes/ml/cnn/detection","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Introducing Object Detection"},"html":"<h3>Introducing Object Detection</h3>\n<ul>\n<li>Suppose we want to detect cars in images and videos</li>\n<li>This process involves object detection</li>\n<li>Object detection is a type of supervised classification</li>\n<li>Therefore, we need to train a network on a large number of input images of cars</li>\n<li>Having more images will lead to more accurate predictions of whether an image has a car or not</li>\n<li>This network would return a binary output of whether there is a car or not</li>\n<li>This network would also return the coordinates representing a bounding box around the car</li>\n<li>\n<p>The following are the general steps for object detection:</p>\n<ol>\n<li>Train a convolutional network on images of cars</li>\n<li>Perform sliding windows detection on live video or new images</li>\n<li>Output a list of bounding boxes around any cars if they exist</li>\n</ol>\n</li>\n</ul>\n<p><img src=\"/5ca5837b32d8d16a3ddfe156184e1a65/convolution_detection.svg\" alt=\"convolutiondetection\"></p>\n<h3>Algorithm for Sliding Windows Detection</h3>\n<ol>\n<li>\n<p>Initialize a window size</p>\n<ul>\n<li>The window size represents the size on an image that will be trained on our convolution\nal network</li>\n</ul>\n</li>\n<li>\n<p>Select a region of our image</p>\n<ul>\n<li>This region is based on the window size</li>\n</ul>\n</li>\n<li>\n<p>Input this image region into our convolutional network</p>\n<ul>\n<li>This convolutional network should be already trained on many images</li>\n</ul>\n</li>\n<li>\n<p>Receive output from the convolutional network</p>\n<ul>\n<li>The output is our prediction of whether the image is a car or not</li>\n</ul>\n</li>\n<li>\n<p>Repeat steps 2-4</p>\n<ul>\n<li>In other words, iterate through the image, shift the window to a slightly different region, and input that new region into our convolutional network</li>\n<li>Continue to do this until we have iterated through the entire image</li>\n</ul>\n</li>\n<li>\n<p>Repeat steps 2-5</p>\n<ul>\n<li>After returning to step 2, we should increase the window size</li>\n<li>In other words, increase the window size after iterating through the entire image</li>\n<li>Then, input the image region into the convolutional network while shifting the window to a slightly different region of the image afterwards</li>\n<li>We should keep increasing the window size 2-3 times</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"/6ba2124071b48e6649a5ba63144333b4/slidingwindow.gif\" alt=\"slidingwindow\"></p>\n<h3>Describing Sliding Window Detection</h3>\n<ul>\n<li>Sliding window detection involves sliding a window across an entire image</li>\n<li>Then, each square region within the window is classified</li>\n<li>A stride hyperparameter determines how much the window slides across the image</li>\n<li>In other words, a stride hyperparameter determines the step size</li>\n<li>\n<p>Therefore, there becomes a trade-off between accuracy and performance:</p>\n<ul>\n<li>A larger stride can lead to decreased accuracy and increased performance</li>\n<li>A smaller stride can lead to decreased performance and increased accuracy</li>\n</ul>\n</li>\n<li>\n<p>The computational cost grows quickly because:</p>\n<ul>\n<li>We're cropping out so many square regions in the image</li>\n<li>Running each of these regions independently in a convolutional network</li>\n</ul>\n</li>\n<li>Implementing sliding window detection within our convolutional network can help increase performance</li>\n</ul>\n<h3>Converting FC Layers into Convolutional Layers</h3>\n<ul>\n<li>As we've hinted at already, a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\times 1 \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> convolutional layer can be thought of as a fully-connected layer with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> nuerons</li>\n<li>Mathematically, these layers are the same</li>\n<li>Specifically, an image convolved with each of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> number of filters leads to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\times 1 \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> image</li>\n<li>Therefore, each of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> number of filters is a linear function of the activations made up by the previous image</li>\n<li>For example, a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>×</mo><mn>5</mn><mo>×</mo><mn>16</mn></mrow><annotation encoding=\"application/x-tex\">5 \\times 5 \\times 16</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span></span> image convolved with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>400</mn><mspace width=\"2em\"/><mspace width=\"2em\"/></mrow><annotation encoding=\"application/x-tex\">400 \\qquad \\qquad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:2em;\"></span><span class=\"mspace\" style=\"margin-right:2em;\"></span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn><mo>×</mo><mn>5</mn><mo>×</mo><mn>16</mn></mrow><annotation encoding=\"application/x-tex\">5 \\times 5 \\times 16</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span></span> filters becomes a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn><mo>×</mo><mn>400</mn></mrow><annotation encoding=\"application/x-tex\">1 \\times 1 \\times 400</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> convolutional layer</li>\n<li>Each of the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>400</mn></mrow><annotation encoding=\"application/x-tex\">400</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> filters is made up of weights <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>w</mi></mrow><annotation encoding=\"application/x-tex\">w</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span></span></span></span></li>\n<li>So, convolving the filters with the image is essentially performing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>w</mi><msup><mi>a</mi><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(wa^{[l-1]})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">w</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">[</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">]</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is a linear activation function</li>\n</ul>\n<p><img src=\"/472b272c206d819431f3924948119f42/convolutionalfc.svg\" alt=\"convolitionalfclayers\"></p>\n<h3>Implementing Sliding Window Convolutionally</h3>\n<ul>\n<li>Let's return to our sliding window problem</li>\n<li>Rather than iteratively inputting each sliding window region into our network, we can convolutionally perform the predictions all at once</li>\n<li>We can do this by using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>×</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1 \\times 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> convolutional layers in place of fully-connected layer</li>\n</ul>\n<p><img src=\"/63438da59776f63213e36b216a3abbff/convslidingwindow.svg\" alt=\"convslidingwindow\"></p>\n<hr>\n<h3>tldr</h3>\n<ul>\n<li>Sliding window detection involves sliding a window across an entire image</li>\n<li>Then, each square region within the window is classified</li>\n<li>A stride hyperparameter determines how much the window slides across the image</li>\n<li>In other words, a stride hyperparameter determines the step size</li>\n</ul>\n<hr>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5e5pjeojznk&#x26;list=PLkDaE6sCZn6Gl29AoE31iwdVwSG-KnDzF&#x26;index=25\" target=\"_blank\" rel=\"nofollow\">Object Detection</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=XdsmlBGOK-k&#x26;list=PLkDaE6sCZn6Gl29AoE31iwdVwSG-KnDzF&#x26;index=26\" target=\"_blank\" rel=\"nofollow\">Convolutional Implementation Sliding Windows</a></li>\n</ul>"}},"pageContext":{"slug":"ml/cnn/detection","previousSlug":"ml/cnn/localization","nextSlug":"ml/cnn/yolo","previousTitle":"Object Localization","nextTitle":"YOLO Algorithm"}},"staticQueryHashes":[]}