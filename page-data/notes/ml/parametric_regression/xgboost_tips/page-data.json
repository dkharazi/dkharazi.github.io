{"componentChunkName":"component---src-templates-entry-js","path":"/notes/ml/parametric_regression/xgboost_tips","result":{"data":{"markdownRemark":{"frontmatter":{"title":"XGBoost Tips"},"html":"<h3>Getting Best Booster</h3>\n<ul>\n<li>The best tree will be the final tree</li>\n<li>\n<p>The main difference between RF and GB is how the trees are trained</p>\n<ul>\n<li>Inference is roughly the same, gathering estimates from each tree to come up with a final prediction</li>\n<li>RF training starts with a new tree when producing a new tree (i.e. bagging)</li>\n<li>GB training creates a new tree based on previous tree (i.e. boosting)</li>\n</ul>\n</li>\n<li>\n<p>Each boosted tree will be weighted and aggregated to come up with a final prediction for an observation</p>\n<ul>\n<li>Each boosted tree is given the same weight <code class=\"language-text\">eta</code> when making a final prediction</li>\n<li>The final prediction is the sum of each tree's prediction multiplied by a constant weight <code class=\"language-text\">eta</code></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">best_iteration <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>get_booster<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>best_ntree_limit\nnum_trees <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>get_booster<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>get_dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Best iteration:'</span><span class=\"token punctuation\">,</span> best_iteration<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Num iterations:'</span><span class=\"token punctuation\">,</span> num_trees<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Displaying Decision Rules for Individual Trees</h3>\n<ul>\n<li>Decision rules of individual trees can be visualized and printed</li>\n<li>\n<p>To visualize decision rules of an individual tree, use the <code class=\"language-text\">xgb.plot_tree</code> function</p>\n<ul>\n<li>If image is blurry, increase clarity by increasing <code class=\"language-text\">figsize</code> parameter</li>\n<li>Specify individual tree using the <code class=\"language-text\">num_trees</code> parameter</li>\n</ul>\n</li>\n<li>\n<p>To print decision rules of all trees, use the <code class=\"language-text\">dump_model</code> function</p>\n<ul>\n<li>For more details about the decision rules (e.g. coverage), set <code class=\"language-text\">with_stats</code> parameter to True</li>\n<li>Decision rules and any statistics will be outputted to a file</li>\n</ul>\n</li>\n<li>To analyze decision rules, gains, and other statistics, use the <code class=\"language-text\">trees_to_dataframe</code> function</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># Plot decision rules of 5th tree</span>\n<span class=\"token comment\"># Increase fig size to make plot more clear</span>\nfig<span class=\"token punctuation\">,</span> ax <span class=\"token operator\">=</span> plt<span class=\"token punctuation\">.</span>subplots<span class=\"token punctuation\">(</span>figsize<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nxgb<span class=\"token punctuation\">.</span>plot_tree<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> num_trees<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> fontsize<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> ax<span class=\"token operator\">=</span>ax<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Print decision rules of every tree</span>\nmodel<span class=\"token punctuation\">.</span>get_booster<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>dump_model<span class=\"token punctuation\">(</span><span class=\"token string\">'./xgb_model.txt'</span><span class=\"token punctuation\">,</span> with_stats<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./xgb_model.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    txt_model <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>txt_model<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># Output decision rules and gains to dataframe</span>\ntemp_df <span class=\"token operator\">=</span> model<span class=\"token punctuation\">.</span>get_booster<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>trees_to_dataframe<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntemp_df<span class=\"token punctuation\">[</span>temp_df<span class=\"token punctuation\">[</span><span class=\"token string\">'Tree'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<h3>Analyzing Different Feature Importances</h3>\n<ul>\n<li>\n<p>Weight refers to the number of times a feature is used in a splitting criteria</p>\n<ul>\n<li>This could include splitting of just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> outlier observation</li>\n<li>Weight will count a feature twice if that feature is used as two separate decision rules in a single tree</li>\n</ul>\n</li>\n<li>\n<p>Gain refers to the accuracy gain by including the feature</p>\n<ul>\n<li>Includes more balanced splits in terms of coverage, so less prone to generating higher gains if filtering out a single outlier observation</li>\n<li>But, these features aren't necessarily present in a lot of trees</li>\n</ul>\n</li>\n<li>\n<p>Cover refers to number of observations involved in decision rules across all trees</p>\n<ul>\n<li>Doesn't look at features included very often throughout the trees</li>\n<li>Can be impacted by splits only accounting for outliers</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># gain:</span>\n<span class=\"token comment\"># - includes more balanced splits in terms of coverage</span>\n<span class=\"token comment\"># - but aren't necessarily present in a lot of trees</span>\n<span class=\"token comment\"># weight:</span>\n<span class=\"token comment\"># - includes splits accounting for outliers</span>\n<span class=\"token comment\"># - but are features that included very often</span>\n<span class=\"token comment\"># cover:</span>\n<span class=\"token comment\"># - doesn't look at features included very often</span>\n<span class=\"token comment\"># - and includes splits accounting for outliers</span>\nxgb<span class=\"token punctuation\">.</span>plot_importance<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> max_num_features<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> importance_type<span class=\"token operator\">=</span><span class=\"token string\">'gain'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://medium.com/analytics-vidhya/what-makes-xgboost-so-extreme-e1544a4433bb\" target=\"_blank\" rel=\"nofollow\">Blog Post about XGBoost Algorithm</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=OtD8wVaFm6E\" target=\"_blank\" rel=\"nofollow\">Video about XGBoost for Regression</a></li>\n<li><a href=\"https://stackoverflow.com/a/34331573/12777044\" target=\"_blank\" rel=\"nofollow\">Post about Accessing Weights of Individual Trees</a></li>\n<li><a href=\"https://stats.stackexchange.com/a/397050/278990\" target=\"_blank\" rel=\"nofollow\">Post about Different Options of Feature Importances</a></li>\n</ul>"}},"pageContext":{"slug":"ml/parametric_regression/xgboost_tips","previousSlug":"ml/parametric_regression/xgboost","nextSlug":null,"previousTitle":"XGBoost for Regression","nextTitle":null}},"staticQueryHashes":[]}