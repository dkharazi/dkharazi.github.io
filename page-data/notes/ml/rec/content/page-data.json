{"componentChunkName":"component---src-templates-entry-js","path":"/notes/ml/rec/content","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Content-Based Filtering"},"html":"<h3>Introducing Content-Based Filtering Models</h3>\n<ul>\n<li>These models rely on non-rating data or very limited rating data</li>\n<li>\n<p>The main idea of content filtering is quite straightforward:</p>\n<ol>\n<li>Filter on items that a user positively rated (explicitly or implicitly) in the past</li>\n<li>Recommend other items <em>similar</em> to these examples  </li>\n</ol>\n</li>\n<li>Note, this approach is completely centered around how we define <em>similarity</em></li>\n<li>Similarity is based on the content of a given item</li>\n<li>\n<p>And, similarity doesn't include behavioral data</p>\n<ul>\n<li>E.g. information about items that are frequently purchased or rated together by other users</li>\n</ul>\n</li>\n</ul>\n<h3>Defining Content-Based Recommenders</h3>\n<ul>\n<li>\n<p>When measuring similar items for a given user, a content-based recommender essentially only uses one row of the rating matrix</p>\n<ul>\n<li>Specifically, the profile of the user for whom the recommendations are prepared</li>\n</ul>\n</li>\n<li>\n<p>Roughly, we predict a missing item for a given user by using:</p>\n<ul>\n<li>Known ratings for other, already rated items</li>\n<li>The user's behavioral data</li>\n</ul>\n</li>\n<li>Optionally, the recommendations can be ranked according to their similarity scores or rating values</li>\n<li>\n<p>Typically, we can generate recommendations for each item for a user using:</p>\n<ul>\n<li>A neighborhood-based approach</li>\n<li>A regression (or other classification) model</li>\n</ul>\n</li>\n<li>This model will predict whether a user will like an item or not</li>\n</ul>\n<h3>Advantages of Content-Based Filtering</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">User Independence:</code> only uses ratings provided by the user for whom recommendations are prepared</p>\n<ul>\n<li>This is a great advantage when the total number of collected ratings is small</li>\n<li>In other words, we can use this property to our advantage when dealing the with cold-start problem for collaborative filtering models</li>\n<li>The second advantage of user independence is the ability to generate interesting recommendations for users with ununsual tastes</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">New and Rate Items:</code> able to recommend new and rare items more easily</p>\n<ul>\n<li>\n<p>Since collaborative filtering suffers from the cold-start problem, it's harder for them to recommend newer or rate items</p>\n<ul>\n<li>This is because they only rely on ratings, and there's usually fewer ratings than content data</li>\n</ul>\n</li>\n<li>Content filtering doesn't have this problem since it relies on content similarity</li>\n</ul>\n</li>\n</ul>\n<h3>Disadvantages of Content-Based Filtering</h3>\n<ul>\n<li><code class=\"language-text\">Trivial Recommendations:</code> can often produce trivial recommendations that aren't novel or interesting (i.e. serendipitous)</li>\n<li><code class=\"language-text\">Feature Engineering:</code> requires feature engineering for content features included in any recommender model</li>\n<li>\n<p><code class=\"language-text\">New Users:</code> not able to provide recommendations for new users without history of content features (but can mitigate cold-start problem)</p>\n<ul>\n<li>This is a direct result of the scoring method used by the model</li>\n<li>Since, it will only really favor and recommend extremely similar items</li>\n</ul>\n</li>\n</ul>\n<h3>Defining Methods for Content-Based Filtering</h3>\n<ul>\n<li>\n<p>Generally, there are two forms of content-based models:</p>\n<ul>\n<li>Neighborhood-based filtering</li>\n<li>Model-based filtering</li>\n</ul>\n</li>\n<li>A k-Nearest Neighbor algorithm is usually used for neighborhood-based methods</li>\n<li>As a reminder, a kNN algorithm relies on similarity metrics</li>\n<li>Whereas, a model focuses on estimating the probability of an item receiving a positive rating</li>\n<li>Our model could include a naive-bayes classifier, XGBoost model, etc.</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://algorithmicweb.files.wordpress.com/2018/07/algorithmic-marketing-ai-for-marketing-operations-r1-7g.pdf\" target=\"_blank\" rel=\"nofollow\">Textbook about Algorithmic Marketing</a></li>\n</ul>"}},"pageContext":{"slug":"ml/rec/content","previousSlug":"ml/rec/evaluate","nextSlug":"ml/rec/neighborcollab","previousTitle":"Quality Evaluation","nextTitle":"Neighborhood-Based Collab Filtering"}},"staticQueryHashes":[]}