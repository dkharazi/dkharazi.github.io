{"componentChunkName":"component---src-templates-entry-js","path":"/notes/ml/spacy/ner_training","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Training NER"},"html":"<h3>Step-by-Step Training Process</h3>\n<ol>\n<li>Load the model</li>\n<li>Shuffle and loop over the training data</li>\n<li>\n<p>Update the model for each sample by calling <code class=\"language-text\">nlp.update</code></p>\n<ul>\n<li>Updating involves consulting the annotations to see whether it was right</li>\n<li>If it was wrong, it adjusts its weights so that the correction action will score higher next time</li>\n</ul>\n</li>\n<li>Save the model using <code class=\"language-text\">nlp.to_disk</code></li>\n<li>Test the model to make sure the training data are recognized correctly</li>\n</ol>\n<h3>Sample Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> unicode_literals<span class=\"token punctuation\">,</span> print_function\n\n<span class=\"token keyword\">import</span> plac\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">import</span> spacy\n<span class=\"token keyword\">from</span> spacy<span class=\"token punctuation\">.</span>util <span class=\"token keyword\">import</span> minibatch<span class=\"token punctuation\">,</span> compounding\n\n\n<span class=\"token comment\"># training data</span>\nTRAIN_DATA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Who is Shaka Khan?\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"entities\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PERSON\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"I like London and Berlin.\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"entities\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"LOC\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token decorator annotation punctuation\">@plac<span class=\"token punctuation\">.</span>annotations</span><span class=\"token punctuation\">(</span>\n    model<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Model name. Defaults to blank 'en' model.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"m\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Optional output directory\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n_iter<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of training iterations\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>model<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> output_dir<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> n_iter<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Load the model, set up the pipeline and train the entity recognizer.\"\"\"</span>\n    <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        nlp <span class=\"token operator\">=</span> spacy<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># load existing spaCy model</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loaded model '%s'\"</span> <span class=\"token operator\">%</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        nlp <span class=\"token operator\">=</span> spacy<span class=\"token punctuation\">.</span>blank<span class=\"token punctuation\">(</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># create blank Language class</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Created blank 'en' model\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># create the built-in pipeline components and add them to the pipeline</span>\n    <span class=\"token comment\"># nlp.create_pipe works for built-ins that are registered with spaCy</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">\"ner\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> nlp<span class=\"token punctuation\">.</span>pipe_names<span class=\"token punctuation\">:</span>\n        ner <span class=\"token operator\">=</span> nlp<span class=\"token punctuation\">.</span>create_pipe<span class=\"token punctuation\">(</span><span class=\"token string\">\"ner\"</span><span class=\"token punctuation\">)</span>\n        nlp<span class=\"token punctuation\">.</span>add_pipe<span class=\"token punctuation\">(</span>ner<span class=\"token punctuation\">,</span> last<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># otherwise, get it so we can add labels</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        ner <span class=\"token operator\">=</span> nlp<span class=\"token punctuation\">.</span>get_pipe<span class=\"token punctuation\">(</span><span class=\"token string\">\"ner\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># add labels</span>\n    <span class=\"token keyword\">for</span> _<span class=\"token punctuation\">,</span> annotations <span class=\"token keyword\">in</span> TRAIN_DATA<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> ent <span class=\"token keyword\">in</span> annotations<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"entities\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            ner<span class=\"token punctuation\">.</span>add_label<span class=\"token punctuation\">(</span>ent<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># get names of other pipes to disable them during training</span>\n    pipe_exceptions <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ner\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"trf_wordpiecer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"trf_tok2vec\"</span><span class=\"token punctuation\">]</span>\n    other_pipes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>pipe <span class=\"token keyword\">for</span> pipe <span class=\"token keyword\">in</span> nlp<span class=\"token punctuation\">.</span>pipe_names <span class=\"token keyword\">if</span> pipe <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> pipe_exceptions<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">with</span> nlp<span class=\"token punctuation\">.</span>disable_pipes<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>other_pipes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># only train NER</span>\n        <span class=\"token comment\"># reset and initialize the weights randomly – but only if we're</span>\n        <span class=\"token comment\"># training a new model</span>\n        <span class=\"token keyword\">if</span> model <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            nlp<span class=\"token punctuation\">.</span>begin_training<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> itn <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>TRAIN_DATA<span class=\"token punctuation\">)</span>\n            losses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n            <span class=\"token comment\"># batch up the examples using spaCy's minibatch</span>\n            batches <span class=\"token operator\">=</span> minibatch<span class=\"token punctuation\">(</span>TRAIN_DATA<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>compounding<span class=\"token punctuation\">(</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> batches<span class=\"token punctuation\">:</span>\n                texts<span class=\"token punctuation\">,</span> annotations <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>batch<span class=\"token punctuation\">)</span>\n                nlp<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>\n                    texts<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># batch of texts</span>\n                    annotations<span class=\"token punctuation\">,</span>  <span class=\"token comment\"># batch of annotations</span>\n                    drop<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\"># dropout - make it harder to memorise data</span>\n                    losses<span class=\"token operator\">=</span>losses<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Losses\"</span><span class=\"token punctuation\">,</span> losses<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># test the trained model</span>\n    <span class=\"token keyword\">for</span> text<span class=\"token punctuation\">,</span> _ <span class=\"token keyword\">in</span> TRAIN_DATA<span class=\"token punctuation\">:</span>\n        doc <span class=\"token operator\">=</span> nlp<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entities\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>ent<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> ent<span class=\"token punctuation\">.</span>label_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> ent <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">.</span>ents<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tokens\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ent_type_<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ent_iob<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># save model to output directory</span>\n    <span class=\"token keyword\">if</span> output_dir <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> output_dir<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            output_dir<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        nlp<span class=\"token punctuation\">.</span>to_disk<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saved model to\"</span><span class=\"token punctuation\">,</span> output_dir<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># test the saved model</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loading from\"</span><span class=\"token punctuation\">,</span> output_dir<span class=\"token punctuation\">)</span>\n        nlp2 <span class=\"token operator\">=</span> spacy<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> text<span class=\"token punctuation\">,</span> _ <span class=\"token keyword\">in</span> TRAIN_DATA<span class=\"token punctuation\">:</span>\n            doc <span class=\"token operator\">=</span> nlp2<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entities\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>ent<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> ent<span class=\"token punctuation\">.</span>label_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> ent <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">.</span>ents<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tokens\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ent_type_<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>ent_iob<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    plac<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://spacy.io/usage/training#ner\" target=\"_blank\" rel=\"nofollow\">NER Class</a></li>\n</ul>"}},"pageContext":{"slug":"ml/spacy/ner_training","previousSlug":"ml/spacy/goldparse","nextSlug":"ml/spacy/tag_training","previousTitle":"GoldParse","nextTitle":"Training Taggers"}},"staticQueryHashes":[]}