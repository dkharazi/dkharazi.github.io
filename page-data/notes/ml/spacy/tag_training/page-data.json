{"componentChunkName":"component---src-templates-entry-js","path":"/notes/ml/spacy/tag_training","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Training Taggers"},"html":"<h3>Step-by-Step Training Process</h3>\n<ol>\n<li>Load the model</li>\n<li>Add the tap map using the <code class=\"language-text\">add_label</code> method</li>\n<li>Shuffle and loop over the training data</li>\n<li>\n<p>Update the model for each sample using <code class=\"language-text\">nlp.update</code></p>\n<ul>\n<li>Updating involves consulting the annotations to see whether it was right</li>\n<li>If it was wrong, it adjusts its weights so that the correct action will score higher next time</li>\n</ul>\n</li>\n<li>Save the model using <code class=\"language-text\">nlp.to_disk</code></li>\n<li>Test the model to make sure the parser works as expected</li>\n</ol>\n<h3>Sample Code</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> __future__ <span class=\"token keyword\">import</span> unicode_literals<span class=\"token punctuation\">,</span> print_function\n\n<span class=\"token keyword\">import</span> plac\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">from</span> pathlib <span class=\"token keyword\">import</span> Path\n<span class=\"token keyword\">import</span> spacy\n<span class=\"token keyword\">from</span> spacy<span class=\"token punctuation\">.</span>util <span class=\"token keyword\">import</span> minibatch<span class=\"token punctuation\">,</span> compounding\n\n\n<span class=\"token comment\"># You need to define a mapping from your data's part-of-speech tag names to the</span>\n<span class=\"token comment\"># Universal Part-of-Speech tag set, as spaCy includes an enum of these tags.</span>\n<span class=\"token comment\"># See here for the Universal Tag Set:</span>\n<span class=\"token comment\"># http://universaldependencies.github.io/docs/u/pos/index.html</span>\n<span class=\"token comment\"># You may also specify morphological features for your tags, from the universal</span>\n<span class=\"token comment\"># scheme.</span>\nTAG_MAP <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"pos\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"NOUN\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"pos\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"VERB\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"pos\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ADJ\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># Usually you'll read this in, of course. Data formats vary. Ensure your</span>\n<span class=\"token comment\"># strings are unicode and that the number of tags assigned matches spaCy's</span>\n<span class=\"token comment\"># tokenization. If not, you can always add a 'words' key to the annotations</span>\n<span class=\"token comment\"># that specifies the gold-standard tokenization, e.g.:</span>\n<span class=\"token comment\"># (\"Eatblueham\", {'words': ['Eat', 'blue', 'ham'], 'tags': ['V', 'J', 'N']})</span>\nTRAIN_DATA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"I like green eggs\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"tags\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"N\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"V\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token string\">\"Eat blue ham\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"tags\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"V\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n\n<span class=\"token decorator annotation punctuation\">@plac<span class=\"token punctuation\">.</span>annotations</span><span class=\"token punctuation\">(</span>\n    lang<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ISO Code of language to use\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"l\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    output_dir<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Optional output directory\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> Path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    n_iter<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Number of training iterations\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"option\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>lang<span class=\"token operator\">=</span><span class=\"token string\">\"en\"</span><span class=\"token punctuation\">,</span> output_dir<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> n_iter<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"Create a new model, set up the pipeline and train the tagger. In order to\n    train the tagger with a custom tag map, we're creating a new Language\n    instance with a custom vocab.\n    \"\"\"</span>\n    nlp <span class=\"token operator\">=</span> spacy<span class=\"token punctuation\">.</span>blank<span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># add the tagger to the pipeline</span>\n    <span class=\"token comment\"># nlp.create_pipe works for built-ins that are registered with spaCy</span>\n    tagger <span class=\"token operator\">=</span> nlp<span class=\"token punctuation\">.</span>create_pipe<span class=\"token punctuation\">(</span><span class=\"token string\">\"tagger\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Add the tags. This needs to be done before you start training.</span>\n    <span class=\"token keyword\">for</span> tag<span class=\"token punctuation\">,</span> values <span class=\"token keyword\">in</span> TAG_MAP<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        tagger<span class=\"token punctuation\">.</span>add_label<span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">,</span> values<span class=\"token punctuation\">)</span>\n    nlp<span class=\"token punctuation\">.</span>add_pipe<span class=\"token punctuation\">(</span>tagger<span class=\"token punctuation\">)</span>\n\n    optimizer <span class=\"token operator\">=</span> nlp<span class=\"token punctuation\">.</span>begin_training<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>TRAIN_DATA<span class=\"token punctuation\">)</span>\n        losses <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\"># batch up the examples using spaCy's minibatch</span>\n        batches <span class=\"token operator\">=</span> minibatch<span class=\"token punctuation\">(</span>TRAIN_DATA<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span>compounding<span class=\"token punctuation\">(</span><span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> batches<span class=\"token punctuation\">:</span>\n            texts<span class=\"token punctuation\">,</span> annotations <span class=\"token operator\">=</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>batch<span class=\"token punctuation\">)</span>\n            nlp<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>texts<span class=\"token punctuation\">,</span> annotations<span class=\"token punctuation\">,</span> sgd<span class=\"token operator\">=</span>optimizer<span class=\"token punctuation\">,</span> losses<span class=\"token operator\">=</span>losses<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Losses\"</span><span class=\"token punctuation\">,</span> losses<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># test the trained model</span>\n    test_text <span class=\"token operator\">=</span> <span class=\"token string\">\"I like blue eggs\"</span>\n    doc <span class=\"token operator\">=</span> nlp<span class=\"token punctuation\">(</span>test_text<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tags\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>tag_<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>pos_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># save model to output directory</span>\n    <span class=\"token keyword\">if</span> output_dir <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        output_dir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> output_dir<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            output_dir<span class=\"token punctuation\">.</span>mkdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        nlp<span class=\"token punctuation\">.</span>to_disk<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saved model to\"</span><span class=\"token punctuation\">,</span> output_dir<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># test the save model</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loading from\"</span><span class=\"token punctuation\">,</span> output_dir<span class=\"token punctuation\">)</span>\n        nlp2 <span class=\"token operator\">=</span> spacy<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>output_dir<span class=\"token punctuation\">)</span>\n        doc <span class=\"token operator\">=</span> nlp2<span class=\"token punctuation\">(</span>test_text<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Tags\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>tag_<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>pos_<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> t <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    plac<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://spacy.io/usage/training#tagger-parser\" target=\"_blank\" rel=\"nofollow\">Taggers and Parsers in Spacy</a></li>\n</ul>"}},"pageContext":{"slug":"ml/spacy/tag_training","previousSlug":"ml/spacy/ner_training","nextSlug":null,"previousTitle":"Training NER","nextTitle":null}},"staticQueryHashes":[]}