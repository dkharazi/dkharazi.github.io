{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/asyncio/await","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Awaitables"},"html":"<h3>Coroutines with <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code></h3>\n<ul>\n<li>\n<p>Coroutines can be declared with <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code> syntax</p>\n<ul>\n<li>This is the preferred way of writing asyncio applications</li>\n</ul>\n</li>\n<li>\n<p>The difference between the two is the following:</p>\n<ul>\n<li><code class=\"language-text\">async def:</code> Creates a coroutine</li>\n<li><code class=\"language-text\">await:</code> Awaits an awaitable object</li>\n</ul>\n</li>\n<li>\n<p>The following are considered awaitable objects:</p>\n<ul>\n<li>Python coroutines</li>\n<li>asyncio <code class=\"language-text\">Tasks</code></li>\n<li>asyncio <code class=\"language-text\">Futures</code></li>\n</ul>\n</li>\n<li>In asyncio, coroutines can be run with the <code class=\"language-text\">run()</code> function</li>\n<li>In asyncio, coroutines can be run concurrently as <code class=\"language-text\">Tasks</code></li>\n<li>A task can be created using the <code class=\"language-text\">create_task()</code> function</li>\n<li>\n<p>A task usually involves the following:</p>\n<ol>\n<li>Define a task by wrapping a coroutine</li>\n<li>\n<p>Make sure task is defined in a coroutine function</p>\n<ul>\n<li>Meaning, we define a task in a coroutine function</li>\n<li>We do this by defining a task in an <code class=\"language-text\">async def</code></li>\n</ul>\n</li>\n<li>Run coroutine function using <code class=\"language-text\">run()</code></li>\n</ol>\n</li>\n</ul>\n<h3>Differentiating between Coroutines and Tasks</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> asyncio <span class=\"token keyword\">import</span> sleep<span class=\"token punctuation\">,</span> create_task<span class=\"token punctuation\">,</span> run\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> time\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">sleepy_coro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'coro: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">sleepy_task</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     t1 <span class=\"token operator\">=</span> create_task<span class=\"token punctuation\">(</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     t2 <span class=\"token operator\">=</span> create_task<span class=\"token punctuation\">(</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     start <span class=\"token operator\">=</span> time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> t1\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> t2\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'task: '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">round</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> run<span class=\"token punctuation\">(</span>sleepy_coro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'coro: 20'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> run<span class=\"token punctuation\">(</span>sleepy_task<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'task: 10'</span></code></pre></div>\n<h3>Defining Awaitables</h3>\n<ul>\n<li>An object is an <strong>awaitable</strong> if it uses an <code class=\"language-text\">await</code> expression</li>\n<li>\n<p>There are three main types of awaitable objects:</p>\n<ul>\n<li>Python coroutines</li>\n<li>asyncio <code class=\"language-text\">Tasks</code></li>\n<li>asyncio <code class=\"language-text\">Futures</code></li>\n</ul>\n</li>\n<li>Since Python coroutines are awaitables, they can be awaited from other coroutines</li>\n<li><code class=\"language-text\">Tasks</code> are used to schedule coroutines concurrently</li>\n<li>Again, a coroutine is wrapped into a <code class=\"language-text\">Task</code> using <code class=\"language-text\">create_task</code></li>\n<li>At a high level, a coroutine will wait until a <code class=\"language-text\">Future</code> is resolved</li>\n<li>Normally, there is no need to create <code class=\"language-text\">Future</code> objects ourselves</li>\n</ul>\n<h3>Describing <code class=\"language-text\">run(coro)</code></h3>\n<ul>\n<li>This function executes a coroutine <code class=\"language-text\">coro</code></li>\n<li>This function runs the passed coroutine <code class=\"language-text\">coro</code></li>\n<li>This function always creates a new event loop and closes it at the end</li>\n<li>\n<p>In other words, this function will always take care of:</p>\n<ul>\n<li>Managing the asyncio event loop</li>\n<li>Finalizing asynchronous generators</li>\n</ul>\n</li>\n<li>This function can't be called when another asyncio event loop is running in the same thread</li>\n</ul>\n<h3>Describing <code class=\"language-text\">create_task(coro)</code></h3>\n<ul>\n<li>This function wraps a coroutine <code class=\"language-text\">coro</code> into a <code class=\"language-text\">Task</code> object</li>\n<li>Then, it schedules the execution for this <code class=\"language-text\">Task</code></li>\n<li>It returns the <code class=\"language-text\">Task</code> instance</li>\n</ul>\n<h3>Describing <code class=\"language-text\">sleep(delay)</code></h3>\n<ul>\n<li>This function blocks I/O for <code class=\"language-text\">delay</code> seconds</li>\n<li>This function always suspends the current task</li>\n<li>Meaning, other tasks will be able to run</li>\n</ul>\n<h3>Describing <code class=\"language-text\">gather(*aws)</code></h3>\n<ul>\n<li>This function runs awaitable objects <code class=\"language-text\">*aws</code> concurrently</li>\n<li>If any awaitable object in <code class=\"language-text\">*aws</code> is a coroutine, it is automatically scheduled as a <code class=\"language-text\">Task</code></li>\n<li>If all awaitables are completed successfully, then this function returns a list of values</li>\n<li>The order of result values corresponds to the order of awaitables in <code class=\"language-text\">*aws</code></li>\n<li>If <code class=\"language-text\">gather</code> is cancelled, then all submitted awaitables are also cancelled</li>\n</ul>\n<h3>Example of <code class=\"language-text\">gather</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> asyncio\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">factorial</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     f <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task {name}: Calc fac({i})'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         f <span class=\"token operator\">*=</span> i\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Task {name}: fac({num}) = {f}'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\"># Schedule 3 calls concurrently</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>gather<span class=\"token punctuation\">(</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         factorial<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         factorial<span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         factorial<span class=\"token punctuation\">(</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Task a: Calc fac(2)'</span>\n<span class=\"token string\">'Task b: Calc fac(2)'</span>\n<span class=\"token string\">'Task c: Calc fac(2)'</span>\n<span class=\"token string\">'Task a: fac(2) = 2'</span>\n<span class=\"token string\">'Task b: Calc fac(3)'</span>\n<span class=\"token string\">'Task c: Calc fac(3)'</span>\n<span class=\"token string\">'Task b: fac(3) = 6'</span>\n<span class=\"token string\">'Task c: Calc fac(4)'</span>\n<span class=\"token string\">'Task c: fac(4) = 24'</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work/51116910#51116910\" target=\"_blank\" rel=\"nofollow\">How Asyncio Works with Coroutines</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work/51177895#51177895\" target=\"_blank\" rel=\"nofollow\">Coroutines in Asyncio</a></li>\n<li><a href=\"https://docs.python.org/3/library/asyncio-task.html\" target=\"_blank\" rel=\"nofollow\">Documentation of Asyncio Coroutines</a></li>\n</ul>"}},"pageContext":{"slug":"py/asyncio/await","previousSlug":"py/asyncio/coroutine","nextSlug":"py/asyncio/callstack","previousTitle":"Coroutines","nextTitle":"Call Stack"}},"staticQueryHashes":[]}