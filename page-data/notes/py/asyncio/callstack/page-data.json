{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/asyncio/callstack","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Call Stack"},"html":"<h3>Describing a Scope Chain</h3>\n<ul>\n<li>The scope chain of a function is constructed when a function is defined</li>\n<li>Implying, a scope chain is a property of a function</li>\n<li>The scope chain never changes throughout a program</li>\n<li>A scope chain is used for variable lookups</li>\n<li>Roughly, a scope chain is a list of objects</li>\n<li>\n<p>These objects consist of:</p>\n<ul>\n<li>Its own variables</li>\n<li>Its parent variables</li>\n</ul>\n</li>\n<li>A scope chain is considered a chain because each child scope has access to its parent scope</li>\n<li>In other words, each scope is a list that is a chain of objects</li>\n</ul>\n<h3>Illustrating the Scope Chain</h3>\n<ul>\n<li>Refer to the example below,</li>\n<li><code class=\"language-text\">x</code> can be accessed from anywhere</li>\n<li>Implying, <code class=\"language-text\">x</code> is considered to be in the <em>outer scope</em></li>\n<li>More specifically, <code class=\"language-text\">x</code> is considered to be in the <em>global scope</em></li>\n<li>On the other hand, <code class=\"language-text\">y</code> is considered to be in the <em>local scope</em> of the function <code class=\"language-text\">a()</code></li>\n<li>Specifically, <code class=\"language-text\">y</code> can be accessed by the code in <code class=\"language-text\">a()</code> only</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     y <span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<h3>Describing an Execution Context</h3>\n<ul>\n<li>An execution context is separate from the scope chain</li>\n<li>It is constructed when a function is invoked</li>\n<li>\n<p>An execution context is composed of the following:</p>\n<ul>\n<li>The function's parameters</li>\n<li>And local variables</li>\n<li>A reference to the scope chain</li>\n<li>The value of <code class=\"language-text\">self</code></li>\n</ul>\n</li>\n<li>Roughly, an execution context is the <em>environment</em> of a function</li>\n<li>An execution context refers to its scope chain for variable lookups</li>\n<li>An execution context represents the execution of a function (or context)</li>\n</ul>\n<h3>Describing the Call Stack</h3>\n<ul>\n<li>The call stack is a collection of execution contexts</li>\n<li>The bottom of the call stack contains the global execution context</li>\n<li>Each time a new function is called, it gets placed on the top of the call stack</li>\n<li>Once the execution of a function is finished, its execution context gets popped off the call stack</li>\n<li>A call stack is used for tracking each execution context</li>\n</ul>\n<h3>Describing Execution Contexts in Python</h3>\n<ul>\n<li>Conceptually, an <strong>execution context</strong> is a stack of logical contexts</li>\n<li>A <strong>logical context</strong> is a mapping of context variables to their values in that particular logical context</li>\n<li>A <strong>context variable</strong> is an object representing a value in the execution context</li>\n<li>A new context variable is created by calling:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> contextvars<span class=\"token punctuation\">.</span>ContextVar<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Here, <code class=\"language-text\">name</code> is the given name for the context variable</li>\n<li>\n<p>A new <code class=\"language-text\">ContextVar(name)</code> has the following methods:</p>\n<ul>\n<li><code class=\"language-text\">get():</code> A function for getting a context variable</li>\n<li><code class=\"language-text\">set():</code> A function for setting the value of a context variable</li>\n<li><code class=\"language-text\">delete():</code> A function for removing a context variable</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.udemy.com/course/the-complete-javascript-course/learn/lecture/5869128#content\" target=\"_blank\" rel=\"nofollow\">Details about Execution Contexts and Execution Stack</a></li>\n<li><a href=\"https://www.udemy.com/course/the-complete-javascript-course/learn/lecture/5869130#content\" target=\"_blank\" rel=\"nofollow\">More Details about Execution Context</a></li>\n<li><a href=\"https://stackoverflow.com/a/9384894/12777044\" target=\"_blank\" rel=\"nofollow\">Definitions of Execution Contexts</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0550/\" target=\"_blank\" rel=\"nofollow\">PEP 550: Execution Contexts</a></li>\n<li><a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-4-scope-chain/\" target=\"_blank\" rel=\"nofollow\">Chapter about Scope Chain</a></li>\n</ul>"}},"pageContext":{"slug":"py/asyncio/callstack","previousSlug":"py/asyncio/await","nextSlug":"py/asyncio/eventloop","previousTitle":"Awaitables","nextTitle":"Event Loop"}},"staticQueryHashes":[]}