{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/asyncio/concurrency","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Concurrency Options"},"html":"<h3>When is Concurrency Useful in Python?</h3>\n<ul>\n<li>\n<p>Concurrency can help solve two types of problems:</p>\n<ul>\n<li>CPU-bound operations</li>\n<li>I/O-bound operations</li>\n</ul>\n</li>\n<li>\n<p>Improving performance of these operations involves:</p>\n<ul>\n<li><code class=\"language-text\">I/O-bound:</code> Finding ways to overlap time spent waiting</li>\n<li><code class=\"language-text\">CPU-bound:</code> Finding ways to do more computations in the same amount of time</li>\n</ul>\n</li>\n<li>In Python, a good solution of concurrency for one operation may not work well for the other</li>\n</ul>\n<h3>Describing Concurrency in Python</h3>\n<ul>\n<li>Concurrency in CPython is hindered by the GIL</li>\n<li>\n<p>CPython supports the following for a single process:</p>\n<ul>\n<li>CPU-bound threads can't run concurrently</li>\n<li>I/O-bound threads can run concurrently</li>\n</ul>\n</li>\n<li>CPython allows multithreading for I/O-bound threads</li>\n<li>\n<p>Therefore, we should apply the following:</p>\n<ul>\n<li>Multithreading for I/O-bound threads</li>\n<li>Multiprocessing for CPU-bound threads</li>\n</ul>\n</li>\n<li>\n<p>As a result, we achieve the following:</p>\n<ul>\n<li>Lightweight, concurrent I/O-bound threads</li>\n<li>Heavyweight, parallelized CPU-bound threads</li>\n</ul>\n</li>\n</ul>\n<h3>Different Approaches of <code class=\"language-text\">asyncio</code> and <code class=\"language-text\">threading</code></h3>\n<ul>\n<li>Both <code class=\"language-text\">asyncio</code> and <code class=\"language-text\">threading</code> involve tasks and threads</li>\n<li>They differ by how their threads and tasks take turns</li>\n<li>\n<p>Specifically, the two libraries involve the following:</p>\n<ul>\n<li><code class=\"language-text\">threading</code> involves pre-emptive multitasking</li>\n<li><code class=\"language-text\">asyncio</code> involves cooperative multitasking</li>\n</ul>\n</li>\n</ul>\n<h3>Motivating Pre-Emptive Multitasking</h3>\n<ul>\n<li>The <code class=\"language-text\">threading</code> library involves pre-emptive multitasking</li>\n<li>Pre-emptive multitasking ensures each process with a regular slice of CPU time</li>\n<li>This is done by the operating system</li>\n<li>\n<p>As a result, the OS is responsible for the following:</p>\n<ul>\n<li>The OS pauses threads</li>\n<li>The OS resumes threads</li>\n<li>The OS switches between threads</li>\n</ul>\n</li>\n<li>Consequently, we can't influence when threads should switch</li>\n<li>Meaning, a switch could happen during a trivial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">x=x+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>However, this is usually not an issue</li>\n</ul>\n<h3>Motivating Cooperative Multitasking</h3>\n<ul>\n<li>The <code class=\"language-text\">asyncio</code> library involves cooperative multitasking</li>\n<li>Cooperative multitasking ensures each task announces when to give up CPU time</li>\n<li>As a result, some of the responsibilites handled by the OS are transitioned to the user</li>\n<li>Meaning, we gain the potential benefit of choosing when to switch between tasks </li>\n</ul>\n<h3>Illustrating the Options of Concurrency</h3>\n<table>\n<thead>\n<tr>\n<th>Concurrency Type</th>\n<th>Python Package</th>\n<th>Switching Decision</th>\n<th>Number of Processors</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Pre-emptive multitasking</td>\n<td><code class=\"language-text\">threading</code></td>\n<td>The OS decides when to switch tasks (external to Python)</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n</tr>\n<tr>\n<td>Cooperative multitasking</td>\n<td><code class=\"language-text\">asyncio</code></td>\n<td>The tasks decide when to give up control (internal to Pythion)</td>\n<td><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></td>\n</tr>\n<tr>\n<td>Multiprocessing</td>\n<td><code class=\"language-text\">multiprocessing</code></td>\n<td>The processes all run at the same time on different processors</td>\n<td>Many</td>\n</tr>\n</tbody>\n</table>\n<h3>Option 1: Multithreading for I/O</h3>\n<ul>\n<li>\n<p>The benefits are the following:</p>\n<ul>\n<li>Very fast</li>\n<li>Concurrent</li>\n</ul>\n</li>\n<li>\n<p>The disadvantages are the following:</p>\n<ul>\n<li>Amount of code can grow quickly</li>\n<li>Need to worry about raceconditions</li>\n<li>Need to worry about deadlocks</li>\n<li>Difficult to debug</li>\n</ul>\n</li>\n<li>An example of multithreaded code:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> concurrent<span class=\"token punctuation\">.</span>futures <span class=\"token keyword\">import</span> ThreadPoolExecutor\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> requests <span class=\"token keyword\">import</span> Session\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> threading\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> loc <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>local<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">get_session</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> <span class=\"token string\">'session'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         loc<span class=\"token punctuation\">.</span>session <span class=\"token operator\">=</span> Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> loc<span class=\"token punctuation\">.</span>session\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">download_site</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     session <span class=\"token operator\">=</span> get_session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">with</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> resp<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished reading site'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">download_all_sites</span><span class=\"token punctuation\">(</span>sites<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">with</span> ThreadPoolExecutor<span class=\"token punctuation\">(</span>max_workers<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token keyword\">exec</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">exec</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>download_site<span class=\"token punctuation\">,</span> sites<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sites <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://www.jython.org'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'http://olympus.realpython.org/dice'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> download_all_sites<span class=\"token punctuation\">(</span>sites<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Takes 3.7 secs</span></code></pre></div>\n<ul>\n<li>The execution diagram looks like this:</li>\n</ul>\n<p><img src=\"/ce0585da5bfe4fc83dfe1bd06b1e8558/multithreading_schedule.png\" alt=\"multithreadingschedule\"></p>\n<h3>Option 2: Asyncio for I/O</h3>\n<ul>\n<li>\n<p>The benefits are the following:</p>\n<ul>\n<li>Very fast</li>\n<li>Concurrent</li>\n<li>Single threaded (lightweight)</li>\n<li>\n<p>Very scalable</p>\n<ul>\n<li>Creating hundreds of tasks is more scalable than creating hundreds of threads for each session</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>The disadvantages are the following:</p>\n<ul>\n<li>Need non-blocking functions specific to asyncio</li>\n<li>One tasks can destroy performance for other tasks</li>\n</ul>\n</li>\n<li>An example of asynchronous code:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> asyncio <span class=\"token keyword\">import</span> create_task<span class=\"token punctuation\">,</span> gather<span class=\"token punctuation\">,</span> run\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> aiohttp <span class=\"token keyword\">import</span> ClientSession\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">download_site</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> resp<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Finished reading site'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">download_all_sites</span><span class=\"token punctuation\">(</span>sites<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">async</span> <span class=\"token keyword\">with</span> ClientSession<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> sess<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">for</span> url <span class=\"token keyword\">in</span> sites<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             t <span class=\"token operator\">=</span> create_task<span class=\"token punctuation\">(</span>download_site<span class=\"token punctuation\">(</span>sess<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             tasks<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">await</span> gather<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>tasks<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> sites <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'https://www.jython.org'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token string\">'http://olympus.realpython.org/dice'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">80</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> run<span class=\"token punctuation\">(</span>download_all_sites<span class=\"token punctuation\">(</span>sites<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Takes 2.6 secs</span></code></pre></div>\n<ul>\n<li>The execution diagram looks like this:</li>\n</ul>\n<p><img src=\"/fcf65d5f26bececd3a7cc3b4cc4e7ff2/asyncio_schedule.png\" alt=\"asyncioschedule\"></p>\n<h3>Option 3: Multiprocessing for CPU</h3>\n<ul>\n<li>\n<p>The benefits are the following:</p>\n<ul>\n<li>Parallelized</li>\n<li>Runs on multiple CPU cores</li>\n<li>Fairly intuitive</li>\n<li>Similar to synchronous code</li>\n<li>Fast for CPU-bound operations</li>\n</ul>\n</li>\n<li>\n<p>The disadvantages are the following:</p>\n<ul>\n<li>Some strange components</li>\n<li>Slow for I/O-bound operations</li>\n</ul>\n</li>\n<li>An example of multiprocessed code:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Pool\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">cpu_bound</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">find_sums</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">with</span> Pool<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> pool<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         pool<span class=\"token punctuation\">.</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>cpu_bound<span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5000000</span><span class=\"token operator\">+</span>x <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> find_sums<span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># Takes 2.5 secs</span></code></pre></div>\n<ul>\n<li>The execution diagram looks like this:</li>\n</ul>\n<p><img src=\"/ab3686fd3f04e89b2cf7534bb643b171/multiprocess_schedule.png\" alt=\"multiprocessschedule\"></p>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://wiki.python.org/moin/GlobalInterpreterLock\" target=\"_blank\" rel=\"nofollow\">The GIL Affecting Concurrency</a></li>\n<li><a href=\"https://realpython.com/python-concurrency/\" target=\"_blank\" rel=\"nofollow\">Applications of Improving Performance with Concurrency</a></li>\n<li><a href=\"https://stackoverflow.com/a/46375948/12777044\" target=\"_blank\" rel=\"nofollow\">Concurrency with Asyncio</a></li>\n<li><a href=\"https://learn-gevent-socketio.readthedocs.io/en/latest/general_concepts.html\" target=\"_blank\" rel=\"nofollow\">Details about Concurrency</a></li>\n</ul>"}},"pageContext":{"slug":"py/asyncio/concurrency","previousSlug":"py/asyncio/eventloop","nextSlug":null,"previousTitle":"Event Loop","nextTitle":null}},"staticQueryHashes":[]}