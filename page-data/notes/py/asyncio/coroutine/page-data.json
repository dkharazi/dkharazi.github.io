{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/asyncio/coroutine","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Coroutines"},"html":"<h3>Introducing Subroutines and Coroutines</h3>\n<ul>\n<li>\n<p>Subroutines and coroutines are an abstraction of:</p>\n<ul>\n<li>An instruction pointer</li>\n<li>A call stack</li>\n</ul>\n</li>\n<li>\n<p>An <strong>instruction pointer</strong> is a pointer to the current instruction</p>\n<ul>\n<li>This is useful when dealing with generators</li>\n<li>This is because generators need to know where to resume</li>\n<li>So, they must know where to resume on the call stack</li>\n</ul>\n</li>\n<li>A <strong>call stack</strong> is a collection of code relevant to its scope</li>\n<li>\n<p>These pieces of code include the following:</p>\n<ul>\n<li>Local variables</li>\n<li>Functions</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>\n<p>The following are examples of subroutines and coroutines:</p>\n<ul>\n<li><code class=\"language-text\">subroutines:</code> functions, procedures, etc.</li>\n<li><code class=\"language-text\">coroutine:</code> generator, etc.</li>\n</ul>\n</li>\n</ul>\n<h3>Defining a Subroutine</h3>\n<ul>\n<li>A subroutine is represented by a stack frame</li>\n<li>A stack frame represents a function call</li>\n<li>This stack frame gets pushed on a call stack</li>\n<li>A call stack is a data structure that tracks running subroutines</li>\n<li>A function is an example of a subroutine</li>\n</ul>\n<h3>Walkthrough of a Subroutine</h3>\n<ul>\n<li>Consider the following subroutine:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">subroutine1</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token string\">'done'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">subroutine2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     s <span class=\"token operator\">=</span> <span class=\"token string\">'start'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     d <span class=\"token operator\">=</span> subroutine1<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     d <span class=\"token operator\">=</span> d <span class=\"token operator\">+</span> <span class=\"token string\">'!!!'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> d\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> subroutine2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># run -- notice how we can't suspend</span>\n<span class=\"token string\">'start'</span>\n<span class=\"token string\">'done!!!'</span></code></pre></div>\n<ul>\n<li>\n<p>Python will do the following when <code class=\"language-text\">subroutine2</code> is called:</p>\n<ol>\n<li>\n<p>Execute <code class=\"language-text\">subroutine2</code></p>\n<ol>\n<li>\n<p>Create a stack frame for <code class=\"language-text\">subroutine2</code></p>\n<ul>\n<li>A stack frame represents a frame of data</li>\n<li>This frame of data represents a function call</li>\n<li>This frame should allocate space for <code class=\"language-text\">s</code> and <code class=\"language-text\">d</code> too</li>\n</ul>\n</li>\n<li>\n<p>Push this frame of data onto the call stack</p>\n<ul>\n<li>A call stack is a data structure tracking subroutines</li>\n</ul>\n</li>\n<li>Execute <code class=\"language-text\">s = &#39;start&#39;</code></li>\n<li>\n<p>Execute <code class=\"language-text\">d = subroutine1(s)</code></p>\n<ul>\n<li>Create a stack frame for <code class=\"language-text\">subroutine1</code></li>\n<li>This frame should allocate space for <code class=\"language-text\">foo</code></li>\n</ul>\n</li>\n<li>Execute <code class=\"language-text\">print(foo)</code></li>\n<li>\n<p>Execute <code class=\"language-text\">return &#39;done&#39;</code></p>\n<ul>\n<li>This includes pushing <code class=\"language-text\">done</code> to the calling function</li>\n<li>This includes exiting <code class=\"language-text\">subroutine1</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">d = subroutine1(s)</code> saves return value to <code class=\"language-text\">d</code></li>\n<li>Execute <code class=\"language-text\">d = d + &#39;!!!&#39;</code></li>\n<li>\n<p>Execute <code class=\"language-text\">return d</code></p>\n<ul>\n<li>This includes exiting <code class=\"language-text\">subroutine2</code></li>\n<li>This includes returning <code class=\"language-text\">done!!!</code></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h3>Defining a Coroutine</h3>\n<ul>\n<li>A coroutine is similar to a subroutine</li>\n<li>\n<p>However, a coroutine can:</p>\n<ul>\n<li><strong>Suspend</strong> a function without destroying its state</li>\n<li><strong>Resume</strong> a function since state is not destroyed</li>\n</ul>\n</li>\n<li>Coroutine function suspension feels like setting a breakpoint</li>\n</ul>\n<h3>Walkthrough of a Coroutine</h3>\n<ul>\n<li>Consider the following coroutine:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">gen</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> foo\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token string\">'done'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">coroutine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     s <span class=\"token operator\">=</span> <span class=\"token string\">'start'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     d <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> gen<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     d <span class=\"token operator\">=</span> d <span class=\"token operator\">+</span> <span class=\"token string\">'!!!'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> d\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> f <span class=\"token operator\">=</span> coroutine<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'start'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># resume -- notice how we can suspend</span>\nStopIteration<span class=\"token punctuation\">:</span> <span class=\"token string\">'done!!!'</span></code></pre></div>\n<ul>\n<li>\n<p>Python will do the following when <code class=\"language-text\">coroutine</code> is called:</p>\n<ol>\n<li>\n<p>Execute <code class=\"language-text\">f = coroutine()</code>\t</p>\n<ol>\n<li>\n<p>Create a stack frame for <code class=\"language-text\">coroutine</code></p>\n<ul>\n<li>A stack frame represents a frame of data</li>\n<li>This frame of data represents a function call</li>\n<li>This frame should allocate space for <code class=\"language-text\">s</code> and <code class=\"language-text\">d</code> too</li>\n</ul>\n</li>\n<li>\n<p>Push this frame of data onto the call stack</p>\n<ul>\n<li>A call stack is a data structure tracking subroutines</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>Execute <code class=\"language-text\">next(f)</code></p>\n<ol>\n<li>Execute <code class=\"language-text\">s = start</code></li>\n<li>\n<p>Execute <code class=\"language-text\">d = yield from gen(s)</code></p>\n<ol>\n<li>Create a stack frame for <code class=\"language-text\">gen</code></li>\n<li>Push this frame of data onto the call stack</li>\n</ol>\n</li>\n<li>\n<p>Execute <code class=\"language-text\">yield foo</code></p>\n<ul>\n<li>This includes pushing <code class=\"language-text\">foo</code> to the calling function</li>\n<li>This includes pushing pointer for resuming later</li>\n<li>This includes suspending <code class=\"language-text\">gen</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">yield from gen(s)</code> yields <code class=\"language-text\">foo</code> as output</p>\n<ul>\n<li>This includes suspending <code class=\"language-text\">coroutine</code></li>\n<li>This includes returning <code class=\"language-text\">&#39;start&#39;</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p>Execute <code class=\"language-text\">next(f)</code></p>\n<ol>\n<li>\n<p>Resume <code class=\"language-text\">coroutine</code></p>\n<ul>\n<li>This includes resuming <code class=\"language-text\">coroutine</code> where we left off</li>\n<li>This resumes <code class=\"language-text\">gen</code> at <code class=\"language-text\">d = yield from gen(s)</code></li>\n</ul>\n</li>\n<li>\n<p>Execute <code class=\"language-text\">return &#39;done&#39;</code></p>\n<ul>\n<li>This includes pushing <code class=\"language-text\">done</code> to the calling function</li>\n<li>This doesn't include pushing a pointer</li>\n<li>This is because <code class=\"language-text\">gen</code> has finished executing</li>\n</ul>\n</li>\n<li><code class=\"language-text\">d = yield from gen(s)</code> saves return value to <code class=\"language-text\">d</code></li>\n<li>Execute <code class=\"language-text\">d = d + &#39;!!!&#39;</code></li>\n<li>\n<p>Execute <code class=\"language-text\">return d</code></p>\n<ul>\n<li>This includes exiting <code class=\"language-text\">coroutine</code></li>\n<li>This includes returning <code class=\"language-text\">StopIteration: done!!!</code></li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<h3>Summarizing Subroutines and Coroutines</h3>\n<ul>\n<li>\n<p>The main difference between the two routines:</p>\n<ul>\n<li>Subroutines can suspend functions once using <code class=\"language-text\">return</code></li>\n<li>Coroutines can suspend functions frequently using <code class=\"language-text\">yield</code></li>\n</ul>\n</li>\n<li>\n<p>Once a function is suspended:</p>\n<ul>\n<li>Subroutines can't resume again</li>\n<li>Coroutines can resume again (using <code class=\"language-text\">next()</code> logic)</li>\n</ul>\n</li>\n<li>\n<p>The output of each routine:</p>\n<ul>\n<li>Subroutines return data values</li>\n<li>Coroutines yield a data value, call stack, and pointer</li>\n</ul>\n</li>\n<li>\n<p>Specifically, coroutines are good for:</p>\n<ul>\n<li>Looping over large data objects</li>\n<li>Asynchronous I/O</li>\n</ul>\n</li>\n</ul>\n<h3>Describing <code class=\"language-text\">yield from</code></h3>\n<ul>\n<li>\n<p>A subroutine can do the following:</p>\n<ul>\n<li>Go down the call stack with <code class=\"language-text\">return</code></li>\n<li>Go up the call stack with <code class=\"language-text\">()</code></li>\n</ul>\n</li>\n<li>\n<p>A coroutine can do the following:</p>\n<ul>\n<li>Go down the call stack with <code class=\"language-text\">yield</code></li>\n<li>Go up the call stack with <code class=\"language-text\">yield from</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">yield from</code> includes two steps:</p>\n<ol>\n<li>\n<p><code class=\"language-text\">yield</code>:</p>\n<ul>\n<li><code class=\"language-text\">yield:</code> <code class=\"language-text\">yield</code> a value yielded by a sub-generator</li>\n<li>Thus, suspending execution until resumed by <code class=\"language-text\">next()</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">from</code>:</p>\n<ul>\n<li><code class=\"language-text\">from:</code> Receiving a return value <code class=\"language-text\">from</code> a sub-generator</li>\n<li>After initial suspension, it will resume the sub-generator again if <code class=\"language-text\">next()</code> is called on the generator</li>\n<li>Then, it will receive a return value from a sub-generator</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3>Comparing <code class=\"language-text\">yield</code> and <code class=\"language-text\">yield from</code></h3>\n<ul>\n<li>\n<p><code class=\"language-text\">yield from</code> and <code class=\"language-text\">yield</code> are similar by:</p>\n<ul>\n<li>Suspending <code class=\"language-text\">foo</code> until <code class=\"language-text\">bar</code> finishes</li>\n<li>Running the <code class=\"language-text\">bar</code> generator function</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">yield from</code> differs from <code class=\"language-text\">yield</code> in some ways:</p>\n<ul>\n<li>Reading data from a generator without looping</li>\n<li>Receives a return value from a sub-generator</li>\n</ul>\n</li>\n<li>\n<p>In other words, <code class=\"language-text\">yield from</code> does the following:</p>\n<ul>\n<li>Improves readability by implicitly looping</li>\n<li>Allows us to return and manipulate data between generators</li>\n</ul>\n</li>\n</ul>\n<h3>Benefit 1: Reading data without Looping</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token number\">3</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\"># for i in bar():    # Replaced these</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token comment\">#     yield i        # lines...</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> bar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\"># ...with this line</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> foo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\n<span class=\"token number\">3</span></code></pre></div>\n<h3>Benefit 2: Manipulating Data from Sub-Generator</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> j\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> j\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token string\">'before'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     i <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> inner<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\t<span class=\"token keyword\">yield</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token string\">'after'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> outer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nbefore\n<span class=\"token number\">1</span>\n<span class=\"token number\">2</span>\nafter</code></pre></div>\n<h3>Describing <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code></h3>\n<ul>\n<li>Python 3.5 introduced <code class=\"language-text\">async</code> and <code class=\"language-text\">await</code></li>\n<li>Essentially, <code class=\"language-text\">await</code> replaced <code class=\"language-text\">yield from</code></li>\n<li>This was to enforce a cleare role of coroutines</li>\n<li>Again, they mainly changed for clarity purposes:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Python 3.4 and older</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>               <span class=\"token comment\"># subroutine?</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> foobar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># generator? coroutine?</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Python 3.5</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>         <span class=\"token comment\"># coroutine!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> foobar<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\"># coroutine!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></code></pre></div>\n<h3>Differentiating Coroutines from Generators</h3>\n<ul>\n<li>\n<p>A generator can be used in two different contexts:</p>\n<ol>\n<li>As an iterator</li>\n<li>As a coroutine</li>\n</ol>\n</li>\n<li>Therefore, a coroutine is a generator</li>\n<li>\n<p>Generators and coroutines have many similarities:</p>\n<ul>\n<li>They both can <code class=\"language-text\">yield</code></li>\n<li>They both can pause functions</li>\n</ul>\n</li>\n<li>\n<p>However, they differ in one key area:</p>\n<ul>\n<li>A coroutine can contain <code class=\"language-text\">yield</code> and <code class=\"language-text\">await</code></li>\n<li>A generator only contains <code class=\"language-text\">yield</code></li>\n</ul>\n</li>\n<li>In other words, a coroutine receives a value returned by a generator</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.dabeaz.com/coroutines/Coroutines.pdf\" target=\"_blank\" rel=\"nofollow\">Lectures Slides about Coroutines</a></li>\n<li><a href=\"https://stackoverflow.com/a/46822920/12777044\" target=\"_blank\" rel=\"nofollow\">Differences between Coroutines and Generators</a></li>\n<li><a href=\"https://www.integralist.co.uk/posts/python-generators/#coroutines\" target=\"_blank\" rel=\"nofollow\">Blog Post about Coroutines and Generators</a></li>\n<li><a href=\"https://stackoverflow.com/a/26109157/12777044\" target=\"_blank\" rel=\"nofollow\">Benefits of yield from</a></li>\n</ul>"}},"pageContext":{"slug":"py/asyncio/coroutine","previousSlug":"py/asyncio/history","nextSlug":"py/asyncio/await","previousTitle":"Intro to Asyncio API","nextTitle":"Awaitables"}},"staticQueryHashes":[]}