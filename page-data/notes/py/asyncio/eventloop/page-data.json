{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/asyncio/eventloop","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Event Loop"},"html":"<h3>Describing the Asyncio Event Loop</h3>\n<ul>\n<li>We can think of an event loop as a <code class=\"language-text\">while True</code> loop</li>\n<li>\n<p>Specifically, this loop does the following:</p>\n<ul>\n<li>Monitors coroutines</li>\n<li>Takes feedback of idle coroutines</li>\n<li>Looks for executable coroutines</li>\n</ul>\n</li>\n<li>In other words, the event loop wakes up udle coroutines when resources for that coroutine become available</li>\n</ul>\n<h3>Significant Properties of the Event Loop</h3>\n<ol>\n<li>Asyncio implicitly handles the entire management of the event loop when running a coroutine:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>coro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"2\">\n<li>Coroutines don't do much until they're tied to an event loop:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> asyncio\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">coro</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> coro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span>coroutine <span class=\"token builtin\">object</span> coro<span class=\"token operator\">></span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> asyncio<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>coro<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'Hello'</span>\n<span class=\"token string\">'World'</span></code></pre></div>\n<ol start=\"3\">\n<li>\n<p>By default, an asyncio event loop runs:</p>\n<ul>\n<li>In a single thread</li>\n<li>And on a single CPU core</li>\n</ul>\n</li>\n</ol>\n<h3>Motivating Events</h3>\n<ul>\n<li>A coroutine is a separate concept from threads and processes</li>\n<li>It has no concept of yielding control to a new coroutine</li>\n<li>Instead, it can only yield control to its caller</li>\n<li>Its caller is located at the bottom of the coroutine stack</li>\n<li>This calling function switches to another coroutine and runs its</li>\n<li>Each coroutine is run by a single event loop</li>\n<li>\n<p>When a coroutine suspends:</p>\n<ul>\n<li>The function waits until signaled to resume</li>\n<li>Once the function resumes, it yields an <strong>event</strong></li>\n</ul>\n</li>\n</ul>\n<h3>How Events Interact with the Event Loop</h3>\n<ul>\n<li>The event loop waits for events to occur</li>\n<li>Several coroutine <code class=\"language-text\">await</code> each other</li>\n<li>Until, an event is <code class=\"language-text\">await</code>ed finally</li>\n<li>This event can communicate directly with the event loop</li>\n<li>It can do this by <code class=\"language-text\">yield</code>ing control</li>\n<li>Essentially, coroutine suspensions allow the event loop to directly communication with events</li>\n</ul>\n<h3>Illustrating Events in the Event Loop</h3>\n<ul>\n<li>The simplest event to handle is reaching a point in time</li>\n<li>We can illustrate this concept using <code class=\"language-text\">time.sleep()</code></li>\n<li>However, the <code class=\"language-text\">time.sleep</code> function blocks I/O execution</li>\n<li>\n<p>Ideally, we should use a function that does the following:</p>\n<ul>\n<li>Suspends until the timeout has been reached</li>\n<li>Informs the event loop when the function is ready</li>\n</ul>\n</li>\n<li>Fortunately, asyncio provides us with a function that does this</li>\n<li>It is called <code class=\"language-text\">asyncio.sleep()</code></li>\n<li>There are many other functions that are able to suspend without blocking I/O</li>\n<li>However, asyncio needs to provide us with these functions</li>\n</ul>\n<h3>Defining Custom Events for the Event Loop</h3>\n<ul>\n<li>An event is simply a value we can identify</li>\n<li>A class can be defined for this</li>\n<li>Specifically, it will need to store event information</li>\n<li>Implying, we must implement the special function <code class=\"language-text\">__await__</code></li>\n<li>Note, the class only stores the event</li>\n<li>It does not say how to actually handle the event</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://realpython.com/async-io-python/#the-event-loop-and-asynciorun\" target=\"_blank\" rel=\"nofollow\">Description of Event Loop in Asyncio</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49005651/how-does-asyncio-actually-work/51177895#51177895\" target=\"_blank\" rel=\"nofollow\">Details about Event Loop in Asyncio</a></li>\n<li><a href=\"https://stackoverflow.com/a/51116910/12777044\" target=\"_blank\" rel=\"nofollow\">Dissecting the Event Loop in Asyncio</a></li>\n<li><a href=\"https://stackoverflow.com/a/56730924/12777044\" target=\"_blank\" rel=\"nofollow\">Illustrating Python's Event Loop</a></li>\n<li><a href=\"https://www.pythonsheets.com/notes/python-asyncio.html\" target=\"_blank\" rel=\"nofollow\">Examples of Custom Events</a></li>\n<li><a href=\"https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event\" target=\"_blank\" rel=\"nofollow\">Asyncio Event Primitive</a></li>\n</ul>"}},"pageContext":{"slug":"py/asyncio/eventloop","previousSlug":"py/asyncio/callstack","nextSlug":"py/asyncio/concurrency","previousTitle":"Call Stack","nextTitle":"Concurrency Options"}},"staticQueryHashes":[]}