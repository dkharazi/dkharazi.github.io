{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/classes/encapsulation","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Encapsulation and Abstraction"},"html":"<h3>Describing Encapsulation in Python</h3>\n<ul>\n<li>By default, all attributes and methods of a class are public</li>\n<li>Meaning, they are all accessible without any restrictions</li>\n<li>Implying, everything defined in a base class is inherited and accessible within a derived class</li>\n<li>This behavior is often undesirable when we don't want to expose the internal implementation of an object</li>\n<li>Also, this can lead to namespace conflicts between objects defined in a derived class and those defined in a base class </li>\n</ul>\n<h3>Attributes with Double Underscores</h3>\n<ul>\n<li>To fix the namespace issue, all names are mangled to form a new name if they start with a double underscore</li>\n<li>For example, an attribute <code class=\"language-text\">__foo</code> within a class <code class=\"language-text\">A</code> will be referred to as <code class=\"language-text\">_A__foo</code></li>\n<li>This allows classes to have private attributes and methods</li>\n<li>This is because private names used in a derived class won't collide with the same private names used in a base class</li>\n<li>The following is an example of this concept:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>__X <span class=\"token operator\">=</span> <span class=\"token number\">3</span>      <span class=\"token comment\"># Mangled to self._A__X</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__spam</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># Mangled to _A__spam()</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         A<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>__X <span class=\"token operator\">=</span> <span class=\"token number\">37</span>     <span class=\"token comment\"># Mangled to self._B__X</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__spam</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>     <span class=\"token comment\"># Mangled to _B__spam()</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> A<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span>__X\nAttributeError\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a<span class=\"token punctuation\">.</span>__spam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nAttributeError</code></pre></div>\n<h3>The Illusion of Data Hiding</h3>\n<ul>\n<li>The scheme only provides the illusion of data hiding</li>\n<li>There's no strict mechanism in place to actually prevent access to the <em>private</em> attributes of a class</li>\n<li>For example, we can still access the attributes from the above example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> b <span class=\"token operator\">=</span> B<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>_A__X\n<span class=\"token number\">3</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>_B__X\n<span class=\"token number\">37</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>_B__spam<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'hi'</span></code></pre></div>\n<ul>\n<li>It is recommended to use private attributes when defining mutable attributes via properties</li>\n<li>This will encourage users to use the property name instead</li>\n<li>Providing private names to a method can prevent a derived class from changing the implementation of a method</li>\n</ul>\n<h3>Describing Abstraction</h3>\n<ul>\n<li>This notion of data hiding illustrates encapsulation in Python</li>\n<li><strong>Encapsulation</strong> is a technique that tries to achieve abstraction</li>\n<li>Specifically, <strong>abstraction</strong> is the general concept of describing something in simplier terms</li>\n<li>Abstraction typically involves showing only relevant details to the user</li>\n<li>Abstraction allows the user to only focus on the building blocks of a given class, module, function, etc.</li>\n<li>Encapsulation is focused more on information <em>hiding</em>, whereas abstraction is focused more on information <em>showing</em></li>\n<li>\n<p>The following are some examples of encapsulation that achieves abstraction:</p>\n<ul>\n<li>Creating functions</li>\n<li>Creating private attributes</li>\n<li>Creating classes</li>\n<li>etc.</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential Reference</a></li>\n<li><a href=\"https://stackoverflow.com/a/8961062/12777044\" target=\"_blank\" rel=\"nofollow\">Details about Encapsulation and Abstraction</a></li>\n</ul>"}},"pageContext":{"slug":"py/classes/encapsulation","previousSlug":"py/classes/descriptor","nextSlug":"py/classes/representation","previousTitle":"Descriptors","nextTitle":"Object Representation"}},"staticQueryHashes":[]}