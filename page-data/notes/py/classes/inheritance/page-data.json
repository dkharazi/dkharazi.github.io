{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/classes/inheritance","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Inheritance"},"html":"<h3>Describing Inheritance</h3>\n<ul>\n<li>Inheritance refers to creating a new class that modifies the behavior of an existing class</li>\n<li>\n<p>In this case:</p>\n<ul>\n<li>The original class is called a <strong>base class</strong> or superclass</li>\n<li>The new class is called a <strong>derived class</strong> or subclass</li>\n</ul>\n</li>\n<li>The subclass <em>inherits</em> the attributes defined by its base class</li>\n<li>The following is an example of a inheritance:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EvilAccount</span><span class=\"token punctuation\">(</span>Account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">inquiry</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> <span class=\"token string\">'bad inquiry'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> a <span class=\"token operator\">=</span> EvilAccount<span class=\"token punctuation\">(</span><span class=\"token string\">'Todd'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>inquiry<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token string\">'bad inquiry'</span></code></pre></div>\n<ul>\n<li>In this example, instances of <code class=\"language-text\">EvilAccount</code> and <code class=\"language-text\">Account</code> are identical except for the redefined <code class=\"language-text\">instance()</code> method</li>\n</ul>\n<h3>Implementing Inheritance in Python</h3>\n<ul>\n<li>Inheritance is implemented with only a slight change to the dot operator</li>\n<li>\n<p>Specifically, the search for an attribute does the following:</p>\n<ol>\n<li>First, tries to find a match in the instance</li>\n<li>Next, tries to find a match in the instance's class</li>\n<li>Then, tries to move on to the base class</li>\n<li>Then, tries to continue moving up to previous base classes</li>\n</ol>\n</li>\n</ul>\n<h3>The <code class=\"language-text\">super</code> Object in Python</h3>\n<ul>\n<li>The <code class=\"language-text\">super</code> function returns a proxy object that allows us to access methods of a base class</li>\n<li>\n<p>This function has two uses:</p>\n<ul>\n<li>Avoids using the base class name explicitly</li>\n<li>Simplifies working with multiple inheritance</li>\n</ul>\n</li>\n<li>Specifically, an attribute is searched using the normal search rules that would have been used on the base classes</li>\n<li>This frees us from hard-coding the exact location of a method</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential Reference</a></li>\n</ul>"}},"pageContext":{"slug":"py/classes/inheritance","previousSlug":"py/classes/scope","nextSlug":"py/classes/composition","previousTitle":"Scoping Rules","nextTitle":"Composition"}},"staticQueryHashes":[]}