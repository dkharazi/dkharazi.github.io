{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/classes/polymorphism","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Polymorphism"},"html":"<h3>Describing Polymorphism</h3>\n<ul>\n<li><strong>Dynamic binding</strong> is sometimes referred to as <strong>polymorphism</strong> in the context of inheritance</li>\n<li>Dynamic binding is the capability to use an instance without regard for its type</li>\n<li>\n<p>It is handled entirely through the attribute lookup process: </p>\n<ol>\n<li>Search for an attribute within the instance</li>\n<li>Search for an attribute within the class</li>\n<li>Search for an attribute within base classes</li>\n</ol>\n</li>\n<li>\n<p>Static binding has the following attribute lookup process:</p>\n<ol>\n<li>Search for an attribute within the instance</li>\n</ol>\n</li>\n<li>\n<p><strong>Method overloading</strong> is an example of static binding</p>\n<ul>\n<li>This refers to optional parameters in Python</li>\n</ul>\n</li>\n<li><strong>Method overriding</strong> is an example of dynamic binding</li>\n</ul>\n<h3>Inheritance without Duck Typing</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BadAccount</span><span class=\"token punctuation\">(</span>Account<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">inquiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> <span class=\"token string\">'bad account'</span></code></pre></div>\n<h3>Inheritance with Duck Typing</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BadAccount</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token builtin\">id</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">inquiry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> <span class=\"token string\">'bad account'</span></code></pre></div>\n<h3>Details about Duck Typing</h3>\n<ul>\n<li>In a statically typed language, we have to concept of adding</li>\n<li>However, only some types of objects can be added</li>\n<li>You won't be able to add different types of objects together</li>\n<li>In Python, classes are able to define what it means to be added</li>\n<li>For example, <code class=\"language-text\">a+b</code> is syntactic sugar for the <code class=\"language-text\">__add__</code> method</li>\n<li>Duck typing implies Python doesn't care about which class <code class=\"language-text\">a</code> belongs to</li>\n<li>All it cares about is whether the call to the <code class=\"language-text\">__add__</code> method returns anything sensible</li>\n<li>If not, a <code class=\"language-text\">TypeError</code> error will be raised typically</li>\n<li>However, Python at least attempts to interpret <code class=\"language-text\">a + b</code> without checking whether <code class=\"language-text\">a</code> and <code class=\"language-text\">b</code> both belong to the same class</li>\n<li>This is unlike many statically typed languages</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://www.voidspace.org.uk/python/articles/duck_typing.shtml\" target=\"_blank\" rel=\"nofollow\">Details about Duck Typing in Python</a></li>\n<li><a href=\"https://stackoverflow.com/a/12459717/12777044\" target=\"_blank\" rel=\"nofollow\">What is Duck Typing?</a></li>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential Reference</a></li>\n<li><a href=\"https://stackoverflow.com/a/4205396/12777044\" target=\"_blank\" rel=\"nofollow\">Example of Duck Typing</a></li>\n<li><a href=\"https://realpython.com/inheritance-composition-python/\" target=\"_blank\" rel=\"nofollow\">Inheritance and Duck Typing in Python</a></li>\n<li><a href=\"http://www.dieter.handshake.de/pyprojects/zope/book/chap3.html\" target=\"_blank\" rel=\"nofollow\">Differences between Static and Dynamic Binding</a></li>\n<li><a href=\"https://beginnersbook.com/2013/04/java-static-dynamic-binding/\" target=\"_blank\" rel=\"nofollow\">Good Example of Static Binding in Java</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/overriding-in-java/\" target=\"_blank\" rel=\"nofollow\">An Example of Method Overriding in Java</a></li>\n</ul>"}},"pageContext":{"slug":"py/classes/polymorphism","previousSlug":"py/classes/composition","nextSlug":"py/classes/methods","previousTitle":"Composition","nextTitle":"Methods"}},"staticQueryHashes":[]}