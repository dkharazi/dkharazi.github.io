{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/gunicorn/design","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Gunicorn Design"},"html":"<h3>Describing the Server Model</h3>\n<ul>\n<li>Gunicorn is based on the pre-fork worker model</li>\n<li>This means that there is a central master process</li>\n<li>This master process manages a set of worker processes</li>\n<li>The master never knows anything about individual clients</li>\n<li>All requests and responses are handled completely by worker processes</li>\n</ul>\n<h3>Details about Pre-Fork Models</h3>\n<ul>\n<li>Pre-forking refers to a master creating a fork</li>\n<li>This fork handles each request</li>\n<li>A fork refers to a completely separate process</li>\n<li><em>Pre</em> refers to the processes before a request comes in</li>\n<li>This model differs from a threading model</li>\n<li>In a threading model, the master creates light-weight threads to dispatch requests</li>\n<li>However, this master process can have repercussions if a thread causes an error in a threading model</li>\n</ul>\n<h3>Describing the Master Process</h3>\n<ul>\n<li>The master process is a simple loop</li>\n<li>This loop listens for various process signals and reacts accordingly</li>\n<li>It manages the list of running workers by listening for signals</li>\n<li>These include <code class=\"language-text\">TTIN</code>, <code class=\"language-text\">TTOU</code>, and <code class=\"language-text\">CHLD</code></li>\n<li><code class=\"language-text\">TTIN</code> and <code class=\"language-text\">TTOU</code> inform the  master to increase or decrease the number of running workers</li>\n<li><code class=\"language-text\">CHLD</code> indicates that a child process has terminated</li>\n</ul>\n<h3>Describing <code class=\"language-text\">Sync</code> Workers</h3>\n<ul>\n<li>A Gunicorn worker is a process</li>\n<li>The most basic and default worker is synchronous</li>\n<li>Synchronous workers handle a single request at a time</li>\n<li>This approach is the simplest for error handling</li>\n<li>This is because an error will affect a single request at most</li>\n<li><code class=\"language-text\">sync</code> workers do not support persistent connections</li>\n<li>Each connection is closed after response has been sent</li>\n</ul>\n<h3>Describing <code class=\"language-text\">Async</code> Workers</h3>\n<ul>\n<li>\n<p>The asynchronous workers available are based on <code class=\"language-text\">Greenlets</code></p>\n<ul>\n<li>Via <code class=\"language-text\">Eventlet</code> and <code class=\"language-text\">Gevent</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">Greenlets</code> are an implementation of cooperative multi-threading for Python</li>\n<li>Asynchronous workers can handle hundreds of requests without blocking</li>\n<li>This is why they're used to ease DOS attacks</li>\n</ul>\n<h3>Choosing a Worker Type</h3>\n<ul>\n<li>\n<p>The default synchronous workers assume that your application is resource-bound in terms:</p>\n<ul>\n<li>CPU</li>\n<li>Network bandwidth</li>\n</ul>\n</li>\n<li>Meaning, our applications shouldn't do anything that takes an undefined amount of time</li>\n<li>A server request is an example of this</li>\n<li>If traffic becomes heavy, then <code class=\"language-text\">async</code> workers should be used</li>\n<li>This resource bound assumption is why we require a buffering proxy in front of a default configuration Gunicorn</li>\n<li>If <code class=\"language-text\">sync</code> workers are used, a DOS attack becomes trivial</li>\n<li>This is because it creates a load that trickles data to the servers</li>\n<li>\n<p>The following are examples of behavior requiring <code class=\"language-text\">async</code> workers:</p>\n<ul>\n<li>Applications making long blocking calls</li>\n<li>Serving requests directly to the internet</li>\n<li>Streaming requests and responses</li>\n<li>Long polling</li>\n<li>Web sockets</li>\n</ul>\n</li>\n</ul>\n<h3>How Many Workers?</h3>\n<ul>\n<li>The number of workers should <strong>not</strong> equal the number of expected clients</li>\n<li>Gunicorn should only need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mo>−</mo><mn>12</mn></mrow><annotation encoding=\"application/x-tex\">4-12</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span></span> worker processes</li>\n<li>This will handle hundreds or thousands of requests per second</li>\n<li>Too many workers will compromise system resources</li>\n<li>Gunicorn relies on the operating system for load balancing when handling requests</li>\n</ul>\n<h3>Defining the Number of Workers</h3>\n<ul>\n<li>The number of workers should equal:</li>\n</ul>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>numbers of threads</mtext><mo>×</mo><mtext>number of workers</mtext><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\text{numbers of threads} \\times \\text{number of workers} + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord text\"><span class=\"mord\">numbers of threads</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord text\"><span class=\"mord\">number of workers</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>×</mo><mi>n</mi><mi>u</mi><mi>m</mi><mi>c</mi><mi>o</mi><mi>r</mi><mi>e</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">= (2 \\times numcores) + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">s</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span>\n<ul>\n<li>\n<p>The intuition behind this formula is the following:</p>\n<ul>\n<li><code class=\"language-text\">+1:</code> One worker should be reserved for scheduling</li>\n<li><code class=\"language-text\">2n:</code> While one thread is doing I/O and waiting, and another thread is used for CPU</li>\n</ul>\n</li>\n<li>As an illustration, we can set the number of workers to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>gunicorn --workers=2 <span class=\"token string\">'test:create_app()'</span></code></pre></div>\n<ul>\n<li>\n<p>This is a trade-off between the following:</p>\n<ul>\n<li>The overhead of the GIL (threads)</li>\n<li>The memory overhead of starting new processes (workers)</li>\n</ul>\n</li>\n<li>Meaning, we need to adjust the two: threads and workers</li>\n</ul>\n<h3>How Many Threads?</h3>\n<ul>\n<li>Using threads assumes use of the <code class=\"language-text\">gthread</code> worker</li>\n<li>Using threads instead of processes can reduce the memory footprint of Gunicorn</li>\n<li>Threads in Gunicorn are always real</li>\n<li>The GIL locks the interpreter while interpreting a CPython thread</li>\n<li>Consequently, CPython threads can't work simultaneously</li>\n<li>Therefore, the CPython threads executed in Gunicorn will suffer from this same problem</li>\n<li>However, this doesn't mean threading in general is useless</li>\n<li>Specifically, multiple threads can be used without locking</li>\n<li>In particular, multiple threads can be processed concurrently</li>\n<li>\n<p>This is true for threads that don't require interpretation:</p>\n<ul>\n<li>Threads that are I/O bound</li>\n<li>Threads that use C extensions for interpretation</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://docs.gunicorn.org/en/stable/design.html\" target=\"_blank\" rel=\"nofollow\">Gunicorn Documentation</a></li>\n<li><a href=\"https://github.com/benoitc/gunicorn/issues/1045#issuecomment-269575459\" target=\"_blank\" rel=\"nofollow\">Configuring the Number of Workers</a></li>\n<li><a href=\"https://stackoverflow.com/a/25894770/12777044\" target=\"_blank\" rel=\"nofollow\">Defining a Pre-Fork Web Server Model</a></li>\n<li><a href=\"https://stackoverflow.com/a/48572328/12777044\" target=\"_blank\" rel=\"nofollow\">Details about Gunicorn Threads</a></li>\n<li><a href=\"https://stackoverflow.com/a/41696500/12777044\" target=\"_blank\" rel=\"nofollow\">Details about Gunicorn Workers and Threads</a></li>\n<li><a href=\"https://stackoverflow.com/a/38876915/12777044\" target=\"_blank\" rel=\"nofollow\">Threading in Flask's Development-Only WSGI Server</a></li>\n<li><a href=\"https://medium.com/building-the-system/gunicorn-3-means-of-concurrency-efbb547674b7\" target=\"_blank\" rel=\"nofollow\">Optimizing Gunicorn Configurations</a></li>\n</ul>"}},"pageContext":{"slug":"py/gunicorn/design","previousSlug":"py/gunicorn/signal","nextSlug":null,"previousTitle":"Signal Handling","nextTitle":null}},"staticQueryHashes":[]}