{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/gunicorn/run","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Basic Usage"},"html":"<h3>Motivating Gunicorn</h3>\n<ul>\n<li>We can run Gunicorn to integrate with popular frameworks</li>\n<li>\n<p>These frameworks include:</p>\n<ul>\n<li>Django</li>\n<li>Flask</li>\n<li>Pyramid</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>Gunicorn is accessible via command line scripts</li>\n</ul>\n<h3>Describing its Basic Usage</h3>\n<ul>\n<li>Gunicorn commands follow this format:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>gunicorn <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> APP_MODULE</code></pre></div>\n<ul>\n<li>Here, <code class=\"language-text\">APP_MODULE</code> is formatted as <code class=\"language-text\">$(MODULE_NAME):$(VARIABLE_NAME)</code></li>\n<li>Then, the <code class=\"language-text\">MODULE_NAME</code> refers to a full dotted path</li>\n<li>And, the <code class=\"language-text\">VARIABLE_NAME</code> refers to a WSGI callable</li>\n<li>This callable should be found in the specified module</li>\n</ul>\n<h3>Example of Basic Gunicorn Setup</h3>\n<ul>\n<li>Suppose we have the following Python function:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test.py</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">app</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     data <span class=\"token operator\">=</span> <span class=\"token string\">b'Hello World!'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     status <span class=\"token operator\">=</span> <span class=\"token string\">'200 OK'</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     response_headers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'text/plain'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token punctuation\">(</span><span class=\"token string\">'Content-Length'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     start_response<span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">,</span> response_headers<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>We can run the app with the following command</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>gunicorn --workers=2 test:app</code></pre></div>\n<h3>Example of Application Factory</h3>\n<ul>\n<li>The variable name can also be a function call</li>\n<li>In this case, the name will be imported from the module</li>\n<li>Then, the name will be called to get the application object</li>\n<li>This is commonly referred to as the <em>application factory</em> pattern</li>\n<li>The following is an example of this:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">create_app</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     app <span class=\"token operator\">=</span> FrameworkApp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> app</code></pre></div>\n<ul>\n<li>We can run the WSGI callable with the following command</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>gunicorn --workers=2 <span class=\"token string\">'test:create_app()'</span></code></pre></div>\n<h3>Listing Common Arguments</h3>\n<ul>\n<li>Positional and keyword argument can be passed</li>\n<li>However, this is not recommended</li>\n<li>Instead, these configurations should be loaded from environment variables</li>\n<li>\n<p>The following are commonly used arguments:</p>\n<ul>\n<li>\n<p><code class=\"language-text\">-c CONFIG</code> or <code class=\"language-text\">--config=CONFIG</code></p>\n<ul>\n<li>Specifies a config file in the form of <code class=\"language-text\">$(PATH)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">-b BIND</code> or <code class=\"language-text\">--bind=BIND</code></p>\n<ul>\n<li>Specifies a server socket to bind</li>\n<li>Server sockets are in the form of <code class=\"language-text\">$(HOST)</code></li>\n<li>An IP is a valid <code class=\"language-text\">($HOST)</code></li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">-w WORKERS</code> or <code class=\"language-text\">--workers=WORKERS</code></p>\n<ul>\n<li>Specifies the number of worker processes</li>\n<li>This number should be between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">2-4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> workers per core</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">-k WORKERCLASS</code> or <code class=\"language-text\">--worker-class=WORKERCLASS</code></p>\n<ul>\n<li>Specifies the type of worker process to run</li>\n<li>It is in the form of <code class=\"language-text\">($NAME)</code></li>\n<li><code class=\"language-text\">NAME</code> defaults to <code class=\"language-text\">sync</code></li>\n<li>Other options include <code class=\"language-text\">eventlet</code>, <code class=\"language-text\">gevent</code>, etc.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">-n APP_NAME</code> or <code class=\"language-text\">--name=APP_NAME</code></p>\n<ul>\n<li>Specifies the name of the Gunicorn process</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Describing Integration with Django</h3>\n<ul>\n<li>Gunicorn provides integration with Django</li>\n<li>Gunicorn looks for a WSGI callable named <code class=\"language-text\">application</code> if unspecified</li>\n<li>For a typical Django project, invoking Gunicorn looks like:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>gunicorn myproject.wsgi</code></pre></div>\n<ul>\n<li>The <code class=\"language-text\">-env</code> option is used to load options</li>\n<li>An example of this is the following:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>gunicorn --env <span class=\"token assign-left variable\">DJANGO_SETTINGS_MODULE</span>=p.settings p.wsgi</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://docs.gunicorn.org/en/stable/run.html#\" target=\"_blank\" rel=\"nofollow\">Gunicorn Documentation</a></li>\n</ul>"}},"pageContext":{"slug":"py/gunicorn/run","previousSlug":"py/gunicorn/wsgi","nextSlug":"py/gunicorn/config","previousTitle":"Web Server Gateway Interface","nextTitle":"Configuration"}},"staticQueryHashes":[]}