{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/gunicorn/wsgi","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Web Server Gateway Interface"},"html":"<h3>Describing a WSGI Server</h3>\n<ul>\n<li>A web server gateway interface (WSGI) is a server specification programmed in Python</li>\n<li>Specifically, a WSGI server is used to forward requests from a web server to a web application in Python</li>\n<li>The web server can be an Apache or Nginx web server</li>\n<li>The backend web application can be Flask, Django, etc.</li>\n<li>By doing this, we can free up the web server from serving dynamic content using heavyweight Python threads</li>\n<li>In other words, a WSGI server is used for serving clients with files containing dynamic business logic</li>\n<li>A WSGI framework is used for creating web applications</li>\n</ul>\n<h3>Describing the Functions of a WSGI Server</h3>\n<ul>\n<li>Gunicorn is a popular WSGI server</li>\n<li>\n<p>Gunicorn provides the following functions:</p>\n<ul>\n<li>Control the number of worker threads for handling requests</li>\n<li>Control the maximum number of simultaneous clients</li>\n<li>Control the maximum number of pending connections</li>\n<li>Limit the allowed size of an HTTP request header field</li>\n<li>Control the maximum number of requests a worker will process before restarting</li>\n</ul>\n</li>\n<li>The above functions are only a few of the many capabilities of Gunicorn</li>\n</ul>\n<h3>Responsibilities between a Web and WSGI Server</h3>\n<ul>\n<li>\n<p>Three common building blocks when deploying a Python web application to production are the following:</p>\n<ul>\n<li>A web server (like nginx)</li>\n<li>A WSGI application server (like Gunicorn)</li>\n<li>Our actual application (written using Django or Flask)</li>\n</ul>\n</li>\n<li>\n<p>The web server does the following:</p>\n<ul>\n<li>Accepts requests</li>\n<li>Handles general domain logic</li>\n<li>Handles HTTP connections</li>\n</ul>\n</li>\n<li>\n<p>A WSGI server does the following:</p>\n<ul>\n<li>Only handles requests meant for an application</li>\n</ul>\n</li>\n<li>The application server only cares about requests meant for the application it is associated with</li>\n<li>\n<p>By doing this, we can achieve the following:</p>\n<ul>\n<li>Communicate with a single web server</li>\n<li>Remove some of the web server's load</li>\n<li>Only run one process for a web application</li>\n</ul>\n</li>\n<li>In other words, Gunicorn takes care of everything happening between the web server and an application</li>\n</ul>\n<h3>A WSGI Server as an Application Server</h3>\n<ul>\n<li>Specifically, a WSGI server acts as an application server</li>\n<li>An application server serves clients with files with business logic</li>\n<li>Typically, this content containing business logic is dynamic</li>\n<li>Specifically, the application server is responsible for running code that transforms data to provide a specialized functionality</li>\n<li>Communication between the application server and its client doesnâ€™t need to take the form of HTTP messages</li>\n</ul>\n<h3>Describing WSGI Frameworks</h3>\n<ul>\n<li>As stated previously, a WSGI framework is used for creating web applications</li>\n<li>The most popular WSGI frameworks are flask and django</li>\n<li>\n<p>However, most frameworks support the following functions:</p>\n<ul>\n<li>URL routing</li>\n<li>Receiving requests</li>\n<li>Sending responses</li>\n<li>Using template engines</li>\n</ul>\n</li>\n<li>Requests are typically in the form of request objects</li>\n<li>Responses take the form of response objects</li>\n<li>These objects contain the information received from and sent to a user's browser</li>\n<li>URL routing involves matching an incoming HTTP request to a particular piece of Python code to be invoked</li>\n<li>Template engines represent dynamic behavior associated with HTML output</li>\n<li>These template engines are obviously represented using Python code</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://vsupalov.com/what-is-gunicorn/\" target=\"_blank\" rel=\"nofollow\">Describing a Gunicorn Pipeline with Nginx</a></li>\n<li><a href=\"https://stackoverflow.com/a/7740171/12777044\" target=\"_blank\" rel=\"nofollow\">Why use a WSGI Server?</a></li>\n<li><a href=\"http://ivory.idyll.org/articles/wsgi-intro/what-is-wsgi.html\" target=\"_blank\" rel=\"nofollow\">Basics of a WSGI Server</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-14-04\" target=\"_blank\" rel=\"nofollow\">Setting Up a WSGI and Web Server</a></li>\n<li><a href=\"https://stackoverflow.com/a/44166631/12777044\" target=\"_blank\" rel=\"nofollow\">Functions of a WSGI Server</a></li>\n<li><a href=\"https://www.python.org/dev/peps/pep-0333/\" target=\"_blank\" rel=\"nofollow\">PEP 333: WSGI as a Python Standard</a></li>\n<li><a href=\"https://stackoverflow.com/a/8691337/12777044\" target=\"_blank\" rel=\"nofollow\">Differentiating between WSGI Framework and WSGI Server</a></li>\n<li><a href=\"https://rufuspollock.com/2006/09/28/wsgi-middleware/\" target=\"_blank\" rel=\"nofollow\">Another Basic Description of WSGI</a></li>\n<li><a href=\"https://stackoverflow.com/a/13929101/12777044\" target=\"_blank\" rel=\"nofollow\">Describing Configurations in Gunicorn</a></li>\n<li><a href=\"https://docs.python-guide.org/scenarios/web/\" target=\"_blank\" rel=\"nofollow\">Functions of a WSGI Framework</a></li>\n</ul>"}},"pageContext":{"slug":"py/gunicorn/wsgi","previousSlug":null,"nextSlug":"py/gunicorn/run","previousTitle":null,"nextTitle":"Basic Usage"}},"staticQueryHashes":[]}