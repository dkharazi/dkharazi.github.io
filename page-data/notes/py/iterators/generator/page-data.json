{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/iterators/generator","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Generators"},"html":"<h3>Using Generators for Lazy Evalutation</h3>\n<ul>\n<li>A generator is an iterator</li>\n<li>A generator is a function that produces a sequence of results instead of a single value</li>\n<li>\n<p>Generators are defined by the following properties:</p>\n<ul>\n<li>They use lazy evaluation</li>\n<li>They can suspend and resume function execution</li>\n</ul>\n</li>\n<li>\n<p>In other words, a generator can do the following:</p>\n<ul>\n<li>Evaluates each element one-by-one</li>\n<li>Pauses execution of a function</li>\n</ul>\n</li>\n<li>Generators are implemented using the <code class=\"language-text\">yield</code> keyword</li>\n<li>The following is an example of a generator:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> <span class=\"token number\">2</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> gen <span class=\"token operator\">=</span> test<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span>\n<span class=\"token number\">2</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>gen<span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&lt;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\nStopIteration</code></pre></div>\n<h3>Describing the Benefits of Generators</h3>\n<ul>\n<li>\n<p>Generators can be very memory-efficient</p>\n<ul>\n<li>They typically represent a sequence of data</li>\n<li>However, they only store individual elements in memory</li>\n</ul>\n</li>\n<li>\n<p>Since generators use lazy evaluation, their benefits are:</p>\n<ul>\n<li>Calculating large sets of results efficiently</li>\n<li>Replacing callback with iterations</li>\n</ul>\n</li>\n<li>\n<p>When should we use generators?</p>\n<ul>\n<li>When we can't store large data in memory</li>\n<li>When we want to pause execution of a function</li>\n</ul>\n</li>\n</ul>\n<h3>Motivating the <code class=\"language-text\">yield</code> Keyword</h3>\n<ul>\n<li>Certain dictionary definitions apply to the use of <code class=\"language-text\">yield</code></li>\n<li>\n<p><strong>Yield:</strong> To produce or provide (in agriculture)</p>\n<ul>\n<li>In Python, it provides the next data in the series</li>\n</ul>\n</li>\n<li>\n<p><strong>Yield:</strong> To give way or relinquish (in politics)</p>\n<ul>\n<li>It reliquishes CPU execution until the iterator advances</li>\n</ul>\n</li>\n</ul>\n<h3>Improving Readibility using Generators</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">square_list</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     l <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>              <span class=\"token comment\"># Replace</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         y <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         l<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span>     <span class=\"token comment\"># these</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">return</span> l            <span class=\"token comment\"># lines...</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">square_gen</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         y <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">yield</span> y         <span class=\"token comment\"># ...with this one</span></code></pre></div>\n<h3>Decreasing Memory Usage using Generators</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">,</span> g <span class=\"token operator\">=</span> square_list<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> square_gen<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># all 4 ints loaded into memory</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># nothing loaded into memory yet</span>\n<span class=\"token operator\">&lt;</span>generator <span class=\"token builtin\">object</span> square_gen<span class=\"token operator\">></span></code></pre></div>\n<h3>Demonstrating Similar Behavior</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># all 4 ints loaded into memory</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">9</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> g<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># only 1 int ever loaded in memory</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token number\">0</span>\n<span class=\"token number\">1</span>\n<span class=\"token number\">4</span>\n<span class=\"token number\">9</span></code></pre></div>\n<h3>Summarizing Benefits of Generators</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">yield</code> is <strong>single-pass</strong></p>\n<ul>\n<li>Only able to iterate through a generator once</li>\n<li>Allows a sequence to be arbitrarily long</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">yield</code> is <strong>lazy</strong></p>\n<ul>\n<li>Able to compute elements individually</li>\n<li>A generator function refers to a function with <code class=\"language-text\">yield</code></li>\n<li>They return an iterator and remember where they left off</li>\n<li>Allows a function to be paused and resumed</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">yield</code> is <strong>versatile</strong></p>\n<ul>\n<li>Generators don't store data altogether</li>\n<li>Ensures entier data set isn't stored in memory all at once</li>\n</ul>\n</li>\n</ul>\n<h3>Using Generators versus Iterators</h3>\n<ul>\n<li>As stated previously, a generator is an iterator</li>\n<li>A generator simplifies the process of creating a basic iterator</li>\n<li>A generator is created by calling a function with <code class=\"language-text\">yield</code></li>\n<li>An iterator is created by instantiating a class with <code class=\"language-text\">__iter__</code></li>\n<li>However, there are times when we want to create a custom iterator, rather than a generator</li>\n<li>Specifically, we may want an iterator class to expose other methods besides <code class=\"language-text\">__next__</code></li>\n<li>Illustratively, this generator and iterator are equivalent:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Generator</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">squares</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">yield</span> i <span class=\"token operator\">*</span> i\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> generator <span class=\"token operator\">=</span> squares<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Iterator</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Squares</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>stop <span class=\"token operator\">=</span> stop\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> self\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>start <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>             <span class=\"token keyword\">raise</span> StopIteration\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         current <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>start <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>start\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         self<span class=\"token punctuation\">.</span>start <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">return</span> current\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> iterator <span class=\"token operator\">=</span> Squares<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/102632/12777044\" target=\"_blank\" rel=\"nofollow\">Benefits of using Generators</a></li>\n<li><a href=\"https://stackoverflow.com/a/36220775/12777044\" target=\"_blank\" rel=\"nofollow\">More Benefits of using Generators</a></li>\n<li><a href=\"https://stackoverflow.com/a/20535379/12777044\" target=\"_blank\" rel=\"nofollow\">Defining Lazy Evaluation</a></li>\n<li><a href=\"https://stackoverflow.com/a/23530101/12777044\" target=\"_blank\" rel=\"nofollow\">Real World Use-Case of Generators</a></li>\n<li><a href=\"https://d.cxcore.net/Python/Python_Cookbook_3rd_Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Cookbook</a></li>\n<li><a href=\"https://stackoverflow.com/a/36220775/12777044\" target=\"_blank\" rel=\"nofollow\">Use-Cases for Yielding</a></li>\n<li><a href=\"https://stackoverflow.com/a/231788/12777044\" target=\"_blank\" rel=\"nofollow\">Brief Description of the Yield Keyword</a></li>\n<li><a href=\"https://stackoverflow.com/a/28353158/12777044\" target=\"_blank\" rel=\"nofollow\">Relationship between Generators and Iterators</a></li>\n<li><a href=\"https://stackoverflow.com/a/2776865/12777044\" target=\"_blank\" rel=\"nofollow\">Differences between Iterators and Generators</a></li>\n<li><a href=\"https://www.dabeaz.com/coroutines/Coroutines.pdf\" target=\"_blank\" rel=\"nofollow\">Lectures Slides about Generators and Coroutines</a></li>\n</ul>"}},"pageContext":{"slug":"py/iterators/generator","previousSlug":"py/iterators/iterable","nextSlug":"py/iterators/count","previousTitle":"Iterables and Iterators","nextTitle":"itertools.count"}},"staticQueryHashes":[]}