{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/iterators/iterable","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Iterables and Iterators"},"html":"<h3>Describing Iterables and Iterators</h3>\n<ul>\n<li>An iterable is an object with an <code class=\"language-text\">__iter__</code> method</li>\n<li>An iterator is an object with an <code class=\"language-text\">__next__</code> method</li>\n<li>\n<p>The following are examples of iterables:</p>\n<ul>\n<li>Lists</li>\n<li>Tuples</li>\n<li>Dictionaries</li>\n<li>Sets</li>\n<li>Strings</li>\n</ul>\n</li>\n<li>All of these iterables have an <code class=\"language-text\">__iter__</code> method</li>\n<li>Calling <code class=\"language-text\">__iter__</code> on an iterable will give us an iterator</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> fruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'apple'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'banana'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'orange'</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> fruit_iter <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># iterable</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'list'</span><span class=\"token operator\">></span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>fruit_iter<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># iterator</span>\n<span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token string\">'list_iterator'</span><span class=\"token operator\">></span></code></pre></div>\n<h3>Describing Looping over Iterables</h3>\n<ul>\n<li>Recall some examples of iterables: strings, sets, etc.</li>\n<li>Notice, we can loop over each of these iterables</li>\n<li>Specifically, we can use a <code class=\"language-text\">for</code> loop to iterate through an iterable</li>\n<li>\n<p>This is because the <code class=\"language-text\">for</code> loop implicitly does the following:</p>\n<ul>\n<li>Creates an iterator object</li>\n<li>Then executes the <code class=\"language-text\">__next__</code> method for each iteration</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Explicit instructions</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> iterable<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>do something <span class=\"token keyword\">with</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Implicitly does this</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> iterator <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         i <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>do something <span class=\"token keyword\">with</span> i<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">break</span></code></pre></div>\n<ul>\n<li>The following is an example of this concept:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> fruit <span class=\"token operator\">=</span> <span class=\"token string\">'lime'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Explicit instructions</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> fruit<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\nl\ni\nm\ne\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token comment\"># Implicitly does this</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> itr <span class=\"token operator\">=</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span>fruit<span class=\"token punctuation\">)</span> \n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         i <span class=\"token operator\">=</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>itr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         <span class=\"token keyword\">break</span>\nl\ni\nm\ne</code></pre></div>\n<h3>Describing Looping over Iterators</h3>\n<ul>\n<li>We can loop over iterators as well</li>\n<li>\n<p>To summarize, we can loop over the following:</p>\n<ul>\n<li>An iterable</li>\n<li>An iterator</li>\n</ul>\n</li>\n<li>As stated previously, looping over an iterable involves converting an iterable to an iterator</li>\n<li>We essentially skip over this step by looping over an iterator</li>\n<li>\n<p>Compared to looping over iterables, looping over an iterator provides the following benefits:</p>\n<ul>\n<li>Skips the step of converting any iterable to an iterator</li>\n<li>\n<p>Decreased memory usage</p>\n<ul>\n<li>We don't need to load an entire iterable into memory</li>\n<li>An iterator only stores a definition that is required for iterating element-by-element over some iterable</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Defining the Steps of Iteration</h3>\n<ul>\n<li>Let's say we have an iterable called <strong>mylist</strong></li>\n<li>This iterable is a list</li>\n<li>Suppose we want to loop over our list like:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> mylist<span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>loop body<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<ul>\n<li>\n<p>Then, Python performs the following steps during for loops:</p>\n<ol>\n<li>Gets an iterable <code class=\"language-text\">mylist</code></li>\n<li>\n<p>Call <code class=\"language-text\">iter(mylist)</code> </p>\n<ul>\n<li>This returns an iterator object</li>\n<li>An iterator object should have the <code class=\"language-text\">__next__()</code> method</li>\n</ul>\n</li>\n<li>\n<p>Use the iterator to loop over items</p>\n<ul>\n<li>This involves calling the <code class=\"language-text\">__next__()</code> method</li>\n<li>This output is assigned to <code class=\"language-text\">x</code></li>\n<li>Then, the loop body is executed</li>\n<li>The loop is exited for any <code class=\"language-text\">StopIteration</code></li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Python always performs the above steps for any looping</li>\n<li>Meaning, Python performs these steps for while and for loops</li>\n</ul>\n<h3>Defining Lazy Evaluation using Iterators</h3>\n<ul>\n<li>\n<p>Lazy evaluation refers to an object that:</p>\n<ul>\n<li>Evaluates each element individually</li>\n<li>Doesn't evaluate all elements at once</li>\n</ul>\n</li>\n<li>Python manifests lazy evaluation by implementing iterators</li>\n<li>\n<p>For example, the list <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[1,2,3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span> is an iterable</p>\n<ul>\n<li>The list stores each integer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo separator=\"true\">,</mo><mn>2</mn><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">1,2,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> in memory</li>\n<li><code class=\"language-text\">iter([1,2,3])</code> will create an iterator that is lazy</li>\n<li>Meaning, it computes each integer in memory individually</li>\n</ul>\n</li>\n<li>\n<p>Lazy evaluation is useful when:</p>\n<ul>\n<li>Computing on a very large dataset</li>\n<li>Looping over large data to compute each element</li>\n</ul>\n</li>\n<li>Specifically, it allows us to start using the data immediately, without reading the whole dataset into memory</li>\n<li>As stated previously, iterators use lazy evaluation</li>\n<li>\n<p>On the other hand, iterables don't use lazy evaluation</p>\n<ul>\n<li>This is because iterables store all of their data in memory</li>\n</ul>\n</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://www.w3schools.com/python/python_iterators.asp\" target=\"_blank\" rel=\"nofollow\">Basics of Iterators and Iterables</a></li>\n<li><a href=\"https://d.cxcore.net/Python/Python_Cookbook_3rd_Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Cookbook</a></li>\n<li><a href=\"https://stackoverflow.com/questions/9884132/what-exactly-are-iterator-iterable-and-iteration\" target=\"_blank\" rel=\"nofollow\">Brief Description about Iteration</a></li>\n</ul>"}},"pageContext":{"slug":"py/iterators/iterable","previousSlug":null,"nextSlug":"py/iterators/generator","previousTitle":null,"nextTitle":"Generators"}},"staticQueryHashes":[]}