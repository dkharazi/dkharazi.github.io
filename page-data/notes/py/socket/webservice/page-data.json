{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/socket/webservice","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Web Apps and Services"},"html":"<h3>Motivating Network Communication</h3>\n<ul>\n<li>Servers communicate with each other by sending packets</li>\n<li>These packets follow a network-layer protocol</li>\n<li>\n<p>A few network-layer protocols include:</p>\n<ul>\n<li>IP</li>\n<li>TCP</li>\n</ul>\n</li>\n<li>There are data chunks within those packets</li>\n<li>These data chunks follow an application-layer protocol</li>\n<li>\n<p>A few application-layer protocols include:</p>\n<ul>\n<li>SOAP</li>\n<li>HTTP</li>\n<li>HTTPS</li>\n<li>FTP</li>\n<li>SMTP</li>\n</ul>\n</li>\n</ul>\n<h3>Defining a Web and REST API</h3>\n<ul>\n<li>An API is a set of methods</li>\n<li>It is used for communicating with other software components</li>\n<li>An API with methods following an application-layer protocol is referred to as a <em>web API</em></li>\n<li>\n<p>A web API that satisfies the following is considered a <em>REST API</em>:</p>\n<ul>\n<li>Resources are unambiguously requested via URIs</li>\n<li>HATEOUS</li>\n</ul>\n</li>\n<li><strong>H</strong>ypermedia <strong>a</strong>s <strong>t</strong>he <strong>e</strong>ngine <strong>o</strong>f <strong>a</strong>pplication <strong>s</strong>tate is abbreviated as <em>HATEOUS</em></li>\n<li>HATEOUS is satisfied if transitions and actions are clearly exposed to the client by the server via hyperlinks and hypertext</li>\n</ul>\n<h3>Defining a Web Service</h3>\n<ul>\n<li>Generally, a web service doesn't need a user interface</li>\n<li>A web service operates over HTTP</li>\n<li>A web service refers to software</li>\n<li>This software is in the form of an API</li>\n<li>This API can be designed as a REST or SOAP API</li>\n<li>A web service serves data in any format</li>\n<li>This includes data formatted as XML, JSON, etc.</li>\n<li>\n<p>The following frameworks can be used to build web APIs:</p>\n<ul>\n<li>Node.js</li>\n<li>Flask</li>\n<li>Spring Boot</li>\n</ul>\n</li>\n<li>In other words, these frameworks can be used to build webservices</li>\n</ul>\n<h3>Defining a Web Application</h3>\n<ul>\n<li>Generally, a web application involves a user interface</li>\n<li>A web application operates over HTTP</li>\n<li>A web application refers to software</li>\n<li>\n<p>This software is in the form of the following:</p>\n<ul>\n<li>HTML</li>\n<li>CSS</li>\n<li>JavaScript</li>\n</ul>\n</li>\n<li>\n<p>In other words, the following properties are listed below:</p>\n<ul>\n<li><code class=\"language-text\">Web Service:</code> Runs on the <em>server</em></li>\n<li><code class=\"language-text\">Web Application:</code> Runs as the <em>client</em></li>\n</ul>\n</li>\n</ul>\n<h3>Separating the Front-End and Back-End</h3>\n<ul>\n<li>Typically, the frontend and backend refer to different networks</li>\n<li>\n<p>The frontend does the following:</p>\n<ul>\n<li>Sends HTTP-formatted requests to the backend</li>\n<li>Interprets HTTP-formatted responses</li>\n<li>Extracts the JSON-formatted data if successful</li>\n</ul>\n</li>\n<li>\n<p>The backend does the following:</p>\n<ul>\n<li>Interprets HTTP-formatted requests</li>\n<li>\n<p>Sends HTTP-formatted responses to the frontend</p>\n<ul>\n<li>These contain a response code and JSON-formatted data</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Defining a Microservice</h3>\n<ul>\n<li>A microservice is a software architecture</li>\n<li>It is based on using web services</li>\n<li>This architecture simplifies big applications by splitting them into smaller applications</li>\n<li>Each smaller application serves an individual purpose</li>\n<li>These smaller applications are web services</li>\n<li>This architecture allows a web service to use other web services easily</li>\n<li>\n<p>By doing this, we can:</p>\n<ul>\n<li>Build new web services linked to old web services</li>\n<li>Remove rdundancies from building many large applications</li>\n</ul>\n</li>\n<li>The word <em>micro</em> in <em>microservices</em> emphasises the idea of how they're based on making web services as small as possible</li>\n</ul>\n<h3>Examples of Web Services</h3>\n<ul>\n<li>The Yahoo Weather API</li>\n<li>The Google Maps API</li>\n<li>The Facebook Marketing API</li>\n<li>Spotify API</li>\n</ul>\n<h3>Describing Stateless Applications</h3>\n<ul>\n<li>Statelessness is a property of a web service</li>\n<li>A stateless application doesn't store any information from a client request</li>\n<li>Meaning, <code class=\"language-text\">Sessions</code> and <code class=\"language-text\">Cookies</code> should be avoided</li>\n<li>Typically, web services should try to be stateless</li>\n<li>However, certain webservices are inherently stateful</li>\n<li>For example, a shopping cart is a stateful feature by design</li>\n<li>Therefore, a web application implementing a shopping cart should be stateful</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/2849464/12777044\" target=\"_blank\" rel=\"nofollow\">Defining a Web Service</a></li>\n<li><a href=\"https://stackoverflow.com/a/2205802/12777044\" target=\"_blank\" rel=\"nofollow\">Describing Web Servers and Web Services</a></li>\n<li><a href=\"https://stackoverflow.com/a/8196949/12777044\" target=\"_blank\" rel=\"nofollow\">Categorizing Web Servers and Services</a></li>\n<li><a href=\"https://stackoverflow.com/a/12955284/12777044\" target=\"_blank\" rel=\"nofollow\">Differentiating Web Services and Apps</a></li>\n<li><a href=\"https://stackoverflow.com/a/9111708/12777044\" target=\"_blank\" rel=\"nofollow\">Defining Web Services and Applications</a></li>\n<li><a href=\"https://stackoverflow.com/a/9113891/12777044\" target=\"_blank\" rel=\"nofollow\">Generalizing Web Applications</a></li>\n<li><a href=\"https://stackoverflow.com/a/45453646/12777044\" target=\"_blank\" rel=\"nofollow\">Differentiating a Web Service and Microservice</a></li>\n<li><a href=\"https://stackoverflow.com/a/1353702/12777044\" target=\"_blank\" rel=\"nofollow\">What is a Web Service?</a></li>\n<li><a href=\"https://stackoverflow.com/a/46576330/12777044\" target=\"_blank\" rel=\"nofollow\">Detailed Description of Microservices</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y8OnoxKotPQ\" target=\"_blank\" rel=\"nofollow\">Entertaining Parody of Microservices</a></li>\n<li><a href=\"https://medium.com/unexpected-token/how-your-api-could-benefit-from-hypermedia-b62780771ccb\" target=\"_blank\" rel=\"nofollow\">Blog Post about HATEOUS</a></li>\n<li><a href=\"https://restfulapi.net/hateoas/\" target=\"_blank\" rel=\"nofollow\">Definition of HATEOUS</a></li>\n<li><a href=\"https://stackoverflow.com/a/19884975/12777044\" target=\"_blank\" rel=\"nofollow\">Comparing a SOAP and REST API</a></li>\n<li><a href=\"https://stackoverflow.com/a/19844272/12777044\" target=\"_blank\" rel=\"nofollow\">Comparing a Web and REST API</a></li>\n</ul>"}},"pageContext":{"slug":"py/socket/webservice","previousSlug":null,"nextSlug":"py/socket/webserver","previousTitle":null,"nextTitle":"Web Servers"}},"staticQueryHashes":[]}