{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/event","result":{"data":{"markdownRemark":{"frontmatter":{"title":"threading.Event"},"html":"<h3>Describing <code class=\"language-text\">Event()</code></h3>\n<ul>\n<li>An event is used to communicate between threads</li>\n<li>One thread signals an <em>event</em></li>\n<li>Other threads wait for this event</li>\n<li>An <code class=\"language-text\">Event</code> instance manages an internal flag</li>\n<li>This internal flag represents a condition we define</li>\n<li>The flag can be set to <code class=\"language-text\">True</code> using the <code class=\"language-text\">set</code> method</li>\n<li>It can be reset to <code class=\"language-text\">False</code> using the <code class=\"language-text\">clear</code> method</li>\n<li>The <code class=\"language-text\">wait</code> method blocks until the flag is <code class=\"language-text\">True</code></li>\n<li>The <code class=\"language-text\">Event</code> constructor creates an <code class=\"language-text\">Event</code> instance <code class=\"language-text\">e</code></li>\n<li>The internal flag is set to false by default</li>\n<li>\n<p>An <code class=\"language-text\">Event</code> instance <code class=\"language-text\">e</code> supports the following methods:</p>\n<ul>\n<li><code class=\"language-text\">is_set</code></li>\n<li><code class=\"language-text\">set</code></li>\n<li><code class=\"language-text\">clear</code></li>\n<li><code class=\"language-text\">wait</code></li>\n</ul>\n</li>\n</ul>\n<h3>Describing Methods of <code class=\"language-text\">Event</code> Instances</h3>\n<ul>\n<li><code class=\"language-text\">clear:</code> Resets the internal flag to <code class=\"language-text\">False</code></li>\n<li><code class=\"language-text\">is_set:</code> Returns true only if the internal flag is <code class=\"language-text\">True</code></li>\n<li>\n<p><code class=\"language-text\">set:</code> Sets the internal flag to <code class=\"language-text\">True</code></p>\n<ul>\n<li>All threads waiting for it to become true are awakened</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">wait(timeout):</code> Blocks until the internal flag is <code class=\"language-text\">True</code></p>\n<ul>\n<li>If the internal flag is <code class=\"language-text\">True</code>, this method returns instantly</li>\n<li>\n<p>Otherwise, it blocks until:</p>\n<ul>\n<li>Another thread calls <code class=\"language-text\">set</code></li>\n<li>Or the optional <code class=\"language-text\">timeout</code> expires</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>Using Conditions over Events</h3>\n<ul>\n<li>Typically, we'll be faced with a consumer/producer problem</li>\n<li>\n<p>In this scenario, we'll want to create:</p>\n<ul>\n<li>A thread as the consumer</li>\n<li>A thread as the producer</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Event</code> objects can be used to signal other threads</li>\n<li>However, they should not be used to implement consumer/producer notification systems</li>\n<li>It does not work reliably because the producer might produce a new item in between the <code class=\"language-text\">wait</code> and <code class=\"language-text\">clear</code> operations</li>\n<li>For these types of problems, we should prefer using <code class=\"language-text\">Condition</code> instead</li>\n<li>This is because <code class=\"language-text\">Condition</code> is an abstracted <code class=\"language-text\">Event</code> + <code class=\"language-text\">Lock</code></li>\n</ul>\n<h3>Example of <code class=\"language-text\">Event</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Event\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> time\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> start_signal <span class=\"token operator\">=</span> Event<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">turtle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'go turtle'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'signal rabbit'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     start_signal<span class=\"token punctuation\">.</span><span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'slug done'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">rabbit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rabbit waits 5 seconds'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     start_signal<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'go rabbit'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rabbit done'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     start_signal<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>turtle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     r <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>rabbit<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     r<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> race<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nrabbit waits <span class=\"token number\">5</span> seconds\ngo turtle\nsignal rabbit\ngo rabbit\nrabbit done\nturtle done</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential References</a></li>\n<li><a href=\"https://docs.python.org/3/library/threading.html\" target=\"_blank\" rel=\"nofollow\">Documentation for Threading API</a></li>\n<li><a href=\"https://stackoverflow.com/a/7424818/12777044\" target=\"_blank\" rel=\"nofollow\">Use-Case of Events</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/event","previousSlug":"py/threading/semaphore","nextSlug":"py/threading/condition","previousTitle":"threading.Semaphore","nextTitle":"threading.Condition"}},"staticQueryHashes":[]}