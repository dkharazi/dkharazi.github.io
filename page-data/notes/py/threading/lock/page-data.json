{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/lock","result":{"data":{"markdownRemark":{"frontmatter":{"title":"threading.Lock"},"html":"<h3>Describing a Primitive Lock</h3>\n<ul>\n<li>A <strong>primitive lock</strong> allows only one thread to enter locked code</li>\n<li>Only one thread can acquire the lock at a time</li>\n<li>\n<p>A primitive lock has the following states:</p>\n<ul>\n<li>Locked state</li>\n<li>Unlocked state</li>\n</ul>\n</li>\n<li>\n<p>A thread can either:</p>\n<ul>\n<li><code class=\"language-text\">Acquire</code> the lock</li>\n<li>Or <code class=\"language-text\">release</code> the lock</li>\n</ul>\n</li>\n<li>If a thread has acquired the lock, then other threads attempting to acquire the lock will be blocked</li>\n<li>Once the thread releases the lock, threads can acquire the lock without being blocked again</li>\n<li>If more than one thread is waiting to acquire the lock, then only one is allowed to proceed when the lock is released</li>\n<li>The order in which waiting threads proceed is undefined</li>\n</ul>\n<h3>Describing <code class=\"language-text\">Lock()</code></h3>\n<ul>\n<li>A primitive lock is represented using the <code class=\"language-text\">Lock</code> object</li>\n<li>A <code class=\"language-text\">Lock</code> object creates a new primitive lock</li>\n<li>This object is initially unlocked</li>\n<li>\n<p>A <code class=\"language-text\">Lock</code> instance <code class=\"language-text\">lock</code> has two methods:</p>\n<ul>\n<li><code class=\"language-text\">lock.acquire()</code></li>\n<li><code class=\"language-text\">lock.release()</code></li>\n</ul>\n</li>\n</ul>\n<h3>Describing <code class=\"language-text\">lock.acquire(blocking=True)</code></h3>\n<ul>\n<li>The <code class=\"language-text\">acquire</code> method acquires the lock</li>\n<li>The method blocks other threads from acquiring the lock until it is released</li>\n<li>If a thread calls <code class=\"language-text\">acquire</code> and successfully acquires the lock, then it returns <code class=\"language-text\">True</code></li>\n<li>Otherwise, the <code class=\"language-text\">acquire</code> method returns <code class=\"language-text\">False</code></li>\n</ul>\n<h3>Describing <code class=\"language-text\">lock.release()</code></h3>\n<ul>\n<li>The <code class=\"language-text\">release</code> method releases a lock</li>\n<li>\n<p>An error will be returned if this method is called when:</p>\n<ul>\n<li>The lock is in an unlocked state</li>\n<li>Or from a separate thread than the thread calling <code class=\"language-text\">acquire</code></li>\n</ul>\n</li>\n</ul>\n<h3>Example without <code class=\"language-text\">Lock</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test.py</span>\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Lock\n<span class=\"token keyword\">import</span> time\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">'order: '</span>\n<span class=\"token comment\"># lock = Lock()</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">stringy</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> s\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">' waiting'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># with lock:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">' locked'</span><span class=\"token punctuation\">)</span>\n    sl <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> l\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">=</span> sl\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">' unlocked'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stringy<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stringy<span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'main'</span><span class=\"token punctuation\">:</span>\n    a_t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>a<span class=\"token punctuation\">)</span>\n    b_t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>b<span class=\"token punctuation\">)</span>\n    a_t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b_t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>python3 test.py\na waiting\na locked\nb waiting\nb locked\norder: a\norder: b\na unlocked\nb unlocked</code></pre></div>\n<h3>Example with <code class=\"language-text\">Lock</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># test.py</span>\n<span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Thread<span class=\"token punctuation\">,</span> Lock\n<span class=\"token keyword\">import</span> time\n\ns <span class=\"token operator\">=</span> <span class=\"token string\">'order: '</span>\nlock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">stringy</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">global</span> s\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">' waiting'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> lock<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">' locked'</span><span class=\"token punctuation\">)</span>\n        sl <span class=\"token operator\">=</span> s <span class=\"token operator\">+</span> l\n        time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        s <span class=\"token operator\">=</span> sl\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">+</span> <span class=\"token string\">' unlocked'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stringy<span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    stringy<span class=\"token punctuation\">(</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    a_t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>a<span class=\"token punctuation\">)</span>\n    b_t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>b<span class=\"token punctuation\">)</span>\n    a_t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    b_t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token operator\">$ </span>python3 test.py\na waiting\na locked\nb waiting\norder: a\na unlocked\nb locked\norder: ab\nb unlocked</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential References</a></li>\n<li><a href=\"https://docs.python.org/3/library/threading.html\" target=\"_blank\" rel=\"nofollow\">Documentation for Threading API</a></li>\n<li><a href=\"https://realpython.com/intro-to-python-threading/\" target=\"_blank\" rel=\"nofollow\">Examples of Threading in Python</a></li>\n<li><a href=\"https://stackoverflow.com/a/2332868/12777044\" target=\"_blank\" rel=\"nofollow\">Difference between Locks and Semaphores</a></li>\n<li><a href=\"https://stackoverflow.com/a/10525433/12777044\" target=\"_blank\" rel=\"nofollow\">Example Code using threading.Lock</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/lock","previousSlug":"py/threading/deadlock","nextSlug":"py/threading/rlock","previousTitle":"Race Conditions and Deadlocks","nextTitle":"threading.RLock"}},"staticQueryHashes":[]}