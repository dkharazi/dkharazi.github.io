{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/multithreading","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Multithreading"},"html":"<h3>Defining Multithreading</h3>\n<ul>\n<li><strong>Multithreading</strong> is the idea of a programming language supporting the ability for us to program and manage our own threads</li>\n<li>Java and C++ are some examples of programming languages that support multithreading</li>\n<li>Python does not support multithreading for CPU bound threads</li>\n<li>Typically, the purpose of a multithreaded program is to execute our code concurrently</li>\n<li>\n<p>Therefore, multithreading is limited by our hardware</p>\n<ul>\n<li>Since our hardware is what provides us with the capability of processing threads concurrently</li>\n</ul>\n</li>\n<li>If we only have one CPU with one core, then multithreading will not achieve anything</li>\n<li>If we have multiple CPU cores, then multithreading can achieve parallelism</li>\n<li>Multithreading is a program paradigm</li>\n<li>Hyperthreading is a hardware capability</li>\n</ul>\n<h3>Running Threads in Parallel</h3>\n<ul>\n<li>\n<p>There are only two ways to run threads in parallel:</p>\n<ol>\n<li>Ensuring our CPU core is hyperthreaded</li>\n<li>\n<p>Adding CPU cores to our system</p>\n<ul>\n<li>\n<p>We can do this by adding more CPU cores to a single CPU</p>\n<ul>\n<li><strong>i.e.</strong> multicore processor</li>\n</ul>\n</li>\n<li>\n<p>Or by adding more CPUs to our system</p>\n<ul>\n<li><strong>i.e.</strong> multiprocessor</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3>Running Threads Concurrently</h3>\n<ul>\n<li>\n<p>The operating system schedules each thread to be executed on a particular CPU core</p>\n<ul>\n<li>The operating system is very efficient at scheduling these threads</li>\n<li>It slices each thread in chunks in an attempt to fairly distribute CPU execution time across threads waiting to finish executing</li>\n<li>Typically, this efficient scheduling causes threads to appeear to be executing simultaneously</li>\n<li>This is referred to as <em>concurrency</em></li>\n</ul>\n</li>\n</ul>\n<h3>Illustrating the OS Executing Threads Concurrency</h3>\n<ul>\n<li>Let's say we've written a program in some programming language</li>\n<li>Afterwards, we execute that program</li>\n<li>By default, a program will create one process with one thread during execution</li>\n<li>\n<p>However, certain programming languages allow us to manually program and manage our own threads</p>\n<ul>\n<li>In other words, they support multithreading</li>\n<li>Scheduling is still done by the operating system</li>\n<li>However, we're able to organize code into individual threads</li>\n<li>Then, we can tell our program what to do with those threads once they are executed</li>\n</ul>\n</li>\n</ul>\n<h3>Multithreading in Python</h3>\n<ul>\n<li>The default implementation of Python is CPython</li>\n<li>CPython offers multithreading</li>\n<li>In fact, CPython uses system threads</li>\n<li>However, CPython can't use more than one core at a time</li>\n<li>This is due to the Global Interpreter Lock (GIL)</li>\n<li>CPython threads still work for I/O-bound tasks</li>\n<li>However, CPU-bound threads won't experience any benefit from multithreading</li>\n<li>Specifically, CPU bound tasks can cause deadlocks and race conditions</li>\n<li>Many CPython libraries solve this issue by using C extensions to bypass the GIL</li>\n<li>They are able to do this because these extensions bypass the CPython interpreter</li>\n<li>Instead, they use a very efficient C compiler</li>\n</ul>\n<h3>Details about the GIL and CPU-Bound Threads</h3>\n<ul>\n<li>In order to make the dynamic memory management in CPython work correctly, then the GIL prevents multiple threads from running CPython code at the same time</li>\n<li>This is because CPython's dynamic memory management is not threadsafe</li>\n<li>Specifically, it can have deadlocks and race conditions when multiple threads access the same resources at the same time</li>\n<li>\n<p>This is only true for CPU-bound threads</p>\n<ul>\n<li>Since I/O-bound threads never need to reach the CPython interpreter</li>\n</ul>\n</li>\n<li>\n<p>The GIL was a compromise between the two extremes of:</p>\n<ul>\n<li>Not allowing multithreaded code</li>\n<li>And having slow dynamic memory management</li>\n</ul>\n</li>\n<li>\n<p>Other implementations of Python don't have a GIL</p>\n<ul>\n<li><strong>e.g.</strong> Jython</li>\n<li><strong>e.g.</strong> PyPy</li>\n<li><strong>e.g.</strong> Cython</li>\n</ul>\n</li>\n<li>This is because they are built on platforms that handle dynamic memory management differently</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential Reference</a></li>\n<li><a href=\"https://www.arp.com/medias/13916546.pdf\" target=\"_blank\" rel=\"nofollow\">Python in a Nuteshell</a></li>\n<li><a href=\"https://stackoverflow.com/questions/200469/what-is-the-difference-between-a-process-and-a-thread/19518207#19518207\" target=\"_blank\" rel=\"nofollow\">Defining the Architecture of Hyperthreading</a></li>\n<li><a href=\"https://www.cs.uic.edu/~jbell/CourseNotes/OperatingSystems/4_Threads.html\" target=\"_blank\" rel=\"nofollow\">The Interaction of the OS for Multithreaded Threads</a></li>\n<li><a href=\"https://github.com/angrave/SystemProgramming/wiki/Pthreads%2C-Part-1%3A-Introduction#how-does-the-threads-stack-work\" target=\"_blank\" rel=\"nofollow\">Illustrating Single-Threaded and Multi-Threaded Stacks</a></li>\n<li><a href=\"https://stackoverflow.com/questions/44793371/is-multithreading-in-python-a-myth\" target=\"_blank\" rel=\"nofollow\">Multithreading in Python</a></li>\n<li><a href=\"https://winterbe.com/posts/2015/04/07/java8-concurrency-tutorial-thread-executor-examples/\" target=\"_blank\" rel=\"nofollow\">Concurrency with Multithreading in Java 8</a></li>\n<li><a href=\"http://tutorials.jenkov.com/java-util-concurrent/executorservice.html#submit-runnable\" target=\"_blank\" rel=\"nofollow\">Submitting Runnables in Java</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/multithreading","previousSlug":"py/threading/units","nextSlug":"py/threading/scenarios","previousTitle":"Units of Computation","nextTitle":"Multithreading Scenarios"}},"staticQueryHashes":[]}