{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/parallelism","result":{"data":{"markdownRemark":{"frontmatter":{"title":"Parallelism"},"html":"<h3>Introducing Concurrency and Parallelism</h3>\n<ul>\n<li>Concurrency refers to the state of two or more threads <strong>performing</strong> at the same time</li>\n<li>Parallelism refers to the state of two or more threads <strong>executing</strong> at the same time</li>\n<li>Meaning, concurrent threads appear to execute simultaneously</li>\n<li>Threads running in parallel are <em>genuinely</em> executing simultaneously</li>\n<li>Sometimes the difference in time of execution is unnoticeable</li>\n<li>Typically, concurrency involves one thread being paused while another is being executed</li>\n<li>On the other hand, parallelism involves both threads being executed at the same time</li>\n<li>\n<p>In CPython:</p>\n<ul>\n<li>I/O bound threads can be executed in parallel</li>\n<li>CPU bound threads can block other threads</li>\n<li>Processes can be executed in parallel</li>\n</ul>\n</li>\n</ul>\n<h3>Describing Concurrency and Parallelism</h3>\n<ul>\n<li>Concurrency is a condition that exists when two threads are making progress during a period of time on a system</li>\n<li>Parallelism is a condition that exists when two threads are executing simultaneously during a particular point in time</li>\n<li>Time-slicing (by the OS) is involved in ensuring concurrency</li>\n</ul>\n<h3>Illustrating Concurrency and Parallelism</h3>\n<ul>\n<li>\n<p>The following are examples of concurrency:</p>\n<ul>\n<li>Executing two threads on a single non-hyperthreaded core</li>\n<li>Loading multiple documents simultaneously while opening new browser tabs</li>\n</ul>\n</li>\n<li>\n<p>The following are examples of parallelism:</p>\n<ul>\n<li>Executing two threads on a single hyperthreaded CPU core</li>\n<li>Simultaneously executing two different threads on a multicore processor</li>\n<li>Simultaneously executing two different processes on a multicore processor</li>\n<li>Graphic computations on a GPU</li>\n</ul>\n</li>\n</ul>\n<h3>Describing Multithreading and Concurrency</h3>\n<ul>\n<li>\n<p>At a hardware level, a CPU can execute threads in parallel for:</p>\n<ul>\n<li>Hyperthreaded processors</li>\n<li>Multicore processors</li>\n</ul>\n</li>\n<li>A CPU core only appears to run threads from a multithreaded program simultaneously</li>\n<li>In other words, a single core runs threads concurrently</li>\n<li>Specifically, each threads gets a few milliseconds of execution on a single core</li>\n<li>Then, the OS schedules another threads to run on that same core for a few milliseconds</li>\n<li>\n<p>For example, lets say we have the following:</p>\n<ul>\n<li>A java program with 4 threads</li>\n<li>A computer with 4 CPU cores</li>\n</ul>\n</li>\n<li>Most likely, those 4 java threads will truly run in parallel on 4 separate cores</li>\n<li>In this situation, we're assuming those 4 cpu cores are idle beforehand</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential Reference</a></li>\n<li><a href=\"https://www.arp.com/medias/13916546.pdf\" target=\"_blank\" rel=\"nofollow\">Python in a Nuteshell</a></li>\n<li><a href=\"https://medium.com/building-the-system/gunicorn-3-means-of-concurrency-efbb547674b7\" target=\"_blank\" rel=\"nofollow\">Concurrency and Parallelism in Python</a></li>\n<li><a href=\"https://wiki.haskell.org/Parallelism_vs._Concurrency\" target=\"_blank\" rel=\"nofollow\">Haskell Wiki on Concurrency and Parallelism</a></li>\n<li><a href=\"http://tutorials.jenkov.com/java-concurrency/concurrency-vs-parallelism.html#concurrency-vs-parallelism\" target=\"_blank\" rel=\"nofollow\">Concurrency and Parallelism in Java</a></li>\n<li><a href=\"https://stackoverflow.com/questions/5593328/software-threads-vs-hardware-threads/5593432#5593432\" target=\"_blank\" rel=\"nofollow\">Parallelism with Hardware Threads</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/parallelism","previousSlug":"py/threading/scenarios","nextSlug":"py/threading/interpreter","previousTitle":"Multithreading Scenarios","nextTitle":"Compilers and Interpreters"}},"staticQueryHashes":[]}