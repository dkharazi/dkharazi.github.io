{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/queue","result":{"data":{"markdownRemark":{"frontmatter":{"title":"threading.Queue"},"html":"<h3>Describing the <code class=\"language-text\">queue</code> Module</h3>\n<ul>\n<li>The <code class=\"language-text\">queue</code> module implements various mulitproducer multiconsumer queues</li>\n<li>These can be used to safely exchange information between multiple threads</li>\n<li>\n<p>The queue module defines three different queue classes:</p>\n<ul>\n<li><code class=\"language-text\">Queue</code></li>\n<li><code class=\"language-text\">LifoQueue</code></li>\n<li><code class=\"language-text\">PriorityQueue</code></li>\n</ul>\n</li>\n<li>An instance <code class=\"language-text\">q</code> of any of these constructors can be created</li>\n</ul>\n<h3>Describing <code class=\"language-text\">Queue(maxsize=0)</code></h3>\n<ul>\n<li>This class creates a FIFO queue</li>\n<li><code class=\"language-text\">maxsize</code> is the maximum number of items that can be placed in the queue</li>\n<li>If <code class=\"language-text\">maxsize</code> is omitted or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then the queue size is infinite</li>\n</ul>\n<h3>Describing <code class=\"language-text\">LifoQueue(maxsize=0)</code></h3>\n<ul>\n<li>This class creates a LIFO queue</li>\n<li>A LIFO queue is also known as a stack</li>\n</ul>\n<h3>Describing <code class=\"language-text\">PriorityQueue(maxsize=0)</code></h3>\n<ul>\n<li>This class creates a priority queue in which items are ordered from lowest to highest priority</li>\n<li>When working with this queue, items should be tuples</li>\n<li>These tuples should take the form of <code class=\"language-text\">(priority, data)</code></li>\n</ul>\n<h3>Summarizing Instance Methods</h3>\n<ul>\n<li>\n<p>Each <code class=\"language-text\">q</code> instance should call <code class=\"language-text\">get</code> on the queue to retrieve a task</p>\n<ul>\n<li>This call will block if no tasks are available</li>\n<li>This will causes workers to go idle until one becomes available</li>\n</ul>\n</li>\n<li>Then, the worker should execute the task</li>\n<li>Once the tasks is done, <code class=\"language-text\">task_done</code> shoul dbe called on <code class=\"language-text\">q</code></li>\n<li>We can put tasks in <code class=\"language-text\">q</code> by calling <code class=\"language-text\">put</code></li>\n<li>Calling <code class=\"language-text\">join</code> on <code class=\"language-text\">q</code> will wait until all pending tasks have completed</li>\n</ul>\n<h3>Benefit of Queues</h3>\n<ul>\n<li>\n<p>Using queues instead of thread pools has the following benefit:</p>\n<ul>\n<li>Not creating threads, which is expensive</li>\n<li>Not destroying threads, which is expensive</li>\n</ul>\n</li>\n<li>The worker threads will run continuously</li>\n<li>When no tasks are in the queue, the queue will sleep</li>\n<li>This won't use any CPU time</li>\n</ul>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential References</a></li>\n<li><a href=\"https://docs.python.org/3/library/queue.html\" target=\"_blank\" rel=\"nofollow\">Documentation for Queue API</a></li>\n<li><a href=\"https://stackoverflow.com/a/19369877/12777044\" target=\"_blank\" rel=\"nofollow\">Summarizing Methods of the Queue Class</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/queue","previousSlug":"py/threading/condition","nextSlug":"py/threading/threadpool","previousTitle":"threading.Condition","nextTitle":"ThreadPoolExecutor"}},"staticQueryHashes":[]}