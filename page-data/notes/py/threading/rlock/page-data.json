{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/rlock","result":{"data":{"markdownRemark":{"frontmatter":{"title":"threading.RLock"},"html":"<h3>Motivating a Reentrant Lock</h3>\n<ul>\n<li>There will be times when we want to nest locks within locks</li>\n<li>\n<p>In these scenario, we'll likely:</p>\n<ul>\n<li>Take one thread inside of a lock</li>\n<li>Branch off to create more threads</li>\n<li>Adding another lock for those nested threads</li>\n</ul>\n</li>\n<li>As a result, we will be nesting locks</li>\n<li>Consequently, this will create a deadlock</li>\n<li>The following steps will deadlock:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Lock\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># acquiring lock twice -> hangs</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>Therefore, the <code class=\"language-text\">RLock</code> is designed for handling nested locks</li>\n</ul>\n<h3>Describing a Reentrant Lock</h3>\n<ul>\n<li>A reentrant lock is a synchronization primitive that's similar to a <code class=\"language-text\">Lock</code> object</li>\n<li>However, it can be acquired multiple times by the same thread</li>\n<li>This allows the thread owning the lock to perform nested <code class=\"language-text\">acquire()</code> and <code class=\"language-text\">release()</code> operations</li>\n<li>In this case, only the outer-most <code class=\"language-text\">release()</code> operation resets the lock to its unlocked state</li>\n</ul>\n<h3>Describing <code class=\"language-text\">RLock()</code></h3>\n<ul>\n<li>A reentrant lock is represented using the <code class=\"language-text\">RLock</code> object</li>\n<li>A new <code class=\"language-text\">RLock</code> object is created using the <code class=\"language-text\">RLock()</code> constructor</li>\n<li>It creates a new reentrant lock object</li>\n<li>\n<p>An <code class=\"language-text\">RLock</code> instance <code class=\"language-text\">rlock</code> has two methods:</p>\n<ul>\n<li><code class=\"language-text\">rlock.acquire()</code></li>\n<li><code class=\"language-text\">rlock.release()</code></li>\n</ul>\n</li>\n</ul>\n<h3>Describing <code class=\"language-text\">rlock.acquire(blocking=True)</code></h3>\n<ul>\n<li><code class=\"language-text\">acquire</code> acquires the lock, blocking until the lock is released</li>\n<li>\n<p>If no thread owns the lock:</p>\n<ul>\n<li>The thread is locked</li>\n<li>And the recursion level is set to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n</ul>\n</li>\n<li>If this thread already owns the lock, the recursion level of the lock is increased by one and the function returns immediately</li>\n</ul>\n<h3>Describing <code class=\"language-text\">rlock.release()</code></h3>\n<ul>\n<li><code class=\"language-text\">release</code> releases the lock by decrementing its recursion level</li>\n<li>If the recursion level is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> after the decrement, then the lock is reset to the unlocked state</li>\n<li>Otherwise, the lock remains locked</li>\n<li>This function should only be called by the thread that currently owns the lock</li>\n</ul>\n<h3>Example with <code class=\"language-text\">RLock</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> RLock\n<span class=\"token operator\">>></span><span class=\"token operator\">>></span> l <span class=\"token operator\">=</span> threading<span class=\"token punctuation\">.</span>RLock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># acquiring lock twice -> doesn't hang</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> l<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential References</a></li>\n<li><a href=\"https://docs.python.org/3/library/threading.html\" target=\"_blank\" rel=\"nofollow\">Documentation for Threading API</a></li>\n<li><a href=\"https://realpython.com/intro-to-python-threading/\" target=\"_blank\" rel=\"nofollow\">Examples of Threading in Python</a></li>\n<li><a href=\"https://stackoverflow.com/a/2332868/12777044\" target=\"_blank\" rel=\"nofollow\">Difference between Locks and Semaphores</a></li>\n<li><a href=\"https://stackoverflow.com/a/10525433/12777044\" target=\"_blank\" rel=\"nofollow\">Example Code using threading.Lock</a></li>\n<li><a href=\"https://stackoverflow.com/a/5035166/12777044\" target=\"_blank\" rel=\"nofollow\">Details about Reentrant Locks</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/rlock","previousSlug":"py/threading/lock","nextSlug":"py/threading/semaphore","previousTitle":"threading.Lock","nextTitle":"threading.Semaphore"}},"staticQueryHashes":[]}