{"componentChunkName":"component---src-templates-entry-js","path":"/notes/py/threading/semaphore","result":{"data":{"markdownRemark":{"frontmatter":{"title":"threading.Semaphore"},"html":"<h3>Describing Semaphores</h3>\n<ul>\n<li>A semaphore is a counter with a few special properties</li>\n<li>\n<p>This counter has the following properties:</p>\n<ul>\n<li>Is decremented by each <code class=\"language-text\">acquire</code> call</li>\n<li>Is incremented by each <code class=\"language-text\">release</code> call</li>\n<li>Counting is atomic</li>\n</ul>\n</li>\n<li>If the counter ever reaches <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then threads are blocked</li>\n<li>Specifically, threads can't acquire a semahore until a <code class=\"language-text\">release</code></li>\n<li>This causes the semaphore to block other threads</li>\n<li>\n<p>Also, a counter is atomic</p>\n<ul>\n<li>Meaning, the OS will not swap out the thread in the middle of incrementing and decrementing the counter</li>\n</ul>\n</li>\n<li>Semaphores are used to protect resources with capacity limits</li>\n<li>For example, a semaphore is used to limit the size of a pool</li>\n</ul>\n<h3>Describing <code class=\"language-text\">Semaphore(value=1)</code></h3>\n<ul>\n<li>The <code class=\"language-text\">Semaphore</code> object creates a semaphore instance</li>\n<li>The <code class=\"language-text\">value</code> is the initial value for the counter</li>\n<li>The <code class=\"language-text\">value</code> is assigned to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> by default</li>\n<li>\n<p>A <code class=\"language-text\">Semaphore</code> instance <code class=\"language-text\">s</code> supports the following methods:</p>\n<ul>\n<li><code class=\"language-text\">acquire</code></li>\n<li><code class=\"language-text\">release</code></li>\n</ul>\n</li>\n</ul>\n<h3>Describing <code class=\"language-text\">s.acquire(blocking=True)</code></h3>\n<ul>\n<li>This method acquires a semaphore</li>\n<li>\n<p>If the internal counter is more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> initially, then this method:</p>\n<ul>\n<li>Decrements the counter by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>And returns immediately</li>\n</ul>\n</li>\n<li>If it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, this method blocks until another thread calls <code class=\"language-text\">release</code></li>\n<li>The <code class=\"language-text\">blocking</code> argument has the same behavior as described for <code class=\"language-text\">Lock</code> and <code class=\"language-text\">RLock</code> objects</li>\n</ul>\n<h3>Describing <code class=\"language-text\">s.release()</code></h3>\n<ul>\n<li>This method releases a semaphore</li>\n<li>It does this by incrementing the internal counter by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></li>\n<li>If the counter is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> and another thread is waiting, then that tread is awakened</li>\n<li>If multiple threads are waiting, only one will be returned from its <code class=\"language-text\">acquire</code> call</li>\n<li>The order in which threads are released is not deterministic</li>\n</ul>\n<h3>Illustrating a Semaphore using Bouncers</h3>\n<ul>\n<li>A semaphore can be thought of as a bouncer at a nightclub</li>\n<li>The bouncer will admit only a certain number of people</li>\n<li>So no one is allowed to enter if the club is full</li>\n<li>When someone leaves, the bouncer admits another person</li>\n<li>Semaphores are a way to limit the number of consumers for a specific resource</li>\n<li>For example, a semaphore could limit the number of simulateous calls to a database made by our application</li>\n</ul>\n<h3>Example with <code class=\"language-text\">Semaphore</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> threading <span class=\"token keyword\">import</span> Semaphore<span class=\"token punctuation\">,</span> Thread\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">import</span> time\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> bouncer <span class=\"token operator\">=</span> Semaphore<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># only 3 guests at once</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">guest</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Guest {} is waiting'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     bouncer<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Guest {} has entered'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># dance for 2 seconds!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Guest {} is leaving'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     bouncer<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">openclub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         t <span class=\"token operator\">=</span> Thread<span class=\"token punctuation\">(</span>target<span class=\"token operator\">=</span>guest<span class=\"token punctuation\">,</span> args<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>         t<span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> openclub<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nGuest <span class=\"token number\">1</span> <span class=\"token keyword\">is</span> waiting\nGuest <span class=\"token number\">1</span> has entered\nGuest <span class=\"token number\">2</span> <span class=\"token keyword\">is</span> waiting\nGuest <span class=\"token number\">2</span> has entered\nGuest <span class=\"token number\">3</span> <span class=\"token keyword\">is</span> waiting\nGuest <span class=\"token number\">3</span> has entered\nGuest <span class=\"token number\">4</span> <span class=\"token keyword\">is</span> waiting\nGuest <span class=\"token number\">5</span> <span class=\"token keyword\">is</span> waiting\n\nGuest <span class=\"token number\">1</span> <span class=\"token keyword\">is</span> leaving\nGuest <span class=\"token number\">4</span> has entered\nGuest <span class=\"token number\">2</span> <span class=\"token keyword\">is</span> leaving\nGuest <span class=\"token number\">5</span> has entered\n\nGuest <span class=\"token number\">3</span> <span class=\"token keyword\">is</span> leaving\nGuest <span class=\"token number\">4</span> <span class=\"token keyword\">is</span> leaving\nGuest <span class=\"token number\">5</span> <span class=\"token keyword\">is</span> leaving</code></pre></div>\n<h3>References</h3>\n<ul>\n<li><a href=\"http://index-of.co.uk/Python/Python%20Essential%20Reference,%20Fourth%20Edition.pdf\" target=\"_blank\" rel=\"nofollow\">Python Essential References</a></li>\n<li><a href=\"https://docs.python.org/3/library/threading.html\" target=\"_blank\" rel=\"nofollow\">Documentation for Threading API</a></li>\n<li><a href=\"https://realpython.com/intro-to-python-threading/#semaphore\" target=\"_blank\" rel=\"nofollow\">Examples of Semaphores in Python</a></li>\n<li><a href=\"https://stackoverflow.com/a/44971803/12777044\" target=\"_blank\" rel=\"nofollow\">Illustrating Semaphores and Mutexes with Taxis</a></li>\n<li><a href=\"https://stackoverflow.com/a/40238/12777044\" target=\"_blank\" rel=\"nofollow\">Defining a Semaphore</a></li>\n<li><a href=\"https://stackoverflow.com/a/40473/12777044\" target=\"_blank\" rel=\"nofollow\">Example of Semaphores involving Bouncers</a></li>\n</ul>"}},"pageContext":{"slug":"py/threading/semaphore","previousSlug":"py/threading/rlock","nextSlug":"py/threading/event","previousTitle":"threading.RLock","nextTitle":"threading.Event"}},"staticQueryHashes":[]}